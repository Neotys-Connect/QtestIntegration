/*
 * qTest Manager API Version 8.6 - 10.2
 * qTest Manager API Version 8.6 - 10.2
 *
 * OpenAPI spec version: 8.6 - 10.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.neotys.qtest.api.client.api;

import com.neotys.qtest.api.client.QtestApiException;
import com.neotys.qtest.api.client.model.AutomationObjectTree;
import com.neotys.qtest.api.client.model.CommentResource;
import com.neotys.qtest.api.client.model.Message;
import com.neotys.qtest.api.client.model.PagedResourceCommentResource;
import com.neotys.qtest.api.client.model.QueueProcessingResponseTestRunDataVM;
import com.neotys.qtest.api.client.model.StatusResource;
import com.neotys.qtest.api.client.model.TestRunListResource;
import com.neotys.qtest.api.client.model.TestRunWithCustomFieldResource;
import com.neotys.qtest.api.client.model.TestRunWithParameterCreateByDatasetResource;
import com.neotys.qtest.api.client.model.TestRunWithParameterCreateManualResource;
import com.neotys.qtest.api.client.model.TestRunWithParameterCreateRandomResource;
import org.junit.Test;
import org.junit.Ignore;

import java.util.List;

/**
 * API tests for TestRunApi
 */
@Ignore
public class TestRunApiTest {

    private final TestRunApi api = new TestRunApi();

    
    /**
     * Adds a Comment to a Test Run
     *
     * To add a Comment to a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     *
     * @throws QtestApiException
     *          if the Api call fails
     */
    @Test
    public void addCommentTest() throws QtestApiException {
        Long projectId = null;
        String idOrKey = null;
        CommentResource body = null;
        CommentResource response = api.addComment(projectId, idOrKey, body);

        // TODO: test validations
    }
    
    /**
     * Create multiple Test Runs with Parameter values manual
     *
     * To create multiple Test Runs with parameter values under root or a container (Release, Test Cycle or Test Suite). Maximum number of test runs can be created is 100.
     *
     * @throws QtestApiException
     *          if the Api call fails
     */
    @Test
    public void addTestRunWithParametersTest() throws QtestApiException {
        Long projectId = null;
        TestRunWithParameterCreateManualResource body = null;
        Long parentId = null;
        String parentType = null;
        QueueProcessingResponseTestRunDataVM response = api.addTestRunWithParameters(projectId, body, parentId, parentType);

        // TODO: test validations
    }
    
    /**
     * Create multiple Test Runs with Parameter values from dataset.
     *
     * To create multiple Test Runs with parameter values under root or a container (Release, Test Cycle or Test Suite). Number of test runs can be created depend on number_of_rows property and it should not more than 100.
     *
     * @throws QtestApiException
     *          if the Api call fails
     */
    @Test
    public void addTestRunWithParametersDatasetTest() throws QtestApiException {
        Long projectId = null;
        TestRunWithParameterCreateByDatasetResource body = null;
        Long parentId = null;
        String parentType = null;
        QueueProcessingResponseTestRunDataVM response = api.addTestRunWithParametersDataset(projectId, body, parentId, parentType);

        // TODO: test validations
    }
    
    /**
     * Create multiple Test Runs with Parameter values random from selection combine type.
     *
     * To create multiple Test Runs with parameter values under root or a container (Release, Test Cycle or Test Suite). Maximum number of test runs can be created depend on combine type.
     *
     * @throws QtestApiException
     *          if the Api call fails
     */
    @Test
    public void addTestRunWithParametersRandomizeTest() throws QtestApiException {
        Long projectId = null;
        TestRunWithParameterCreateRandomResource body = null;
        Long parentId = null;
        String parentType = null;
        QueueProcessingResponseTestRunDataVM response = api.addTestRunWithParametersRandomize(projectId, body, parentId, parentType);

        // TODO: test validations
    }
    
    /**
     * Creates a Test Run
     *
     * To create a Test Run under root or a container (Release, Test Cycle or Test Suite)  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+You can optionally specify a parent in the request parameter to create its test runs.  The associated Test Case is specified in the request body
     *
     * @throws QtestApiException
     *          if the Api call fails
     */
    @Test
    public void createTest() throws QtestApiException {
        Long projectId = null;
        TestRunWithCustomFieldResource body = null;
        Long parentId = null;
        String parentType = null;
        TestRunWithCustomFieldResource response = api.create(projectId, body, parentId, parentType);

        // TODO: test validations
    }
    
    /**
     * Deletes a Test Run
     *
     * To delete a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     *
     * @throws QtestApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTest() throws QtestApiException {
        Long projectId = null;
        Long testRunId = null;
        Message response = api.delete(projectId, testRunId);

        // TODO: test validations
    }
    
    /**
     * Deletes a Comment of a Test Run
     *
     * To delete a Comment of a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     *
     * @throws QtestApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCommentTest() throws QtestApiException {
        Long projectId = null;
        String idOrKey = null;
        Long commentId = null;
        Object response = api.deleteComment(projectId, idOrKey, commentId);

        // TODO: test validations
    }
    
    /**
     * Gets a Test Run
     *
     * To retrieve a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     *
     * @throws QtestApiException
     *          if the Api call fails
     */
    @Test
    public void getTest() throws QtestApiException {
        Long projectId = null;
        Long testRunId = null;
        String expand = null;
        TestRunWithCustomFieldResource response = api.get(projectId, testRunId, expand);

        // TODO: test validations
    }
    
    /**
     * Gets a Comment from a Test Run
     *
     * To retrieve a specific Comment from a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     *
     * @throws QtestApiException
     *          if the Api call fails
     */
    @Test
    public void getCommentTest() throws QtestApiException {
        Long projectId = null;
        String idOrKey = null;
        Long commentId = null;
        CommentResource response = api.getComment(projectId, idOrKey, commentId);

        // TODO: test validations
    }
    
    /**
     * Gets all Comments of a Test Run
     *
     * To retrieve all Comments of a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     *
     * @throws QtestApiException
     *          if the Api call fails
     */
    @Test
    public void getCommentsTest() throws QtestApiException {
        Long projectId = null;
        String idOrKey = null;
        PagedResourceCommentResource response = api.getComments(projectId, idOrKey);

        // TODO: test validations
    }
    
    /**
     * Gets multiple Test Runs
     *
     * To retrieve all Test Runs under root or under a container (Release, Test Cycle or Test Suite)  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     *
     * @throws QtestApiException
     *          if the Api call fails
     */
    @Test
    public void getOfTest() throws QtestApiException {
        Long projectId = null;
        Long parentId = null;
        String parentType = null;
        String expand = null;
        Long page = null;
        Long pageSize = null;
        TestRunListResource response = api.getOf(projectId, parentId, parentType, expand, page, pageSize);

        // TODO: test validations
    }
    
    /**
     * Gets Test Run statuses
     *
     * Gets Test Run statuses
     *
     * @throws QtestApiException
     *          if the Api call fails
     */
    @Test
    public void getStatusValuableTest() throws QtestApiException {
        Long projectId = null;
        List<StatusResource> response = api.getStatusValuable(projectId);

        // TODO: test validations
    }
    
    /**
     * Gets a Sub Hierarchy
     *
     * To retrieve a Sub Hierarchy of a container (root, release, test-cycle)   &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.3.4+
     *
     * @throws QtestApiException
     *          if the Api call fails
     */
    @Test
    public void getSubhierachyTest() throws QtestApiException {
        Long projectId = null;
        String parentType = null;
        Long parentId = null;
        AutomationObjectTree response = api.getSubhierachy(projectId, parentType, parentId);

        // TODO: test validations
    }
    
    /**
     * Updates a Test Run
     *
     * To update a Test Run or move it to another container  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     *
     * @throws QtestApiException
     *          if the Api call fails
     */
    @Test
    public void updateTest() throws QtestApiException {
        Long projectId = null;
        Long testRunId = null;
        TestRunWithCustomFieldResource body = null;
        Long parentId = null;
        String parentType = null;
        TestRunWithCustomFieldResource response = api.update(projectId, testRunId, body, parentId, parentType);

        // TODO: test validations
    }
    
    /**
     * Updates a Comment of a Test Run
     *
     * To update a Comment of a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     *
     * @throws QtestApiException
     *          if the Api call fails
     */
    @Test
    public void updateCommentTest() throws QtestApiException {
        Long projectId = null;
        String idOrKey = null;
        Long commentId = null;
        CommentResource body = null;
        CommentResource response = api.updateComment(projectId, idOrKey, commentId, body);

        // TODO: test validations
    }
    
}
