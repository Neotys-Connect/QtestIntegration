/*
 * qTest Manager API Version 8.6 - 10.2
 * qTest Manager API Version 8.6 - 10.2
 *
 * OpenAPI spec version: 8.6 - 10.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.neotys.qtest.api.client.api;

import com.neotys.qtest.api.client.*;
import com.neotys.qtest.api.client.QtestApiClient;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.neotys.qtest.api.client.model.Message;
import com.neotys.qtest.api.client.model.TestCycleResource;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TestCycleApi {
    private QtestApiClient qtestApiClient;

    public TestCycleApi() {
        this(Configuration.getDefaultQtestApiClient());
    }

    public TestCycleApi(QtestApiClient qtestApiClient) {
        this.qtestApiClient = qtestApiClient;
    }

    public QtestApiClient getQtestApiClient() {
        return qtestApiClient;
    }

    public void setQtestApiClient(QtestApiClient qtestApiClient) {
        this.qtestApiClient = qtestApiClient;
    }

    /**
     * Build call for createCycle
     * @param projectId ID of the project (required)
     * @param body Given resource to create a test cycle. (required)
     * @param parentId ID of the Release or Test Cycle under which the newly created Test Cycle will be located.   Use 0 (zero) to create the Test Cycle under the root (optional)
     * @param parentType The artifact type of the parent folder. Valid values include &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt; or &lt;em&gt;root&lt;/em&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createCycleCall(Long projectId, TestCycleResource body, Long parentId, String parentType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-cycles"
            .replaceAll("\\{" + "projectId" + "\\}", qtestApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (parentId != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("parentId", parentId));
        if (parentType != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("parentType", parentType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createCycleValidateBeforeCall(Long projectId, TestCycleResource body, Long parentId, String parentType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new QtestApiException("Missing the required parameter 'projectId' when calling createCycle(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new QtestApiException("Missing the required parameter 'body' when calling createCycle(Async)");
        }
        

        com.squareup.okhttp.Call call = createCycleCall(projectId, body, parentId, parentType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a Test Cycle
     * To create a Test Cycle  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param body Given resource to create a test cycle. (required)
     * @param parentId ID of the Release or Test Cycle under which the newly created Test Cycle will be located.   Use 0 (zero) to create the Test Cycle under the root (optional)
     * @param parentType The artifact type of the parent folder. Valid values include &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt; or &lt;em&gt;root&lt;/em&gt; (optional)
     * @return TestCycleResource
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TestCycleResource createCycle(Long projectId, TestCycleResource body, Long parentId, String parentType) throws QtestApiException {
        ApiResponse<TestCycleResource> resp = createCycleWithHttpInfo(projectId, body, parentId, parentType);
        return resp.getData();
    }

    /**
     * Create a Test Cycle
     * To create a Test Cycle  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param body Given resource to create a test cycle. (required)
     * @param parentId ID of the Release or Test Cycle under which the newly created Test Cycle will be located.   Use 0 (zero) to create the Test Cycle under the root (optional)
     * @param parentType The artifact type of the parent folder. Valid values include &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt; or &lt;em&gt;root&lt;/em&gt; (optional)
     * @return ApiResponse&lt;TestCycleResource&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TestCycleResource> createCycleWithHttpInfo(Long projectId, TestCycleResource body, Long parentId, String parentType) throws QtestApiException {
        com.squareup.okhttp.Call call = createCycleValidateBeforeCall(projectId, body, parentId, parentType, null, null);
        Type localVarReturnType = new TypeToken<TestCycleResource>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Test Cycle (asynchronously)
     * To create a Test Cycle  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param body Given resource to create a test cycle. (required)
     * @param parentId ID of the Release or Test Cycle under which the newly created Test Cycle will be located.   Use 0 (zero) to create the Test Cycle under the root (optional)
     * @param parentType The artifact type of the parent folder. Valid values include &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt; or &lt;em&gt;root&lt;/em&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createCycleAsync(Long projectId, TestCycleResource body, Long parentId, String parentType, final ApiCallback<TestCycleResource> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createCycleValidateBeforeCall(projectId, body, parentId, parentType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TestCycleResource>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteCycle
     * @param projectId ID of the project (required)
     * @param testCycleId ID of the Test Cycle which needs to be deleted. (required)
     * @param force The Test Cycle can only be deleted if it contains no children. Specify &lt;em&gt;force&#x3D;true&lt;/em&gt; to delete the Test Cycle and its children (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCycleCall(Long projectId, Long testCycleId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-cycles/{testCycleId}"
            .replaceAll("\\{" + "projectId" + "\\}", qtestApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "testCycleId" + "\\}", qtestApiClient.escapeString(testCycleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("force", force));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCycleValidateBeforeCall(Long projectId, Long testCycleId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new QtestApiException("Missing the required parameter 'projectId' when calling deleteCycle(Async)");
        }
        
        // verify the required parameter 'testCycleId' is set
        if (testCycleId == null) {
            throw new QtestApiException("Missing the required parameter 'testCycleId' when calling deleteCycle(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteCycleCall(projectId, testCycleId, force, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deletes a Test Cycle
     * To delete a Test Cycle  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param testCycleId ID of the Test Cycle which needs to be deleted. (required)
     * @param force The Test Cycle can only be deleted if it contains no children. Specify &lt;em&gt;force&#x3D;true&lt;/em&gt; to delete the Test Cycle and its children (optional)
     * @return Message
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Message deleteCycle(Long projectId, Long testCycleId, Boolean force) throws QtestApiException {
        ApiResponse<Message> resp = deleteCycleWithHttpInfo(projectId, testCycleId, force);
        return resp.getData();
    }

    /**
     * Deletes a Test Cycle
     * To delete a Test Cycle  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param testCycleId ID of the Test Cycle which needs to be deleted. (required)
     * @param force The Test Cycle can only be deleted if it contains no children. Specify &lt;em&gt;force&#x3D;true&lt;/em&gt; to delete the Test Cycle and its children (optional)
     * @return ApiResponse&lt;Message&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Message> deleteCycleWithHttpInfo(Long projectId, Long testCycleId, Boolean force) throws QtestApiException {
        com.squareup.okhttp.Call call = deleteCycleValidateBeforeCall(projectId, testCycleId, force, null, null);
        Type localVarReturnType = new TypeToken<Message>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes a Test Cycle (asynchronously)
     * To delete a Test Cycle  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param testCycleId ID of the Test Cycle which needs to be deleted. (required)
     * @param force The Test Cycle can only be deleted if it contains no children. Specify &lt;em&gt;force&#x3D;true&lt;/em&gt; to delete the Test Cycle and its children (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteCycleAsync(Long projectId, Long testCycleId, Boolean force, final ApiCallback<Message> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCycleValidateBeforeCall(projectId, testCycleId, force, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Message>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestCycle
     * @param projectId ID of the project (required)
     * @param testCycleId ID of the Test Cycle which you want to retrieve. (required)
     * @param expand Specify &lt;em&gt;expand&#x3D;descendants&lt;/em&gt; to include its sub and grand-sub Test Cycles and Test Suites in the response (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestCycleCall(Long projectId, Long testCycleId, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-cycles/{testCycleId}"
            .replaceAll("\\{" + "projectId" + "\\}", qtestApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "testCycleId" + "\\}", qtestApiClient.escapeString(testCycleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestCycleValidateBeforeCall(Long projectId, Long testCycleId, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new QtestApiException("Missing the required parameter 'projectId' when calling getTestCycle(Async)");
        }
        
        // verify the required parameter 'testCycleId' is set
        if (testCycleId == null) {
            throw new QtestApiException("Missing the required parameter 'testCycleId' when calling getTestCycle(Async)");
        }
        

        com.squareup.okhttp.Call call = getTestCycleCall(projectId, testCycleId, expand, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets a Test Cycle
     * To retrieve a Test Cycle  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param testCycleId ID of the Test Cycle which you want to retrieve. (required)
     * @param expand Specify &lt;em&gt;expand&#x3D;descendants&lt;/em&gt; to include its sub and grand-sub Test Cycles and Test Suites in the response (optional)
     * @return TestCycleResource
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TestCycleResource getTestCycle(Long projectId, Long testCycleId, String expand) throws QtestApiException {
        ApiResponse<TestCycleResource> resp = getTestCycleWithHttpInfo(projectId, testCycleId, expand);
        return resp.getData();
    }

    /**
     * Gets a Test Cycle
     * To retrieve a Test Cycle  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param testCycleId ID of the Test Cycle which you want to retrieve. (required)
     * @param expand Specify &lt;em&gt;expand&#x3D;descendants&lt;/em&gt; to include its sub and grand-sub Test Cycles and Test Suites in the response (optional)
     * @return ApiResponse&lt;TestCycleResource&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TestCycleResource> getTestCycleWithHttpInfo(Long projectId, Long testCycleId, String expand) throws QtestApiException {
        com.squareup.okhttp.Call call = getTestCycleValidateBeforeCall(projectId, testCycleId, expand, null, null);
        Type localVarReturnType = new TypeToken<TestCycleResource>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a Test Cycle (asynchronously)
     * To retrieve a Test Cycle  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param testCycleId ID of the Test Cycle which you want to retrieve. (required)
     * @param expand Specify &lt;em&gt;expand&#x3D;descendants&lt;/em&gt; to include its sub and grand-sub Test Cycles and Test Suites in the response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestCycleAsync(Long projectId, Long testCycleId, String expand, final ApiCallback<TestCycleResource> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestCycleValidateBeforeCall(projectId, testCycleId, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TestCycleResource>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestCycles
     * @param projectId ID of the project (required)
     * @param parentId ID of the Release or Test Cycle which directly contains the Test Cycles you are retrieving. Input 0 (zero) to get Test Cycles directly under root (optional)
     * @param parentType The artifact type of the parent folder. Valid values include &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt; or &lt;em&gt;root&lt;/em&gt; (optional)
     * @param expand Specify &lt;em&gt;expand&#x3D;descendants&lt;/em&gt; to retrieve the Test Cycles&#39; sub and grand-sub Cycles/Suites (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestCyclesCall(Long projectId, Long parentId, String parentType, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-cycles"
            .replaceAll("\\{" + "projectId" + "\\}", qtestApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (parentId != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("parentId", parentId));
        if (parentType != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("parentType", parentType));
        if (expand != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestCyclesValidateBeforeCall(Long projectId, Long parentId, String parentType, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new QtestApiException("Missing the required parameter 'projectId' when calling getTestCycles(Async)");
        }
        

        com.squareup.okhttp.Call call = getTestCyclesCall(projectId, parentId, parentType, expand, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets multiple Test Cycles
     * To retrieve Test Cycles which are located directly under root or a Release/Test Cycle
     * @param projectId ID of the project (required)
     * @param parentId ID of the Release or Test Cycle which directly contains the Test Cycles you are retrieving. Input 0 (zero) to get Test Cycles directly under root (optional)
     * @param parentType The artifact type of the parent folder. Valid values include &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt; or &lt;em&gt;root&lt;/em&gt; (optional)
     * @param expand Specify &lt;em&gt;expand&#x3D;descendants&lt;/em&gt; to retrieve the Test Cycles&#39; sub and grand-sub Cycles/Suites (optional)
     * @return List&lt;TestCycleResource&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<TestCycleResource> getTestCycles(Long projectId, Long parentId, String parentType, String expand) throws QtestApiException {
        ApiResponse<List<TestCycleResource>> resp = getTestCyclesWithHttpInfo(projectId, parentId, parentType, expand);
        return resp.getData();
    }

    /**
     * Gets multiple Test Cycles
     * To retrieve Test Cycles which are located directly under root or a Release/Test Cycle
     * @param projectId ID of the project (required)
     * @param parentId ID of the Release or Test Cycle which directly contains the Test Cycles you are retrieving. Input 0 (zero) to get Test Cycles directly under root (optional)
     * @param parentType The artifact type of the parent folder. Valid values include &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt; or &lt;em&gt;root&lt;/em&gt; (optional)
     * @param expand Specify &lt;em&gt;expand&#x3D;descendants&lt;/em&gt; to retrieve the Test Cycles&#39; sub and grand-sub Cycles/Suites (optional)
     * @return ApiResponse&lt;List&lt;TestCycleResource&gt;&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<TestCycleResource>> getTestCyclesWithHttpInfo(Long projectId, Long parentId, String parentType, String expand) throws QtestApiException {
        com.squareup.okhttp.Call call = getTestCyclesValidateBeforeCall(projectId, parentId, parentType, expand, null, null);
        Type localVarReturnType = new TypeToken<List<TestCycleResource>>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets multiple Test Cycles (asynchronously)
     * To retrieve Test Cycles which are located directly under root or a Release/Test Cycle
     * @param projectId ID of the project (required)
     * @param parentId ID of the Release or Test Cycle which directly contains the Test Cycles you are retrieving. Input 0 (zero) to get Test Cycles directly under root (optional)
     * @param parentType The artifact type of the parent folder. Valid values include &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt; or &lt;em&gt;root&lt;/em&gt; (optional)
     * @param expand Specify &lt;em&gt;expand&#x3D;descendants&lt;/em&gt; to retrieve the Test Cycles&#39; sub and grand-sub Cycles/Suites (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestCyclesAsync(Long projectId, Long parentId, String parentType, String expand, final ApiCallback<List<TestCycleResource>> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestCyclesValidateBeforeCall(projectId, parentId, parentType, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<TestCycleResource>>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateCycle
     * @param projectId ID of the project (required)
     * @param testCycleId ID of the Test Cycle which needs to be updated. (required)
     * @param body The Test Cycle&#39;s updated properties (required)
     * @param parentId ID of a Release or parent Test Cycle which the updated Test Cycle will be moved to. Input 0 (zero) to move the Test Cycle to under root (optional)
     * @param parentType The artifact type of the parent folder to which the Test Cycle will be moved to. Valid values include &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt; or &lt;em&gt;root&lt;/em&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCycleCall(Long projectId, Long testCycleId, TestCycleResource body, Long parentId, String parentType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-cycles/{testCycleId}"
            .replaceAll("\\{" + "projectId" + "\\}", qtestApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "testCycleId" + "\\}", qtestApiClient.escapeString(testCycleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (parentId != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("parentId", parentId));
        if (parentType != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("parentType", parentType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCycleValidateBeforeCall(Long projectId, Long testCycleId, TestCycleResource body, Long parentId, String parentType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new QtestApiException("Missing the required parameter 'projectId' when calling updateCycle(Async)");
        }
        
        // verify the required parameter 'testCycleId' is set
        if (testCycleId == null) {
            throw new QtestApiException("Missing the required parameter 'testCycleId' when calling updateCycle(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new QtestApiException("Missing the required parameter 'body' when calling updateCycle(Async)");
        }
        

        com.squareup.okhttp.Call call = updateCycleCall(projectId, testCycleId, body, parentId, parentType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates a Test Cycle
     * To update a Test Cycle or move it to another container  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param testCycleId ID of the Test Cycle which needs to be updated. (required)
     * @param body The Test Cycle&#39;s updated properties (required)
     * @param parentId ID of a Release or parent Test Cycle which the updated Test Cycle will be moved to. Input 0 (zero) to move the Test Cycle to under root (optional)
     * @param parentType The artifact type of the parent folder to which the Test Cycle will be moved to. Valid values include &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt; or &lt;em&gt;root&lt;/em&gt; (optional)
     * @return TestCycleResource
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TestCycleResource updateCycle(Long projectId, Long testCycleId, TestCycleResource body, Long parentId, String parentType) throws QtestApiException {
        ApiResponse<TestCycleResource> resp = updateCycleWithHttpInfo(projectId, testCycleId, body, parentId, parentType);
        return resp.getData();
    }

    /**
     * Updates a Test Cycle
     * To update a Test Cycle or move it to another container  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param testCycleId ID of the Test Cycle which needs to be updated. (required)
     * @param body The Test Cycle&#39;s updated properties (required)
     * @param parentId ID of a Release or parent Test Cycle which the updated Test Cycle will be moved to. Input 0 (zero) to move the Test Cycle to under root (optional)
     * @param parentType The artifact type of the parent folder to which the Test Cycle will be moved to. Valid values include &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt; or &lt;em&gt;root&lt;/em&gt; (optional)
     * @return ApiResponse&lt;TestCycleResource&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TestCycleResource> updateCycleWithHttpInfo(Long projectId, Long testCycleId, TestCycleResource body, Long parentId, String parentType) throws QtestApiException {
        com.squareup.okhttp.Call call = updateCycleValidateBeforeCall(projectId, testCycleId, body, parentId, parentType, null, null);
        Type localVarReturnType = new TypeToken<TestCycleResource>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a Test Cycle (asynchronously)
     * To update a Test Cycle or move it to another container  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param testCycleId ID of the Test Cycle which needs to be updated. (required)
     * @param body The Test Cycle&#39;s updated properties (required)
     * @param parentId ID of a Release or parent Test Cycle which the updated Test Cycle will be moved to. Input 0 (zero) to move the Test Cycle to under root (optional)
     * @param parentType The artifact type of the parent folder to which the Test Cycle will be moved to. Valid values include &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt; or &lt;em&gt;root&lt;/em&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCycleAsync(Long projectId, Long testCycleId, TestCycleResource body, Long parentId, String parentType, final ApiCallback<TestCycleResource> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCycleValidateBeforeCall(projectId, testCycleId, body, parentId, parentType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TestCycleResource>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
