/*
 * qTest Manager API Version 8.6 - 10.2
 * qTest Manager API Version 8.6 - 10.2
 *
 * OpenAPI spec version: 8.6 - 10.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.neotys.qtest.api.client.model;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;

/**
 * RequirementMapping
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-01-14T16:24:25.829Z")
public class RequirementMapping {
  @SerializedName("externalProjectId")
  private String externalProjectId = null;

  @SerializedName("externalTypeId")
  private String externalTypeId = null;

  @SerializedName("mapping_id")
  private Long mappingId = null;

  @SerializedName("external_filter")
  private String externalFilter = null;

  @SerializedName("external_field_1_id")
  private String externalField1Id = null;

  @SerializedName("external_field_2_id")
  private String externalField2Id = null;

  @SerializedName("active_external_fields")
  private String activeExternalFields = null;

   /**
   * Get externalProjectId
   * @return externalProjectId
  **/
  @ApiModelProperty(example = "10031", value = "")
  public String getExternalProjectId() {
    return externalProjectId;
  }

   /**
   * Get externalTypeId
   * @return externalTypeId
  **/
  @ApiModelProperty(example = "10100", value = "")
  public String getExternalTypeId() {
    return externalTypeId;
  }

   /**
   * Get mappingId
   * @return mappingId
  **/
  @ApiModelProperty(example = "1", value = "")
  public Long getMappingId() {
    return mappingId;
  }

  public RequirementMapping externalFilter(String externalFilter) {
    this.externalFilter = externalFilter;
    return this;
  }

   /**
   * Get externalFilter
   * @return externalFilter
  **/
  @ApiModelProperty(example = "10048", value = "")
  public String getExternalFilter() {
    return externalFilter;
  }

  public void setExternalFilter(String externalFilter) {
    this.externalFilter = externalFilter;
  }

  public RequirementMapping externalField1Id(String externalField1Id) {
    this.externalField1Id = externalField1Id;
    return this;
  }

   /**
   * Get externalField1Id
   * @return externalField1Id
  **/
  @ApiModelProperty(example = "id", value = "")
  public String getExternalField1Id() {
    return externalField1Id;
  }

  public void setExternalField1Id(String externalField1Id) {
    this.externalField1Id = externalField1Id;
  }

  public RequirementMapping externalField2Id(String externalField2Id) {
    this.externalField2Id = externalField2Id;
    return this;
  }

   /**
   * Get externalField2Id
   * @return externalField2Id
  **/
  @ApiModelProperty(example = "project", value = "")
  public String getExternalField2Id() {
    return externalField2Id;
  }

  public void setExternalField2Id(String externalField2Id) {
    this.externalField2Id = externalField2Id;
  }

  public RequirementMapping activeExternalFields(String activeExternalFields) {
    this.activeExternalFields = activeExternalFields;
    return this;
  }

   /**
   * Get activeExternalFields
   * @return activeExternalFields
  **/
  @ApiModelProperty(example = "id,status,summary,description", value = "")
  public String getActiveExternalFields() {
    return activeExternalFields;
  }

  public void setActiveExternalFields(String activeExternalFields) {
    this.activeExternalFields = activeExternalFields;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RequirementMapping requirementMapping = (RequirementMapping) o;
    return Objects.equals(this.externalProjectId, requirementMapping.externalProjectId) &&
        Objects.equals(this.externalTypeId, requirementMapping.externalTypeId) &&
        Objects.equals(this.mappingId, requirementMapping.mappingId) &&
        Objects.equals(this.externalFilter, requirementMapping.externalFilter) &&
        Objects.equals(this.externalField1Id, requirementMapping.externalField1Id) &&
        Objects.equals(this.externalField2Id, requirementMapping.externalField2Id) &&
        Objects.equals(this.activeExternalFields, requirementMapping.activeExternalFields);
  }

  @Override
  public int hashCode() {
    return Objects.hash(externalProjectId, externalTypeId, mappingId, externalFilter, externalField1Id, externalField2Id, activeExternalFields);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RequirementMapping {\n");
    
    sb.append("    externalProjectId: ").append(toIndentedString(externalProjectId)).append("\n");
    sb.append("    externalTypeId: ").append(toIndentedString(externalTypeId)).append("\n");
    sb.append("    mappingId: ").append(toIndentedString(mappingId)).append("\n");
    sb.append("    externalFilter: ").append(toIndentedString(externalFilter)).append("\n");
    sb.append("    externalField1Id: ").append(toIndentedString(externalField1Id)).append("\n");
    sb.append("    externalField2Id: ").append(toIndentedString(externalField2Id)).append("\n");
    sb.append("    activeExternalFields: ").append(toIndentedString(activeExternalFields)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

