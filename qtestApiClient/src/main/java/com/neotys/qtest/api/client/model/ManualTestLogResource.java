/*
 * qTest Manager API Version 8.6 - 10.2
 * qTest Manager API Version 8.6 - 10.2
 *
 * OpenAPI spec version: 8.6 - 10.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.neotys.qtest.api.client.model;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;

/**
 * ManualTestLogResource
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-01-14T16:24:25.829Z")
public class ManualTestLogResource {
  @SerializedName("submittedBy")
  private String submittedBy = null;

  @SerializedName("links")
  private List<Link> links = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("test_case_version_id")
  private Long testCaseVersionId = null;

  @SerializedName("exe_start_date")
  private OffsetDateTime exeStartDate = null;

  @SerializedName("exe_end_date")
  private OffsetDateTime exeEndDate = null;

  @SerializedName("note")
  private String note = null;

  @SerializedName("attachments")
  private List<AttachmentResource> attachments = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("planned_exe_time")
  private Long plannedExeTime = null;

  @SerializedName("actual_exe_time")
  private Long actualExeTime = null;

  @SerializedName("build_number")
  private String buildNumber = null;

  @SerializedName("build_url")
  private String buildUrl = null;

  @SerializedName("properties")
  private List<PropertyResource> properties = null;

  @SerializedName("status")
  private StatusResource status = null;

  @SerializedName("result_number")
  private Long resultNumber = null;

  @SerializedName("test_step_logs")
  private List<TestStepLogResource> testStepLogs = null;

  @SerializedName("defects")
  private List<LinkedDefectResource> defects = null;

  public ManualTestLogResource submittedBy(String submittedBy) {
    this.submittedBy = submittedBy;
    return this;
  }

   /**
   * Get submittedBy
   * @return submittedBy
  **/
  @ApiModelProperty(value = "")
  public String getSubmittedBy() {
    return submittedBy;
  }

  public void setSubmittedBy(String submittedBy) {
    this.submittedBy = submittedBy;
  }

   /**
   * Get links
   * @return links
  **/
  @ApiModelProperty(value = "")
  public List<Link> getLinks() {
    return links;
  }

  public ManualTestLogResource id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(example = "1", value = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public ManualTestLogResource testCaseVersionId(Long testCaseVersionId) {
    this.testCaseVersionId = testCaseVersionId;
    return this;
  }

   /**
   * ID of the Test Case Version
   * @return testCaseVersionId
  **/
  @ApiModelProperty(example = "1", value = "ID of the Test Case Version")
  public Long getTestCaseVersionId() {
    return testCaseVersionId;
  }

  public void setTestCaseVersionId(Long testCaseVersionId) {
    this.testCaseVersionId = testCaseVersionId;
  }

  public ManualTestLogResource exeStartDate(OffsetDateTime exeStartDate) {
    this.exeStartDate = exeStartDate;
    return this;
  }

   /**
   * Execution start date
   * @return exeStartDate
  **/
  @ApiModelProperty(required = true, value = "Execution start date")
  public OffsetDateTime getExeStartDate() {
    return exeStartDate;
  }

  public void setExeStartDate(OffsetDateTime exeStartDate) {
    this.exeStartDate = exeStartDate;
  }

  public ManualTestLogResource exeEndDate(OffsetDateTime exeEndDate) {
    this.exeEndDate = exeEndDate;
    return this;
  }

   /**
   * Execution end date
   * @return exeEndDate
  **/
  @ApiModelProperty(required = true, value = "Execution end date")
  public OffsetDateTime getExeEndDate() {
    return exeEndDate;
  }

  public void setExeEndDate(OffsetDateTime exeEndDate) {
    this.exeEndDate = exeEndDate;
  }

  public ManualTestLogResource note(String note) {
    this.note = note;
    return this;
  }

   /**
   * Note
   * @return note
  **/
  @ApiModelProperty(example = "Note", value = "Note")
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }

  public ManualTestLogResource attachments(List<AttachmentResource> attachments) {
    this.attachments = attachments;
    return this;
  }

  public ManualTestLogResource addAttachmentsItem(AttachmentResource attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<AttachmentResource>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

   /**
   * Test Log attachments
   * @return attachments
  **/
  @ApiModelProperty(value = "Test Log attachments")
  public List<AttachmentResource> getAttachments() {
    return attachments;
  }

  public void setAttachments(List<AttachmentResource> attachments) {
    this.attachments = attachments;
  }

  public ManualTestLogResource name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Test Run&#39;s name
   * @return name
  **/
  @ApiModelProperty(example = "test run name", value = "Test Run's name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ManualTestLogResource plannedExeTime(Long plannedExeTime) {
    this.plannedExeTime = plannedExeTime;
    return this;
  }

   /**
   * Get plannedExeTime
   * minimum: 0
   * maximum: 9999999
   * @return plannedExeTime
  **/
  @ApiModelProperty(value = "")
  public Long getPlannedExeTime() {
    return plannedExeTime;
  }

  public void setPlannedExeTime(Long plannedExeTime) {
    this.plannedExeTime = plannedExeTime;
  }

  public ManualTestLogResource actualExeTime(Long actualExeTime) {
    this.actualExeTime = actualExeTime;
    return this;
  }

   /**
   * Get actualExeTime
   * @return actualExeTime
  **/
  @ApiModelProperty(value = "")
  public Long getActualExeTime() {
    return actualExeTime;
  }

  public void setActualExeTime(Long actualExeTime) {
    this.actualExeTime = actualExeTime;
  }

  public ManualTestLogResource buildNumber(String buildNumber) {
    this.buildNumber = buildNumber;
    return this;
  }

   /**
   * Jenkins jobs build number
   * @return buildNumber
  **/
  @ApiModelProperty(example = "10", value = "Jenkins jobs build number")
  public String getBuildNumber() {
    return buildNumber;
  }

  public void setBuildNumber(String buildNumber) {
    this.buildNumber = buildNumber;
  }

  public ManualTestLogResource buildUrl(String buildUrl) {
    this.buildUrl = buildUrl;
    return this;
  }

   /**
   * Jenkins jobs build URL
   * @return buildUrl
  **/
  @ApiModelProperty(example = "http://localhost:8080/jenkins", value = "Jenkins jobs build URL")
  public String getBuildUrl() {
    return buildUrl;
  }

  public void setBuildUrl(String buildUrl) {
    this.buildUrl = buildUrl;
  }

  public ManualTestLogResource properties(List<PropertyResource> properties) {
    this.properties = properties;
    return this;
  }

  public ManualTestLogResource addPropertiesItem(PropertyResource propertiesItem) {
    if (this.properties == null) {
      this.properties = new ArrayList<PropertyResource>();
    }
    this.properties.add(propertiesItem);
    return this;
  }

   /**
   * Get properties
   * @return properties
  **/
  @ApiModelProperty(value = "")
  public List<PropertyResource> getProperties() {
    return properties;
  }

  public void setProperties(List<PropertyResource> properties) {
    this.properties = properties;
  }

  public ManualTestLogResource status(StatusResource status) {
    this.status = status;
    return this;
  }

   /**
   * Test Log status
   * @return status
  **/
  @ApiModelProperty(required = true, value = "Test Log status")
  public StatusResource getStatus() {
    return status;
  }

  public void setStatus(StatusResource status) {
    this.status = status;
  }

  public ManualTestLogResource resultNumber(Long resultNumber) {
    this.resultNumber = resultNumber;
    return this;
  }

   /**
   * Get resultNumber
   * @return resultNumber
  **/
  @ApiModelProperty(value = "")
  public Long getResultNumber() {
    return resultNumber;
  }

  public void setResultNumber(Long resultNumber) {
    this.resultNumber = resultNumber;
  }

  public ManualTestLogResource testStepLogs(List<TestStepLogResource> testStepLogs) {
    this.testStepLogs = testStepLogs;
    return this;
  }

  public ManualTestLogResource addTestStepLogsItem(TestStepLogResource testStepLogsItem) {
    if (this.testStepLogs == null) {
      this.testStepLogs = new ArrayList<TestStepLogResource>();
    }
    this.testStepLogs.add(testStepLogsItem);
    return this;
  }

   /**
   * Arrays of Test Step Log,   With called test steps, the \&quot;called_test_case_id\&quot; and \&quot;parent_test_step_id\&quot; must be included in request body.
   * @return testStepLogs
  **/
  @ApiModelProperty(value = "Arrays of Test Step Log,   With called test steps, the \"called_test_case_id\" and \"parent_test_step_id\" must be included in request body.")
  public List<TestStepLogResource> getTestStepLogs() {
    return testStepLogs;
  }

  public void setTestStepLogs(List<TestStepLogResource> testStepLogs) {
    this.testStepLogs = testStepLogs;
  }

  public ManualTestLogResource defects(List<LinkedDefectResource> defects) {
    this.defects = defects;
    return this;
  }

  public ManualTestLogResource addDefectsItem(LinkedDefectResource defectsItem) {
    if (this.defects == null) {
      this.defects = new ArrayList<LinkedDefectResource>();
    }
    this.defects.add(defectsItem);
    return this;
  }

   /**
   * Array of Defect
   * @return defects
  **/
  @ApiModelProperty(value = "Array of Defect")
  public List<LinkedDefectResource> getDefects() {
    return defects;
  }

  public void setDefects(List<LinkedDefectResource> defects) {
    this.defects = defects;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ManualTestLogResource manualTestLogResource = (ManualTestLogResource) o;
    return Objects.equals(this.submittedBy, manualTestLogResource.submittedBy) &&
        Objects.equals(this.links, manualTestLogResource.links) &&
        Objects.equals(this.id, manualTestLogResource.id) &&
        Objects.equals(this.testCaseVersionId, manualTestLogResource.testCaseVersionId) &&
        Objects.equals(this.exeStartDate, manualTestLogResource.exeStartDate) &&
        Objects.equals(this.exeEndDate, manualTestLogResource.exeEndDate) &&
        Objects.equals(this.note, manualTestLogResource.note) &&
        Objects.equals(this.attachments, manualTestLogResource.attachments) &&
        Objects.equals(this.name, manualTestLogResource.name) &&
        Objects.equals(this.plannedExeTime, manualTestLogResource.plannedExeTime) &&
        Objects.equals(this.actualExeTime, manualTestLogResource.actualExeTime) &&
        Objects.equals(this.buildNumber, manualTestLogResource.buildNumber) &&
        Objects.equals(this.buildUrl, manualTestLogResource.buildUrl) &&
        Objects.equals(this.properties, manualTestLogResource.properties) &&
        Objects.equals(this.status, manualTestLogResource.status) &&
        Objects.equals(this.resultNumber, manualTestLogResource.resultNumber) &&
        Objects.equals(this.testStepLogs, manualTestLogResource.testStepLogs) &&
        Objects.equals(this.defects, manualTestLogResource.defects);
  }

  @Override
  public int hashCode() {
    return Objects.hash(submittedBy, links, id, testCaseVersionId, exeStartDate, exeEndDate, note, attachments, name, plannedExeTime, actualExeTime, buildNumber, buildUrl, properties, status, resultNumber, testStepLogs, defects);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ManualTestLogResource {\n");
    
    sb.append("    submittedBy: ").append(toIndentedString(submittedBy)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    testCaseVersionId: ").append(toIndentedString(testCaseVersionId)).append("\n");
    sb.append("    exeStartDate: ").append(toIndentedString(exeStartDate)).append("\n");
    sb.append("    exeEndDate: ").append(toIndentedString(exeEndDate)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    plannedExeTime: ").append(toIndentedString(plannedExeTime)).append("\n");
    sb.append("    actualExeTime: ").append(toIndentedString(actualExeTime)).append("\n");
    sb.append("    buildNumber: ").append(toIndentedString(buildNumber)).append("\n");
    sb.append("    buildUrl: ").append(toIndentedString(buildUrl)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    resultNumber: ").append(toIndentedString(resultNumber)).append("\n");
    sb.append("    testStepLogs: ").append(toIndentedString(testStepLogs)).append("\n");
    sb.append("    defects: ").append(toIndentedString(defects)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

