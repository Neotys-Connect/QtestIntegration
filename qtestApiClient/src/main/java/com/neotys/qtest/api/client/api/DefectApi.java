/*
 * qTest Manager API Version 8.6 - 10.2
 * qTest Manager API Version 8.6 - 10.2
 *
 * OpenAPI spec version: 8.6 - 10.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.neotys.qtest.api.client.api;

import com.neotys.qtest.api.client.*;
import com.neotys.qtest.api.client.model.PagedResourceCommentResource;
import com.neotys.qtest.api.client.QtestApiClient;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.neotys.qtest.api.client.model.CommentResource;
import com.neotys.qtest.api.client.model.DefectResource;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefectApi {
    private QtestApiClient qtestApiClient;

    public DefectApi() {
        this(Configuration.getDefaultQtestApiClient());
    }

    public DefectApi(QtestApiClient qtestApiClient) {
        this.qtestApiClient = qtestApiClient;
    }

    public QtestApiClient getQtestApiClient() {
        return qtestApiClient;
    }

    public void setQtestApiClient(QtestApiClient qtestApiClient) {
        this.qtestApiClient = qtestApiClient;
    }

    /**
     * Build call for addComment
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Defect (required)
     * @param body The Comment&#39;s content (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addCommentCall(Long projectId, String idOrKey, CommentResource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/defects/{idOrKey}/comments"
            .replaceAll("\\{" + "projectId" + "\\}", qtestApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "idOrKey" + "\\}", qtestApiClient.escapeString(idOrKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addCommentValidateBeforeCall(Long projectId, String idOrKey, CommentResource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new QtestApiException("Missing the required parameter 'projectId' when calling addComment(Async)");
        }
        
        // verify the required parameter 'idOrKey' is set
        if (idOrKey == null) {
            throw new QtestApiException("Missing the required parameter 'idOrKey' when calling addComment(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new QtestApiException("Missing the required parameter 'body' when calling addComment(Async)");
        }
        

        com.squareup.okhttp.Call call = addCommentCall(projectId, idOrKey, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Adds a Comment to a Defect
     * To add a Comment to a Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Defect (required)
     * @param body The Comment&#39;s content (required)
     * @return CommentResource
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CommentResource addComment(Long projectId, String idOrKey, CommentResource body) throws QtestApiException {
        ApiResponse<CommentResource> resp = addCommentWithHttpInfo(projectId, idOrKey, body);
        return resp.getData();
    }

    /**
     * Adds a Comment to a Defect
     * To add a Comment to a Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Defect (required)
     * @param body The Comment&#39;s content (required)
     * @return ApiResponse&lt;CommentResource&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CommentResource> addCommentWithHttpInfo(Long projectId, String idOrKey, CommentResource body) throws QtestApiException {
        com.squareup.okhttp.Call call = addCommentValidateBeforeCall(projectId, idOrKey, body, null, null);
        Type localVarReturnType = new TypeToken<CommentResource>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Adds a Comment to a Defect (asynchronously)
     * To add a Comment to a Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Defect (required)
     * @param body The Comment&#39;s content (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addCommentAsync(Long projectId, String idOrKey, CommentResource body, final ApiCallback<CommentResource> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addCommentValidateBeforeCall(projectId, idOrKey, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CommentResource>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteComment
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Defect whose Comment you want to delete (required)
     * @param commentId ID of the comment. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCommentCall(Long projectId, String idOrKey, Long commentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/defects/{idOrKey}/comments/{commentId}"
            .replaceAll("\\{" + "projectId" + "\\}", qtestApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "idOrKey" + "\\}", qtestApiClient.escapeString(idOrKey.toString()))
            .replaceAll("\\{" + "commentId" + "\\}", qtestApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCommentValidateBeforeCall(Long projectId, String idOrKey, Long commentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new QtestApiException("Missing the required parameter 'projectId' when calling deleteComment(Async)");
        }
        
        // verify the required parameter 'idOrKey' is set
        if (idOrKey == null) {
            throw new QtestApiException("Missing the required parameter 'idOrKey' when calling deleteComment(Async)");
        }
        
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new QtestApiException("Missing the required parameter 'commentId' when calling deleteComment(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteCommentCall(projectId, idOrKey, commentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deletes a Comment of a Defect
     * To delete a specific Comment of a Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Defect whose Comment you want to delete (required)
     * @param commentId ID of the comment. (required)
     * @return Object
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object deleteComment(Long projectId, String idOrKey, Long commentId) throws QtestApiException {
        ApiResponse<Object> resp = deleteCommentWithHttpInfo(projectId, idOrKey, commentId);
        return resp.getData();
    }

    /**
     * Deletes a Comment of a Defect
     * To delete a specific Comment of a Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Defect whose Comment you want to delete (required)
     * @param commentId ID of the comment. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> deleteCommentWithHttpInfo(Long projectId, String idOrKey, Long commentId) throws QtestApiException {
        com.squareup.okhttp.Call call = deleteCommentValidateBeforeCall(projectId, idOrKey, commentId, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes a Comment of a Defect (asynchronously)
     * To delete a specific Comment of a Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Defect whose Comment you want to delete (required)
     * @param commentId ID of the comment. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteCommentAsync(Long projectId, String idOrKey, Long commentId, final ApiCallback<Object> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCommentValidateBeforeCall(projectId, idOrKey, commentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getComment
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Defect whose comment you want to retrieve (required)
     * @param commentId ID of the comment (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCommentCall(Long projectId, String idOrKey, Long commentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/defects/{idOrKey}/comments/{commentId}"
            .replaceAll("\\{" + "projectId" + "\\}", qtestApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "idOrKey" + "\\}", qtestApiClient.escapeString(idOrKey.toString()))
            .replaceAll("\\{" + "commentId" + "\\}", qtestApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCommentValidateBeforeCall(Long projectId, String idOrKey, Long commentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new QtestApiException("Missing the required parameter 'projectId' when calling getComment(Async)");
        }
        
        // verify the required parameter 'idOrKey' is set
        if (idOrKey == null) {
            throw new QtestApiException("Missing the required parameter 'idOrKey' when calling getComment(Async)");
        }
        
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new QtestApiException("Missing the required parameter 'commentId' when calling getComment(Async)");
        }
        

        com.squareup.okhttp.Call call = getCommentCall(projectId, idOrKey, commentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets a Comment of a Defect
     * To retrieve a specific Comment of a Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Defect whose comment you want to retrieve (required)
     * @param commentId ID of the comment (required)
     * @return CommentResource
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CommentResource getComment(Long projectId, String idOrKey, Long commentId) throws QtestApiException {
        ApiResponse<CommentResource> resp = getCommentWithHttpInfo(projectId, idOrKey, commentId);
        return resp.getData();
    }

    /**
     * Gets a Comment of a Defect
     * To retrieve a specific Comment of a Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Defect whose comment you want to retrieve (required)
     * @param commentId ID of the comment (required)
     * @return ApiResponse&lt;CommentResource&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CommentResource> getCommentWithHttpInfo(Long projectId, String idOrKey, Long commentId) throws QtestApiException {
        com.squareup.okhttp.Call call = getCommentValidateBeforeCall(projectId, idOrKey, commentId, null, null);
        Type localVarReturnType = new TypeToken<CommentResource>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a Comment of a Defect (asynchronously)
     * To retrieve a specific Comment of a Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Defect whose comment you want to retrieve (required)
     * @param commentId ID of the comment (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCommentAsync(Long projectId, String idOrKey, Long commentId, final ApiCallback<CommentResource> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCommentValidateBeforeCall(projectId, idOrKey, commentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CommentResource>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getComments
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Defect whose comments you want to retrieve (required)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCommentsCall(Long projectId, String idOrKey, Long page, Long pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/defects/{idOrKey}/comments"
            .replaceAll("\\{" + "projectId" + "\\}", qtestApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "idOrKey" + "\\}", qtestApiClient.escapeString(idOrKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCommentsValidateBeforeCall(Long projectId, String idOrKey, Long page, Long pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new QtestApiException("Missing the required parameter 'projectId' when calling getComments(Async)");
        }
        
        // verify the required parameter 'idOrKey' is set
        if (idOrKey == null) {
            throw new QtestApiException("Missing the required parameter 'idOrKey' when calling getComments(Async)");
        }
        

        com.squareup.okhttp.Call call = getCommentsCall(projectId, idOrKey, page, pageSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets all Comments of a Defect
     * To retrieve all Comments of a Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Defect whose comments you want to retrieve (required)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @return PagedResourceCommentResource
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PagedResourceCommentResource getComments(Long projectId, String idOrKey, Long page, Long pageSize) throws QtestApiException {
        ApiResponse<PagedResourceCommentResource> resp = getCommentsWithHttpInfo(projectId, idOrKey, page, pageSize);
        return resp.getData();
    }

    /**
     * Gets all Comments of a Defect
     * To retrieve all Comments of a Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Defect whose comments you want to retrieve (required)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @return ApiResponse&lt;PagedResourceCommentResource&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PagedResourceCommentResource> getCommentsWithHttpInfo(Long projectId, String idOrKey, Long page, Long pageSize) throws QtestApiException {
        com.squareup.okhttp.Call call = getCommentsValidateBeforeCall(projectId, idOrKey, page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<PagedResourceCommentResource>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets all Comments of a Defect (asynchronously)
     * To retrieve all Comments of a Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Defect whose comments you want to retrieve (required)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCommentsAsync(Long projectId, String idOrKey, Long page, Long pageSize, final ApiCallback<PagedResourceCommentResource> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCommentsValidateBeforeCall(projectId, idOrKey, page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PagedResourceCommentResource>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDefect
     * @param projectId ID of the project (required)
     * @param defectId ID of the defect. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDefectCall(Long projectId, String defectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/defects/{defectId}"
            .replaceAll("\\{" + "projectId" + "\\}", qtestApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "defectId" + "\\}", qtestApiClient.escapeString(defectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDefectValidateBeforeCall(Long projectId, String defectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new QtestApiException("Missing the required parameter 'projectId' when calling getDefect(Async)");
        }
        
        // verify the required parameter 'defectId' is set
        if (defectId == null) {
            throw new QtestApiException("Missing the required parameter 'defectId' when calling getDefect(Async)");
        }
        

        com.squareup.okhttp.Call call = getDefectCall(projectId, defectId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets a Defect
     * To retrieve a Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param defectId ID of the defect. (required)
     * @return DefectResource
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DefectResource getDefect(Long projectId, String defectId) throws QtestApiException {
        ApiResponse<DefectResource> resp = getDefectWithHttpInfo(projectId, defectId);
        return resp.getData();
    }

    /**
     * Gets a Defect
     * To retrieve a Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param defectId ID of the defect. (required)
     * @return ApiResponse&lt;DefectResource&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DefectResource> getDefectWithHttpInfo(Long projectId, String defectId) throws QtestApiException {
        com.squareup.okhttp.Call call = getDefectValidateBeforeCall(projectId, defectId, null, null);
        Type localVarReturnType = new TypeToken<DefectResource>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a Defect (asynchronously)
     * To retrieve a Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param defectId ID of the defect. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDefectAsync(Long projectId, String defectId, final ApiCallback<DefectResource> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDefectValidateBeforeCall(projectId, defectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DefectResource>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLastChanged
     * @param projectId ID of the project (required)
     * @param startTime The specified time since when the Defects have been updated. It needs to be URL encoded: &lt;em&gt;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&lt;/em&gt; or &lt;em&gt;yyyy-MM-dd&#39;T&#39;HH:mm:ssZZ&lt;/em&gt; (required)
     * @param endTime Do not support at this time. Use the current time only. (optional)
     * @param size The result is paginated. By the default, the number of objects in each page is 100. You can specify your custom number in this parameter. The maximum page size is 999. (optional, default to 100)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLastChangedCall(Long projectId, String startTime, String endTime, Integer size, Long page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/defects/last-change"
            .replaceAll("\\{" + "projectId" + "\\}", qtestApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startTime != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("startTime", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("endTime", endTime));
        if (size != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("size", size));
        if (page != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("page", page));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLastChangedValidateBeforeCall(Long projectId, String startTime, String endTime, Integer size, Long page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new QtestApiException("Missing the required parameter 'projectId' when calling getLastChanged(Async)");
        }
        
        // verify the required parameter 'startTime' is set
        if (startTime == null) {
            throw new QtestApiException("Missing the required parameter 'startTime' when calling getLastChanged(Async)");
        }
        

        com.squareup.okhttp.Call call = getLastChangedCall(projectId, startTime, endTime, size, page, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets recently updated Defects
     * To retrieve Defects which have been recently updated after a specified time
     * @param projectId ID of the project (required)
     * @param startTime The specified time since when the Defects have been updated. It needs to be URL encoded: &lt;em&gt;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&lt;/em&gt; or &lt;em&gt;yyyy-MM-dd&#39;T&#39;HH:mm:ssZZ&lt;/em&gt; (required)
     * @param endTime Do not support at this time. Use the current time only. (optional)
     * @param size The result is paginated. By the default, the number of objects in each page is 100. You can specify your custom number in this parameter. The maximum page size is 999. (optional, default to 100)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @return List&lt;DefectResource&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DefectResource> getLastChanged(Long projectId, String startTime, String endTime, Integer size, Long page) throws QtestApiException {
        ApiResponse<List<DefectResource>> resp = getLastChangedWithHttpInfo(projectId, startTime, endTime, size, page);
        return resp.getData();
    }

    /**
     * Gets recently updated Defects
     * To retrieve Defects which have been recently updated after a specified time
     * @param projectId ID of the project (required)
     * @param startTime The specified time since when the Defects have been updated. It needs to be URL encoded: &lt;em&gt;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&lt;/em&gt; or &lt;em&gt;yyyy-MM-dd&#39;T&#39;HH:mm:ssZZ&lt;/em&gt; (required)
     * @param endTime Do not support at this time. Use the current time only. (optional)
     * @param size The result is paginated. By the default, the number of objects in each page is 100. You can specify your custom number in this parameter. The maximum page size is 999. (optional, default to 100)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @return ApiResponse&lt;List&lt;DefectResource&gt;&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DefectResource>> getLastChangedWithHttpInfo(Long projectId, String startTime, String endTime, Integer size, Long page) throws QtestApiException {
        com.squareup.okhttp.Call call = getLastChangedValidateBeforeCall(projectId, startTime, endTime, size, page, null, null);
        Type localVarReturnType = new TypeToken<List<DefectResource>>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets recently updated Defects (asynchronously)
     * To retrieve Defects which have been recently updated after a specified time
     * @param projectId ID of the project (required)
     * @param startTime The specified time since when the Defects have been updated. It needs to be URL encoded: &lt;em&gt;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ&lt;/em&gt; or &lt;em&gt;yyyy-MM-dd&#39;T&#39;HH:mm:ssZZ&lt;/em&gt; (required)
     * @param endTime Do not support at this time. Use the current time only. (optional)
     * @param size The result is paginated. By the default, the number of objects in each page is 100. You can specify your custom number in this parameter. The maximum page size is 999. (optional, default to 100)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLastChangedAsync(Long projectId, String startTime, String endTime, Integer size, Long page, final ApiCallback<List<DefectResource>> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLastChangedValidateBeforeCall(projectId, startTime, endTime, size, page, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DefectResource>>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for submitDefect
     * @param projectId ID of the project (required)
     * @param body &lt;em&gt;properties:&lt;/em&gt; a JSONArray of field-value pairs  &lt;em&gt;attachments:&lt;/em&gt; a JSONArray of Attachment objects (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call submitDefectCall(Long projectId, DefectResource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/defects"
            .replaceAll("\\{" + "projectId" + "\\}", qtestApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call submitDefectValidateBeforeCall(Long projectId, DefectResource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new QtestApiException("Missing the required parameter 'projectId' when calling submitDefect(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new QtestApiException("Missing the required parameter 'body' when calling submitDefect(Async)");
        }
        

        com.squareup.okhttp.Call call = submitDefectCall(projectId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Submit a Defect
     * To submit an internal Defect
     * @param projectId ID of the project (required)
     * @param body &lt;em&gt;properties:&lt;/em&gt; a JSONArray of field-value pairs  &lt;em&gt;attachments:&lt;/em&gt; a JSONArray of Attachment objects (required)
     * @return DefectResource
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DefectResource submitDefect(Long projectId, DefectResource body) throws QtestApiException {
        ApiResponse<DefectResource> resp = submitDefectWithHttpInfo(projectId, body);
        return resp.getData();
    }

    /**
     * Submit a Defect
     * To submit an internal Defect
     * @param projectId ID of the project (required)
     * @param body &lt;em&gt;properties:&lt;/em&gt; a JSONArray of field-value pairs  &lt;em&gt;attachments:&lt;/em&gt; a JSONArray of Attachment objects (required)
     * @return ApiResponse&lt;DefectResource&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DefectResource> submitDefectWithHttpInfo(Long projectId, DefectResource body) throws QtestApiException {
        com.squareup.okhttp.Call call = submitDefectValidateBeforeCall(projectId, body, null, null);
        Type localVarReturnType = new TypeToken<DefectResource>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Submit a Defect (asynchronously)
     * To submit an internal Defect
     * @param projectId ID of the project (required)
     * @param body &lt;em&gt;properties:&lt;/em&gt; a JSONArray of field-value pairs  &lt;em&gt;attachments:&lt;/em&gt; a JSONArray of Attachment objects (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call submitDefectAsync(Long projectId, DefectResource body, final ApiCallback<DefectResource> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = submitDefectValidateBeforeCall(projectId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DefectResource>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateComment
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the defect whose comment you want to update (required)
     * @param commentId ID of the comment (required)
     * @param body Given resource to update a comment. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCommentCall(Long projectId, String idOrKey, Long commentId, CommentResource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/defects/{idOrKey}/comments/{commentId}"
            .replaceAll("\\{" + "projectId" + "\\}", qtestApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "idOrKey" + "\\}", qtestApiClient.escapeString(idOrKey.toString()))
            .replaceAll("\\{" + "commentId" + "\\}", qtestApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCommentValidateBeforeCall(Long projectId, String idOrKey, Long commentId, CommentResource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new QtestApiException("Missing the required parameter 'projectId' when calling updateComment(Async)");
        }
        
        // verify the required parameter 'idOrKey' is set
        if (idOrKey == null) {
            throw new QtestApiException("Missing the required parameter 'idOrKey' when calling updateComment(Async)");
        }
        
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new QtestApiException("Missing the required parameter 'commentId' when calling updateComment(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new QtestApiException("Missing the required parameter 'body' when calling updateComment(Async)");
        }
        

        com.squareup.okhttp.Call call = updateCommentCall(projectId, idOrKey, commentId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates a Comment of a Defect
     * To update a specific Comment of a Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the defect whose comment you want to update (required)
     * @param commentId ID of the comment (required)
     * @param body Given resource to update a comment. (required)
     * @return CommentResource
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CommentResource updateComment(Long projectId, String idOrKey, Long commentId, CommentResource body) throws QtestApiException {
        ApiResponse<CommentResource> resp = updateCommentWithHttpInfo(projectId, idOrKey, commentId, body);
        return resp.getData();
    }

    /**
     * Updates a Comment of a Defect
     * To update a specific Comment of a Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the defect whose comment you want to update (required)
     * @param commentId ID of the comment (required)
     * @param body Given resource to update a comment. (required)
     * @return ApiResponse&lt;CommentResource&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CommentResource> updateCommentWithHttpInfo(Long projectId, String idOrKey, Long commentId, CommentResource body) throws QtestApiException {
        com.squareup.okhttp.Call call = updateCommentValidateBeforeCall(projectId, idOrKey, commentId, body, null, null);
        Type localVarReturnType = new TypeToken<CommentResource>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a Comment of a Defect (asynchronously)
     * To update a specific Comment of a Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the defect whose comment you want to update (required)
     * @param commentId ID of the comment (required)
     * @param body Given resource to update a comment. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCommentAsync(Long projectId, String idOrKey, Long commentId, CommentResource body, final ApiCallback<CommentResource> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCommentValidateBeforeCall(projectId, idOrKey, commentId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CommentResource>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDefect
     * @param projectId ID of the project (required)
     * @param defectId ID of the Defect which needs to be updated. (required)
     * @param body The Defect&#39;s updated properties (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDefectCall(Long projectId, Long defectId, DefectResource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/defects/{defectId}"
            .replaceAll("\\{" + "projectId" + "\\}", qtestApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "defectId" + "\\}", qtestApiClient.escapeString(defectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDefectValidateBeforeCall(Long projectId, Long defectId, DefectResource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new QtestApiException("Missing the required parameter 'projectId' when calling updateDefect(Async)");
        }
        
        // verify the required parameter 'defectId' is set
        if (defectId == null) {
            throw new QtestApiException("Missing the required parameter 'defectId' when calling updateDefect(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new QtestApiException("Missing the required parameter 'body' when calling updateDefect(Async)");
        }
        

        com.squareup.okhttp.Call call = updateDefectCall(projectId, defectId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates a Defect
     * To update a Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param defectId ID of the Defect which needs to be updated. (required)
     * @param body The Defect&#39;s updated properties (required)
     * @return DefectResource
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DefectResource updateDefect(Long projectId, Long defectId, DefectResource body) throws QtestApiException {
        ApiResponse<DefectResource> resp = updateDefectWithHttpInfo(projectId, defectId, body);
        return resp.getData();
    }

    /**
     * Updates a Defect
     * To update a Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param defectId ID of the Defect which needs to be updated. (required)
     * @param body The Defect&#39;s updated properties (required)
     * @return ApiResponse&lt;DefectResource&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DefectResource> updateDefectWithHttpInfo(Long projectId, Long defectId, DefectResource body) throws QtestApiException {
        com.squareup.okhttp.Call call = updateDefectValidateBeforeCall(projectId, defectId, body, null, null);
        Type localVarReturnType = new TypeToken<DefectResource>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a Defect (asynchronously)
     * To update a Defect  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param defectId ID of the Defect which needs to be updated. (required)
     * @param body The Defect&#39;s updated properties (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDefectAsync(Long projectId, Long defectId, DefectResource body, final ApiCallback<DefectResource> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDefectValidateBeforeCall(projectId, defectId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DefectResource>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
