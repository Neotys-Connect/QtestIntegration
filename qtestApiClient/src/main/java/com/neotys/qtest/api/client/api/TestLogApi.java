/*
 * qTest Manager API Version 8.6 - 10.2
 * qTest Manager API Version 8.6 - 10.2
 *
 * OpenAPI spec version: 8.6 - 10.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.neotys.qtest.api.client.api;

import com.neotys.qtest.api.client.*;
import com.neotys.qtest.api.client.model.AutomationRequest;
import com.neotys.qtest.api.client.QtestApiClient;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.neotys.qtest.api.client.model.AutomationTestLog;
import com.neotys.qtest.api.client.model.AutomationTestLogResource;
import com.neotys.qtest.api.client.model.ManualTestLogResource;
import com.neotys.qtest.api.client.model.QueueProcessingResponse;
import com.neotys.qtest.api.client.model.TestLogListResource;
import com.neotys.qtest.api.client.model.TestLogResource;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TestLogApi {
    private QtestApiClient qtestApiClient;

    public TestLogApi() {
        this(Configuration.getDefaultQtestApiClient());
    }

    public TestLogApi(QtestApiClient qtestApiClient) {
        this.qtestApiClient = qtestApiClient;
    }

    public QtestApiClient getQtestApiClient() {
        return qtestApiClient;
    }

    public void setQtestApiClient(QtestApiClient qtestApiClient) {
        this.qtestApiClient = qtestApiClient;
    }

    /**
     * Build call for getLastRunLog
     * @param projectId ID of the project (required)
     * @param testRunId ID of the Test Run (required)
     * @param expand Valid values include:   i)&lt;em&gt;testcase&lt;/em&gt; - to expand the associated Test Case and its Test Steps in the response;   ii) &lt;em&gt;teststeplog.teststep&lt;/em&gt; - to expand results of each Test Steps in the response (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLastRunLogCall(Long projectId, Long testRunId, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-runs/{testRunId}/test-logs/last-run"
            .replaceAll("\\{" + "projectId" + "\\}", qtestApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "testRunId" + "\\}", qtestApiClient.escapeString(testRunId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLastRunLogValidateBeforeCall(Long projectId, Long testRunId, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new QtestApiException("Missing the required parameter 'projectId' when calling getLastRunLog(Async)");
        }
        
        // verify the required parameter 'testRunId' is set
        if (testRunId == null) {
            throw new QtestApiException("Missing the required parameter 'testRunId' when calling getLastRunLog(Async)");
        }
        

        com.squareup.okhttp.Call call = getLastRunLogCall(projectId, testRunId, expand, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets the latest Test Log of a Test Run
     * To retrieve a Test Run&#39;s latest test result  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     * @param projectId ID of the project (required)
     * @param testRunId ID of the Test Run (required)
     * @param expand Valid values include:   i)&lt;em&gt;testcase&lt;/em&gt; - to expand the associated Test Case and its Test Steps in the response;   ii) &lt;em&gt;teststeplog.teststep&lt;/em&gt; - to expand results of each Test Steps in the response (optional)
     * @return TestLogResource
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TestLogResource getLastRunLog(Long projectId, Long testRunId, String expand) throws QtestApiException {
        ApiResponse<TestLogResource> resp = getLastRunLogWithHttpInfo(projectId, testRunId, expand);
        return resp.getData();
    }

    /**
     * Gets the latest Test Log of a Test Run
     * To retrieve a Test Run&#39;s latest test result  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     * @param projectId ID of the project (required)
     * @param testRunId ID of the Test Run (required)
     * @param expand Valid values include:   i)&lt;em&gt;testcase&lt;/em&gt; - to expand the associated Test Case and its Test Steps in the response;   ii) &lt;em&gt;teststeplog.teststep&lt;/em&gt; - to expand results of each Test Steps in the response (optional)
     * @return ApiResponse&lt;TestLogResource&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TestLogResource> getLastRunLogWithHttpInfo(Long projectId, Long testRunId, String expand) throws QtestApiException {
        com.squareup.okhttp.Call call = getLastRunLogValidateBeforeCall(projectId, testRunId, expand, null, null);
        Type localVarReturnType = new TypeToken<TestLogResource>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the latest Test Log of a Test Run (asynchronously)
     * To retrieve a Test Run&#39;s latest test result  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     * @param projectId ID of the project (required)
     * @param testRunId ID of the Test Run (required)
     * @param expand Valid values include:   i)&lt;em&gt;testcase&lt;/em&gt; - to expand the associated Test Case and its Test Steps in the response;   ii) &lt;em&gt;teststeplog.teststep&lt;/em&gt; - to expand results of each Test Steps in the response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLastRunLogAsync(Long projectId, Long testRunId, String expand, final ApiCallback<TestLogResource> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLastRunLogValidateBeforeCall(projectId, testRunId, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TestLogResource>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestLog
     * @param projectId ID of the project (required)
     * @param id ID of the Test Log (required)
     * @param testRunId ID of the Test Run (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestLogCall(Long projectId, Long id, Long testRunId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-runs/{testRunId}/test-logs/{id}"
            .replaceAll("\\{" + "projectId" + "\\}", qtestApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "id" + "\\}", qtestApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "testRunId" + "\\}", qtestApiClient.escapeString(testRunId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestLogValidateBeforeCall(Long projectId, Long id, Long testRunId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new QtestApiException("Missing the required parameter 'projectId' when calling getTestLog(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new QtestApiException("Missing the required parameter 'id' when calling getTestLog(Async)");
        }
        
        // verify the required parameter 'testRunId' is set
        if (testRunId == null) {
            throw new QtestApiException("Missing the required parameter 'testRunId' when calling getTestLog(Async)");
        }
        

        com.squareup.okhttp.Call call = getTestLogCall(projectId, id, testRunId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets a Test Log of a Test Run
     * To retrieve a specific Test Log of a Test Run
     * @param projectId ID of the project (required)
     * @param id ID of the Test Log (required)
     * @param testRunId ID of the Test Run (required)
     * @return TestLogResource
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TestLogResource getTestLog(Long projectId, Long id, Long testRunId) throws QtestApiException {
        ApiResponse<TestLogResource> resp = getTestLogWithHttpInfo(projectId, id, testRunId);
        return resp.getData();
    }

    /**
     * Gets a Test Log of a Test Run
     * To retrieve a specific Test Log of a Test Run
     * @param projectId ID of the project (required)
     * @param id ID of the Test Log (required)
     * @param testRunId ID of the Test Run (required)
     * @return ApiResponse&lt;TestLogResource&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TestLogResource> getTestLogWithHttpInfo(Long projectId, Long id, Long testRunId) throws QtestApiException {
        com.squareup.okhttp.Call call = getTestLogValidateBeforeCall(projectId, id, testRunId, null, null);
        Type localVarReturnType = new TypeToken<TestLogResource>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a Test Log of a Test Run (asynchronously)
     * To retrieve a specific Test Log of a Test Run
     * @param projectId ID of the project (required)
     * @param id ID of the Test Log (required)
     * @param testRunId ID of the Test Run (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestLogAsync(Long projectId, Long id, Long testRunId, final ApiCallback<TestLogResource> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestLogValidateBeforeCall(projectId, id, testRunId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TestLogResource>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestLogsList
     * @param projectId ID of the project (required)
     * @param testRunId ID of the Test Run (required)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestLogsListCall(Long projectId, Long testRunId, Long pageSize, Long page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-runs/{testRunId}/test-logs"
            .replaceAll("\\{" + "projectId" + "\\}", qtestApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "testRunId" + "\\}", qtestApiClient.escapeString(testRunId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("pageSize", pageSize));
        if (page != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("page", page));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestLogsListValidateBeforeCall(Long projectId, Long testRunId, Long pageSize, Long page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new QtestApiException("Missing the required parameter 'projectId' when calling getTestLogsList(Async)");
        }
        
        // verify the required parameter 'testRunId' is set
        if (testRunId == null) {
            throw new QtestApiException("Missing the required parameter 'testRunId' when calling getTestLogsList(Async)");
        }
        

        com.squareup.okhttp.Call call = getTestLogsListCall(projectId, testRunId, pageSize, page, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets all Test Logs of a Test Run
     * To retrieve all Test Logs of a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.6
     * @param projectId ID of the project (required)
     * @param testRunId ID of the Test Run (required)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @return TestLogListResource
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TestLogListResource getTestLogsList(Long projectId, Long testRunId, Long pageSize, Long page) throws QtestApiException {
        ApiResponse<TestLogListResource> resp = getTestLogsListWithHttpInfo(projectId, testRunId, pageSize, page);
        return resp.getData();
    }

    /**
     * Gets all Test Logs of a Test Run
     * To retrieve all Test Logs of a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.6
     * @param projectId ID of the project (required)
     * @param testRunId ID of the Test Run (required)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @return ApiResponse&lt;TestLogListResource&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TestLogListResource> getTestLogsListWithHttpInfo(Long projectId, Long testRunId, Long pageSize, Long page) throws QtestApiException {
        com.squareup.okhttp.Call call = getTestLogsListValidateBeforeCall(projectId, testRunId, pageSize, page, null, null);
        Type localVarReturnType = new TypeToken<TestLogListResource>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets all Test Logs of a Test Run (asynchronously)
     * To retrieve all Test Logs of a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.6
     * @param projectId ID of the project (required)
     * @param testRunId ID of the Test Run (required)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestLogsListAsync(Long projectId, Long testRunId, Long pageSize, Long page, final ApiCallback<TestLogListResource> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestLogsListValidateBeforeCall(projectId, testRunId, pageSize, page, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TestLogListResource>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for modifyAutomationLog
     * @param projectId ID of the project (required)
     * @param body &lt;em&gt;status (required):&lt;/em&gt; automation status values which are mapped in qTest Manager&#39;s Automation Settings  &lt;em&gt;exe_start_date (required):&lt;/em&gt; the execution&#39;s starting time  &lt;em&gt;exe_end_date (required):&lt;/em&gt; the execution&#39;s ending time  &lt;em&gt;note:&lt;/em&gt; execution note  &lt;em&gt;properties:&lt;/em&gt; array of fields and values of the Test Log that need to be updated  &lt;em&gt;test_step_logs:&lt;/em&gt; a JSONArray of TestStepLog objects  &lt;strong&gt;NOTE:&lt;/strong&gt; &lt;ul&gt;&lt;li&gt;You can only modify test logs which were submitted by you. The project admin can modify any test logs within his project&lt;/li&gt;&lt;li&gt;Test Step order is required in the test_step_logs array. You cannot specify a different order from the original submitted test log&lt;/li&gt;&lt;li&gt;You cannot modify Test Step Description and Expected Result&lt;/li&gt;&lt;li&gt;You cannot modify the following fields: Test Case Version, Automation Content, CI Tools, Build Number and Build URL&lt;/li&gt;&lt;/ul&gt; (required)
     * @param testRunId ID of the Test Run (required)
     * @param id id (required)
     * @param encodeNote encodeNote (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call modifyAutomationLogCall(Long projectId, AutomationTestLog body, Long testRunId, Long id, Boolean encodeNote, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-runs/{testRunId}/auto-test-logs/{id}"
            .replaceAll("\\{" + "projectId" + "\\}", qtestApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "testRunId" + "\\}", qtestApiClient.escapeString(testRunId.toString()))
            .replaceAll("\\{" + "id" + "\\}", qtestApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (encodeNote != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("encodeNote", encodeNote));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call modifyAutomationLogValidateBeforeCall(Long projectId, AutomationTestLog body, Long testRunId, Long id, Boolean encodeNote, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new QtestApiException("Missing the required parameter 'projectId' when calling modifyAutomationLog(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new QtestApiException("Missing the required parameter 'body' when calling modifyAutomationLog(Async)");
        }
        
        // verify the required parameter 'testRunId' is set
        if (testRunId == null) {
            throw new QtestApiException("Missing the required parameter 'testRunId' when calling modifyAutomationLog(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new QtestApiException("Missing the required parameter 'id' when calling modifyAutomationLog(Async)");
        }
        

        com.squareup.okhttp.Call call = modifyAutomationLogCall(projectId, body, testRunId, id, encodeNote, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Modify an Automation Test Log
     * To modify test result of a &lt;em&gt;automation&lt;/em&gt; Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.1.5+
     * @param projectId ID of the project (required)
     * @param body &lt;em&gt;status (required):&lt;/em&gt; automation status values which are mapped in qTest Manager&#39;s Automation Settings  &lt;em&gt;exe_start_date (required):&lt;/em&gt; the execution&#39;s starting time  &lt;em&gt;exe_end_date (required):&lt;/em&gt; the execution&#39;s ending time  &lt;em&gt;note:&lt;/em&gt; execution note  &lt;em&gt;properties:&lt;/em&gt; array of fields and values of the Test Log that need to be updated  &lt;em&gt;test_step_logs:&lt;/em&gt; a JSONArray of TestStepLog objects  &lt;strong&gt;NOTE:&lt;/strong&gt; &lt;ul&gt;&lt;li&gt;You can only modify test logs which were submitted by you. The project admin can modify any test logs within his project&lt;/li&gt;&lt;li&gt;Test Step order is required in the test_step_logs array. You cannot specify a different order from the original submitted test log&lt;/li&gt;&lt;li&gt;You cannot modify Test Step Description and Expected Result&lt;/li&gt;&lt;li&gt;You cannot modify the following fields: Test Case Version, Automation Content, CI Tools, Build Number and Build URL&lt;/li&gt;&lt;/ul&gt; (required)
     * @param testRunId ID of the Test Run (required)
     * @param id id (required)
     * @param encodeNote encodeNote (optional)
     * @return Object
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object modifyAutomationLog(Long projectId, AutomationTestLog body, Long testRunId, Long id, Boolean encodeNote) throws QtestApiException {
        ApiResponse<Object> resp = modifyAutomationLogWithHttpInfo(projectId, body, testRunId, id, encodeNote);
        return resp.getData();
    }

    /**
     * Modify an Automation Test Log
     * To modify test result of a &lt;em&gt;automation&lt;/em&gt; Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.1.5+
     * @param projectId ID of the project (required)
     * @param body &lt;em&gt;status (required):&lt;/em&gt; automation status values which are mapped in qTest Manager&#39;s Automation Settings  &lt;em&gt;exe_start_date (required):&lt;/em&gt; the execution&#39;s starting time  &lt;em&gt;exe_end_date (required):&lt;/em&gt; the execution&#39;s ending time  &lt;em&gt;note:&lt;/em&gt; execution note  &lt;em&gt;properties:&lt;/em&gt; array of fields and values of the Test Log that need to be updated  &lt;em&gt;test_step_logs:&lt;/em&gt; a JSONArray of TestStepLog objects  &lt;strong&gt;NOTE:&lt;/strong&gt; &lt;ul&gt;&lt;li&gt;You can only modify test logs which were submitted by you. The project admin can modify any test logs within his project&lt;/li&gt;&lt;li&gt;Test Step order is required in the test_step_logs array. You cannot specify a different order from the original submitted test log&lt;/li&gt;&lt;li&gt;You cannot modify Test Step Description and Expected Result&lt;/li&gt;&lt;li&gt;You cannot modify the following fields: Test Case Version, Automation Content, CI Tools, Build Number and Build URL&lt;/li&gt;&lt;/ul&gt; (required)
     * @param testRunId ID of the Test Run (required)
     * @param id id (required)
     * @param encodeNote encodeNote (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> modifyAutomationLogWithHttpInfo(Long projectId, AutomationTestLog body, Long testRunId, Long id, Boolean encodeNote) throws QtestApiException {
        com.squareup.okhttp.Call call = modifyAutomationLogValidateBeforeCall(projectId, body, testRunId, id, encodeNote, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Modify an Automation Test Log (asynchronously)
     * To modify test result of a &lt;em&gt;automation&lt;/em&gt; Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.1.5+
     * @param projectId ID of the project (required)
     * @param body &lt;em&gt;status (required):&lt;/em&gt; automation status values which are mapped in qTest Manager&#39;s Automation Settings  &lt;em&gt;exe_start_date (required):&lt;/em&gt; the execution&#39;s starting time  &lt;em&gt;exe_end_date (required):&lt;/em&gt; the execution&#39;s ending time  &lt;em&gt;note:&lt;/em&gt; execution note  &lt;em&gt;properties:&lt;/em&gt; array of fields and values of the Test Log that need to be updated  &lt;em&gt;test_step_logs:&lt;/em&gt; a JSONArray of TestStepLog objects  &lt;strong&gt;NOTE:&lt;/strong&gt; &lt;ul&gt;&lt;li&gt;You can only modify test logs which were submitted by you. The project admin can modify any test logs within his project&lt;/li&gt;&lt;li&gt;Test Step order is required in the test_step_logs array. You cannot specify a different order from the original submitted test log&lt;/li&gt;&lt;li&gt;You cannot modify Test Step Description and Expected Result&lt;/li&gt;&lt;li&gt;You cannot modify the following fields: Test Case Version, Automation Content, CI Tools, Build Number and Build URL&lt;/li&gt;&lt;/ul&gt; (required)
     * @param testRunId ID of the Test Run (required)
     * @param id id (required)
     * @param encodeNote encodeNote (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call modifyAutomationLogAsync(Long projectId, AutomationTestLog body, Long testRunId, Long id, Boolean encodeNote, final ApiCallback<Object> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = modifyAutomationLogValidateBeforeCall(projectId, body, testRunId, id, encodeNote, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for modifyTestLog
     * @param projectId ID of the project (required)
     * @param body &lt;em&gt;status (required):&lt;/em&gt; Status of the Test Log as defined in the projectâs Field Settings  &lt;em&gt;exe_start_date (required):&lt;/em&gt; the execution&#39;s starting time  &lt;em&gt;exe_end_date (required):&lt;/em&gt; the execution&#39;s ending time  &lt;em&gt;note:&lt;/em&gt; execution note  &lt;em&gt;properties:&lt;/em&gt; array of fields and values of the Test Log that need to be updated  &lt;em&gt;test_step_logs:&lt;/em&gt; a JSONArray of TestStepLog objects  &lt;strong&gt;NOTE:&lt;/strong&gt; &lt;ul&gt;&lt;li&gt;You can only modify test logs which were submitted by you. The project admin can modify any test logs within his project&lt;/li&gt;&lt;li&gt;Test Step order is required in the test_step_logs array. You cannot specify a different order from the original submitted test log&lt;/li&gt;&lt;li&gt;You cannot modify Test Step Description and Expected Result&lt;/li&gt;&lt;li&gt;You cannot modify the following fields: Test Case Version, CI Tools, Build Number and Build URL&lt;/li&gt;&lt;/ul&gt; (required)
     * @param testRunId ID of the Test Run (required)
     * @param id id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call modifyTestLogCall(Long projectId, TestLogResource body, Long testRunId, Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-runs/{testRunId}/test-logs/{id}"
            .replaceAll("\\{" + "projectId" + "\\}", qtestApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "testRunId" + "\\}", qtestApiClient.escapeString(testRunId.toString()))
            .replaceAll("\\{" + "id" + "\\}", qtestApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call modifyTestLogValidateBeforeCall(Long projectId, TestLogResource body, Long testRunId, Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new QtestApiException("Missing the required parameter 'projectId' when calling modifyTestLog(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new QtestApiException("Missing the required parameter 'body' when calling modifyTestLog(Async)");
        }
        
        // verify the required parameter 'testRunId' is set
        if (testRunId == null) {
            throw new QtestApiException("Missing the required parameter 'testRunId' when calling modifyTestLog(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new QtestApiException("Missing the required parameter 'id' when calling modifyTestLog(Async)");
        }
        

        com.squareup.okhttp.Call call = modifyTestLogCall(projectId, body, testRunId, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Modify a Manual Test Log
     * To modify test result of an &lt;em&gt;manual&lt;/em&gt; Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.1.5+
     * @param projectId ID of the project (required)
     * @param body &lt;em&gt;status (required):&lt;/em&gt; Status of the Test Log as defined in the projectâs Field Settings  &lt;em&gt;exe_start_date (required):&lt;/em&gt; the execution&#39;s starting time  &lt;em&gt;exe_end_date (required):&lt;/em&gt; the execution&#39;s ending time  &lt;em&gt;note:&lt;/em&gt; execution note  &lt;em&gt;properties:&lt;/em&gt; array of fields and values of the Test Log that need to be updated  &lt;em&gt;test_step_logs:&lt;/em&gt; a JSONArray of TestStepLog objects  &lt;strong&gt;NOTE:&lt;/strong&gt; &lt;ul&gt;&lt;li&gt;You can only modify test logs which were submitted by you. The project admin can modify any test logs within his project&lt;/li&gt;&lt;li&gt;Test Step order is required in the test_step_logs array. You cannot specify a different order from the original submitted test log&lt;/li&gt;&lt;li&gt;You cannot modify Test Step Description and Expected Result&lt;/li&gt;&lt;li&gt;You cannot modify the following fields: Test Case Version, CI Tools, Build Number and Build URL&lt;/li&gt;&lt;/ul&gt; (required)
     * @param testRunId ID of the Test Run (required)
     * @param id id (required)
     * @return TestLogResource
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TestLogResource modifyTestLog(Long projectId, TestLogResource body, Long testRunId, Long id) throws QtestApiException {
        ApiResponse<TestLogResource> resp = modifyTestLogWithHttpInfo(projectId, body, testRunId, id);
        return resp.getData();
    }

    /**
     * Modify a Manual Test Log
     * To modify test result of an &lt;em&gt;manual&lt;/em&gt; Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.1.5+
     * @param projectId ID of the project (required)
     * @param body &lt;em&gt;status (required):&lt;/em&gt; Status of the Test Log as defined in the projectâs Field Settings  &lt;em&gt;exe_start_date (required):&lt;/em&gt; the execution&#39;s starting time  &lt;em&gt;exe_end_date (required):&lt;/em&gt; the execution&#39;s ending time  &lt;em&gt;note:&lt;/em&gt; execution note  &lt;em&gt;properties:&lt;/em&gt; array of fields and values of the Test Log that need to be updated  &lt;em&gt;test_step_logs:&lt;/em&gt; a JSONArray of TestStepLog objects  &lt;strong&gt;NOTE:&lt;/strong&gt; &lt;ul&gt;&lt;li&gt;You can only modify test logs which were submitted by you. The project admin can modify any test logs within his project&lt;/li&gt;&lt;li&gt;Test Step order is required in the test_step_logs array. You cannot specify a different order from the original submitted test log&lt;/li&gt;&lt;li&gt;You cannot modify Test Step Description and Expected Result&lt;/li&gt;&lt;li&gt;You cannot modify the following fields: Test Case Version, CI Tools, Build Number and Build URL&lt;/li&gt;&lt;/ul&gt; (required)
     * @param testRunId ID of the Test Run (required)
     * @param id id (required)
     * @return ApiResponse&lt;TestLogResource&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TestLogResource> modifyTestLogWithHttpInfo(Long projectId, TestLogResource body, Long testRunId, Long id) throws QtestApiException {
        com.squareup.okhttp.Call call = modifyTestLogValidateBeforeCall(projectId, body, testRunId, id, null, null);
        Type localVarReturnType = new TypeToken<TestLogResource>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Modify a Manual Test Log (asynchronously)
     * To modify test result of an &lt;em&gt;manual&lt;/em&gt; Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.1.5+
     * @param projectId ID of the project (required)
     * @param body &lt;em&gt;status (required):&lt;/em&gt; Status of the Test Log as defined in the projectâs Field Settings  &lt;em&gt;exe_start_date (required):&lt;/em&gt; the execution&#39;s starting time  &lt;em&gt;exe_end_date (required):&lt;/em&gt; the execution&#39;s ending time  &lt;em&gt;note:&lt;/em&gt; execution note  &lt;em&gt;properties:&lt;/em&gt; array of fields and values of the Test Log that need to be updated  &lt;em&gt;test_step_logs:&lt;/em&gt; a JSONArray of TestStepLog objects  &lt;strong&gt;NOTE:&lt;/strong&gt; &lt;ul&gt;&lt;li&gt;You can only modify test logs which were submitted by you. The project admin can modify any test logs within his project&lt;/li&gt;&lt;li&gt;Test Step order is required in the test_step_logs array. You cannot specify a different order from the original submitted test log&lt;/li&gt;&lt;li&gt;You cannot modify Test Step Description and Expected Result&lt;/li&gt;&lt;li&gt;You cannot modify the following fields: Test Case Version, CI Tools, Build Number and Build URL&lt;/li&gt;&lt;/ul&gt; (required)
     * @param testRunId ID of the Test Run (required)
     * @param id id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call modifyTestLogAsync(Long projectId, TestLogResource body, Long testRunId, Long id, final ApiCallback<TestLogResource> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = modifyTestLogValidateBeforeCall(projectId, body, testRunId, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TestLogResource>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for submitAutomationLog
     * @param projectId ID of the project (required)
     * @param body &lt;em&gt;status (required):&lt;/em&gt; automation status values which are mapped in qTest Manager&#39;s Automation Settings  &lt;em&gt;exe_start_date (required):&lt;/em&gt; the execution&#39;s starting time  &lt;em&gt;exe_end_date (required)&lt;/em&gt; the execution&#39;s ending time  &lt;em&gt;name (required)&lt;/em&gt; name of the Test Run or Test Case  &lt;em&gt;automation_content (required):&lt;/em&gt; a string that uniquely identifies an Automation Test Case  &lt;em&gt;attachments:&lt;/em&gt; a JSONArray of Attachment objects  &lt;em&gt;note:&lt;/em&gt; execution note  &lt;em&gt;test_case_version_id:&lt;/em&gt; ID of the associated Test Case&#39;s version  &lt;em&gt;test_step_logs:&lt;/em&gt; a JSONArray of TestStepLog objects  &lt;em&gt;tosca_guid&lt;/em&gt;: GUID of Tosca test case. Use for creating Tosca Test Case  &lt;em&gt;tosca_node_path&lt;/em&gt;: Node Path of Tosca test case. Use for creating Tosca Test Case  &lt;em&gt;tosca_guid&lt;/em&gt; and &lt;em&gt;tosca_node_path&lt;/em&gt; are optional but must be specified in pair (required)
     * @param testRunId ID of the Test Run  1/ If it is greater than 0 (zero), test result will be submitted to the specific Test Run  If it is 0 (zero), test result will be submitted to a new Test Run (required)
     * @param suitePerDay &lt;em&gt;suitePerDay&#x3D;true&lt;/em&gt; - the newly created Test Run will be located under a Test Suite named under the execution date specified in parameter &lt;em&gt;suiteDate&lt;/em&gt;, eg: &lt;em&gt;Automation 2014-12-09&lt;/em&gt;  &lt;em&gt;suitePerDay&#x3D;false&lt;/em&gt; - the newly created Test Run will be located under &lt;em&gt;Automation Test Suite&lt;/em&gt;  &lt;strong&gt;IMPORTANT:&lt;/strong&gt; In case you update an existing Test Run, its Test Suite remains unchanged (optional)
     * @param suiteDate It is required if &lt;em&gt;suitePerDay&lt;/em&gt; is true. Its format is &lt;em&gt;\&quot;yyyymmdd\&quot;&lt;/em&gt;.   The newly created Test Run will be located under a Test Suite named \&quot;Automation yyyy-mm-dd\&quot;, eg: Automation 2014-12-09 (optional)
     * @param encodeNote Specify if the Test Log&#39;s Notes are in HTML format  &lt;em&gt;encodeNote&#x3D;true&lt;/em&gt; - default value. Notes are not in HTML format  &lt;em&gt;encodeNote&#x3D;false:&lt;/em&gt; Notes are in HTML format (optional)
     * @param forceUpdateVersion  (optional)
     * @param agentId  (optional)
     * @param userId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call submitAutomationLogCall(Long projectId, AutomationTestLogResource body, Long testRunId, String suitePerDay, String suiteDate, Boolean encodeNote, Boolean forceUpdateVersion, String agentId, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-runs/{testRunId}/auto-test-logs"
            .replaceAll("\\{" + "projectId" + "\\}", qtestApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "testRunId" + "\\}", qtestApiClient.escapeString(testRunId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (suitePerDay != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("suitePerDay", suitePerDay));
        if (suiteDate != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("suiteDate", suiteDate));
        if (encodeNote != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("encodeNote", encodeNote));
        if (forceUpdateVersion != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("forceUpdateVersion", forceUpdateVersion));
        if (agentId != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("agentId", agentId));
        if (userId != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("userId", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call submitAutomationLogValidateBeforeCall(Long projectId, AutomationTestLogResource body, Long testRunId, String suitePerDay, String suiteDate, Boolean encodeNote, Boolean forceUpdateVersion, String agentId, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new QtestApiException("Missing the required parameter 'projectId' when calling submitAutomationLog(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new QtestApiException("Missing the required parameter 'body' when calling submitAutomationLog(Async)");
        }
        
        // verify the required parameter 'testRunId' is set
        if (testRunId == null) {
            throw new QtestApiException("Missing the required parameter 'testRunId' when calling submitAutomationLog(Async)");
        }
        

        com.squareup.okhttp.Call call = submitAutomationLogCall(projectId, body, testRunId, suitePerDay, suiteDate, encodeNote, forceUpdateVersion, agentId, userId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Submits an Automation Test Log
     * To submit test result of an Automation Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     * @param projectId ID of the project (required)
     * @param body &lt;em&gt;status (required):&lt;/em&gt; automation status values which are mapped in qTest Manager&#39;s Automation Settings  &lt;em&gt;exe_start_date (required):&lt;/em&gt; the execution&#39;s starting time  &lt;em&gt;exe_end_date (required)&lt;/em&gt; the execution&#39;s ending time  &lt;em&gt;name (required)&lt;/em&gt; name of the Test Run or Test Case  &lt;em&gt;automation_content (required):&lt;/em&gt; a string that uniquely identifies an Automation Test Case  &lt;em&gt;attachments:&lt;/em&gt; a JSONArray of Attachment objects  &lt;em&gt;note:&lt;/em&gt; execution note  &lt;em&gt;test_case_version_id:&lt;/em&gt; ID of the associated Test Case&#39;s version  &lt;em&gt;test_step_logs:&lt;/em&gt; a JSONArray of TestStepLog objects  &lt;em&gt;tosca_guid&lt;/em&gt;: GUID of Tosca test case. Use for creating Tosca Test Case  &lt;em&gt;tosca_node_path&lt;/em&gt;: Node Path of Tosca test case. Use for creating Tosca Test Case  &lt;em&gt;tosca_guid&lt;/em&gt; and &lt;em&gt;tosca_node_path&lt;/em&gt; are optional but must be specified in pair (required)
     * @param testRunId ID of the Test Run  1/ If it is greater than 0 (zero), test result will be submitted to the specific Test Run  If it is 0 (zero), test result will be submitted to a new Test Run (required)
     * @param suitePerDay &lt;em&gt;suitePerDay&#x3D;true&lt;/em&gt; - the newly created Test Run will be located under a Test Suite named under the execution date specified in parameter &lt;em&gt;suiteDate&lt;/em&gt;, eg: &lt;em&gt;Automation 2014-12-09&lt;/em&gt;  &lt;em&gt;suitePerDay&#x3D;false&lt;/em&gt; - the newly created Test Run will be located under &lt;em&gt;Automation Test Suite&lt;/em&gt;  &lt;strong&gt;IMPORTANT:&lt;/strong&gt; In case you update an existing Test Run, its Test Suite remains unchanged (optional)
     * @param suiteDate It is required if &lt;em&gt;suitePerDay&lt;/em&gt; is true. Its format is &lt;em&gt;\&quot;yyyymmdd\&quot;&lt;/em&gt;.   The newly created Test Run will be located under a Test Suite named \&quot;Automation yyyy-mm-dd\&quot;, eg: Automation 2014-12-09 (optional)
     * @param encodeNote Specify if the Test Log&#39;s Notes are in HTML format  &lt;em&gt;encodeNote&#x3D;true&lt;/em&gt; - default value. Notes are not in HTML format  &lt;em&gt;encodeNote&#x3D;false:&lt;/em&gt; Notes are in HTML format (optional)
     * @param forceUpdateVersion  (optional)
     * @param agentId  (optional)
     * @param userId  (optional)
     * @return AutomationTestLogResource
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AutomationTestLogResource submitAutomationLog(Long projectId, AutomationTestLogResource body, Long testRunId, String suitePerDay, String suiteDate, Boolean encodeNote, Boolean forceUpdateVersion, String agentId, String userId) throws QtestApiException {
        ApiResponse<AutomationTestLogResource> resp = submitAutomationLogWithHttpInfo(projectId, body, testRunId, suitePerDay, suiteDate, encodeNote, forceUpdateVersion, agentId, userId);
        return resp.getData();
    }

    /**
     * Submits an Automation Test Log
     * To submit test result of an Automation Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     * @param projectId ID of the project (required)
     * @param body &lt;em&gt;status (required):&lt;/em&gt; automation status values which are mapped in qTest Manager&#39;s Automation Settings  &lt;em&gt;exe_start_date (required):&lt;/em&gt; the execution&#39;s starting time  &lt;em&gt;exe_end_date (required)&lt;/em&gt; the execution&#39;s ending time  &lt;em&gt;name (required)&lt;/em&gt; name of the Test Run or Test Case  &lt;em&gt;automation_content (required):&lt;/em&gt; a string that uniquely identifies an Automation Test Case  &lt;em&gt;attachments:&lt;/em&gt; a JSONArray of Attachment objects  &lt;em&gt;note:&lt;/em&gt; execution note  &lt;em&gt;test_case_version_id:&lt;/em&gt; ID of the associated Test Case&#39;s version  &lt;em&gt;test_step_logs:&lt;/em&gt; a JSONArray of TestStepLog objects  &lt;em&gt;tosca_guid&lt;/em&gt;: GUID of Tosca test case. Use for creating Tosca Test Case  &lt;em&gt;tosca_node_path&lt;/em&gt;: Node Path of Tosca test case. Use for creating Tosca Test Case  &lt;em&gt;tosca_guid&lt;/em&gt; and &lt;em&gt;tosca_node_path&lt;/em&gt; are optional but must be specified in pair (required)
     * @param testRunId ID of the Test Run  1/ If it is greater than 0 (zero), test result will be submitted to the specific Test Run  If it is 0 (zero), test result will be submitted to a new Test Run (required)
     * @param suitePerDay &lt;em&gt;suitePerDay&#x3D;true&lt;/em&gt; - the newly created Test Run will be located under a Test Suite named under the execution date specified in parameter &lt;em&gt;suiteDate&lt;/em&gt;, eg: &lt;em&gt;Automation 2014-12-09&lt;/em&gt;  &lt;em&gt;suitePerDay&#x3D;false&lt;/em&gt; - the newly created Test Run will be located under &lt;em&gt;Automation Test Suite&lt;/em&gt;  &lt;strong&gt;IMPORTANT:&lt;/strong&gt; In case you update an existing Test Run, its Test Suite remains unchanged (optional)
     * @param suiteDate It is required if &lt;em&gt;suitePerDay&lt;/em&gt; is true. Its format is &lt;em&gt;\&quot;yyyymmdd\&quot;&lt;/em&gt;.   The newly created Test Run will be located under a Test Suite named \&quot;Automation yyyy-mm-dd\&quot;, eg: Automation 2014-12-09 (optional)
     * @param encodeNote Specify if the Test Log&#39;s Notes are in HTML format  &lt;em&gt;encodeNote&#x3D;true&lt;/em&gt; - default value. Notes are not in HTML format  &lt;em&gt;encodeNote&#x3D;false:&lt;/em&gt; Notes are in HTML format (optional)
     * @param forceUpdateVersion  (optional)
     * @param agentId  (optional)
     * @param userId  (optional)
     * @return ApiResponse&lt;AutomationTestLogResource&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AutomationTestLogResource> submitAutomationLogWithHttpInfo(Long projectId, AutomationTestLogResource body, Long testRunId, String suitePerDay, String suiteDate, Boolean encodeNote, Boolean forceUpdateVersion, String agentId, String userId) throws QtestApiException {
        com.squareup.okhttp.Call call = submitAutomationLogValidateBeforeCall(projectId, body, testRunId, suitePerDay, suiteDate, encodeNote, forceUpdateVersion, agentId, userId, null, null);
        Type localVarReturnType = new TypeToken<AutomationTestLogResource>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Submits an Automation Test Log (asynchronously)
     * To submit test result of an Automation Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     * @param projectId ID of the project (required)
     * @param body &lt;em&gt;status (required):&lt;/em&gt; automation status values which are mapped in qTest Manager&#39;s Automation Settings  &lt;em&gt;exe_start_date (required):&lt;/em&gt; the execution&#39;s starting time  &lt;em&gt;exe_end_date (required)&lt;/em&gt; the execution&#39;s ending time  &lt;em&gt;name (required)&lt;/em&gt; name of the Test Run or Test Case  &lt;em&gt;automation_content (required):&lt;/em&gt; a string that uniquely identifies an Automation Test Case  &lt;em&gt;attachments:&lt;/em&gt; a JSONArray of Attachment objects  &lt;em&gt;note:&lt;/em&gt; execution note  &lt;em&gt;test_case_version_id:&lt;/em&gt; ID of the associated Test Case&#39;s version  &lt;em&gt;test_step_logs:&lt;/em&gt; a JSONArray of TestStepLog objects  &lt;em&gt;tosca_guid&lt;/em&gt;: GUID of Tosca test case. Use for creating Tosca Test Case  &lt;em&gt;tosca_node_path&lt;/em&gt;: Node Path of Tosca test case. Use for creating Tosca Test Case  &lt;em&gt;tosca_guid&lt;/em&gt; and &lt;em&gt;tosca_node_path&lt;/em&gt; are optional but must be specified in pair (required)
     * @param testRunId ID of the Test Run  1/ If it is greater than 0 (zero), test result will be submitted to the specific Test Run  If it is 0 (zero), test result will be submitted to a new Test Run (required)
     * @param suitePerDay &lt;em&gt;suitePerDay&#x3D;true&lt;/em&gt; - the newly created Test Run will be located under a Test Suite named under the execution date specified in parameter &lt;em&gt;suiteDate&lt;/em&gt;, eg: &lt;em&gt;Automation 2014-12-09&lt;/em&gt;  &lt;em&gt;suitePerDay&#x3D;false&lt;/em&gt; - the newly created Test Run will be located under &lt;em&gt;Automation Test Suite&lt;/em&gt;  &lt;strong&gt;IMPORTANT:&lt;/strong&gt; In case you update an existing Test Run, its Test Suite remains unchanged (optional)
     * @param suiteDate It is required if &lt;em&gt;suitePerDay&lt;/em&gt; is true. Its format is &lt;em&gt;\&quot;yyyymmdd\&quot;&lt;/em&gt;.   The newly created Test Run will be located under a Test Suite named \&quot;Automation yyyy-mm-dd\&quot;, eg: Automation 2014-12-09 (optional)
     * @param encodeNote Specify if the Test Log&#39;s Notes are in HTML format  &lt;em&gt;encodeNote&#x3D;true&lt;/em&gt; - default value. Notes are not in HTML format  &lt;em&gt;encodeNote&#x3D;false:&lt;/em&gt; Notes are in HTML format (optional)
     * @param forceUpdateVersion  (optional)
     * @param agentId  (optional)
     * @param userId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call submitAutomationLogAsync(Long projectId, AutomationTestLogResource body, Long testRunId, String suitePerDay, String suiteDate, Boolean encodeNote, Boolean forceUpdateVersion, String agentId, String userId, final ApiCallback<AutomationTestLogResource> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = submitAutomationLogValidateBeforeCall(projectId, body, testRunId, suitePerDay, suiteDate, encodeNote, forceUpdateVersion, agentId, userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AutomationTestLogResource>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for submitAutomationTestLogs
     * @param projectId ID of the project (required)
     * @param body &lt;em&gt;test_suite:&lt;/em&gt; ID of the Test Suite where the submitted Test Runs will be located  &lt;em&gt;parent_module:&lt;/em&gt; In case there has been no Test Case associated with the submitted Test Run, a new automation Test Case will be created. The new Test Cases are located under a module named &lt;em&gt;Automation&lt;/em&gt;. If you specify an ID for parent_module, the &lt;em&gt;Automation&lt;/em&gt; module will be located under the specified module. Otherwise, the &lt;em&gt;Automation&lt;/em&gt; module is located directly under root  &lt;em&gt;execution_date (required):&lt;/em&gt; Execution date in &lt;em&gt;YYYY-mm-dd&lt;/em&gt; format  &lt;em&gt;test_logs (required):&lt;/em&gt; The array of TestLog objects. The below are TestLog attributes  &lt;em&gt;status (required):&lt;/em&gt; The automation result values that were mapped with Test Run Result in qTest automation settings  &lt;em&gt;exe_start_date (required):&lt;/em&gt; Execution start time  &lt;em&gt;exe_end_date (required):&lt;/em&gt; Execution end time  &lt;em&gt;name (required):&lt;/em&gt; Test Run name  &lt;em&gt;automation_content (required):&lt;/em&gt; An XML formatted string that contains the class test/ group test/ package test  &lt;em&gt;attachments:&lt;/em&gt; An array of the Attachment objects  &lt;em&gt;note:&lt;/em&gt; Test Log note  &lt;em&gt;test_step_logs:&lt;/em&gt; An of TestStepLog objects. You can specify Test Steps&#39; order in the requrest. It must be continous series of numbers, starting from zero, or it will throw an error. The order will be used when the Test Case is created or updated in qTest. If the order is omitted, Test Steps will be alphabetically sorted when creating or updating Test Case  &lt;em&gt;tosca_guid&lt;/em&gt;: GUID of Tosca test case. Use for creating Tosca Test Case  &lt;em&gt;tosca_node_path&lt;/em&gt;: Node Path of Tosca test case. Use for creating Tosca Test Case  &lt;em&gt;tosca_guid&lt;/em&gt; and &lt;em&gt;tosca_node_path&lt;/em&gt; are optional but must be specified in pair (required)
     * @param type Always input &lt;em&gt;automation&lt;/em&gt; for this parameter (required)
     * @param testRunId This should always be &lt;strong&gt;0 (zero)&lt;/strong&gt; or else it will throw an exception (required)
     * @param escapeXml &lt;em&gt;escapeXml&#x3D;true&lt;/em&gt; - default value. &amp;gt and &amp;lt in &lt;em&gt;Automation Content&lt;/em&gt; field are encoded  &lt;em&gt;escapeXml&#x3D;false&lt;/em&gt; - the Automation Content field is not encoded (optional, default to false)
     * @param userId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call submitAutomationTestLogsCall(Long projectId, AutomationRequest body, String type, Long testRunId, Boolean escapeXml, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v3.1/projects/{projectId}/test-runs/{testRunId}/auto-test-logs"
            .replaceAll("\\{" + "projectId" + "\\}", qtestApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "testRunId" + "\\}", qtestApiClient.escapeString(testRunId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("type", type));
        if (escapeXml != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("escapeXml", escapeXml));
        if (userId != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("userId", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call submitAutomationTestLogsValidateBeforeCall(Long projectId, AutomationRequest body, String type, Long testRunId, Boolean escapeXml, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new QtestApiException("Missing the required parameter 'projectId' when calling submitAutomationTestLogs(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new QtestApiException("Missing the required parameter 'body' when calling submitAutomationTestLogs(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new QtestApiException("Missing the required parameter 'type' when calling submitAutomationTestLogs(Async)");
        }
        
        // verify the required parameter 'testRunId' is set
        if (testRunId == null) {
            throw new QtestApiException("Missing the required parameter 'testRunId' when calling submitAutomationTestLogs(Async)");
        }
        

        com.squareup.okhttp.Call call = submitAutomationTestLogsCall(projectId, body, type, testRunId, escapeXml, userId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Submits multiple test results
     * To submit Automation Test Logs of multiple Test Runs  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 8.0.2+
     * @param projectId ID of the project (required)
     * @param body &lt;em&gt;test_suite:&lt;/em&gt; ID of the Test Suite where the submitted Test Runs will be located  &lt;em&gt;parent_module:&lt;/em&gt; In case there has been no Test Case associated with the submitted Test Run, a new automation Test Case will be created. The new Test Cases are located under a module named &lt;em&gt;Automation&lt;/em&gt;. If you specify an ID for parent_module, the &lt;em&gt;Automation&lt;/em&gt; module will be located under the specified module. Otherwise, the &lt;em&gt;Automation&lt;/em&gt; module is located directly under root  &lt;em&gt;execution_date (required):&lt;/em&gt; Execution date in &lt;em&gt;YYYY-mm-dd&lt;/em&gt; format  &lt;em&gt;test_logs (required):&lt;/em&gt; The array of TestLog objects. The below are TestLog attributes  &lt;em&gt;status (required):&lt;/em&gt; The automation result values that were mapped with Test Run Result in qTest automation settings  &lt;em&gt;exe_start_date (required):&lt;/em&gt; Execution start time  &lt;em&gt;exe_end_date (required):&lt;/em&gt; Execution end time  &lt;em&gt;name (required):&lt;/em&gt; Test Run name  &lt;em&gt;automation_content (required):&lt;/em&gt; An XML formatted string that contains the class test/ group test/ package test  &lt;em&gt;attachments:&lt;/em&gt; An array of the Attachment objects  &lt;em&gt;note:&lt;/em&gt; Test Log note  &lt;em&gt;test_step_logs:&lt;/em&gt; An of TestStepLog objects. You can specify Test Steps&#39; order in the requrest. It must be continous series of numbers, starting from zero, or it will throw an error. The order will be used when the Test Case is created or updated in qTest. If the order is omitted, Test Steps will be alphabetically sorted when creating or updating Test Case  &lt;em&gt;tosca_guid&lt;/em&gt;: GUID of Tosca test case. Use for creating Tosca Test Case  &lt;em&gt;tosca_node_path&lt;/em&gt;: Node Path of Tosca test case. Use for creating Tosca Test Case  &lt;em&gt;tosca_guid&lt;/em&gt; and &lt;em&gt;tosca_node_path&lt;/em&gt; are optional but must be specified in pair (required)
     * @param type Always input &lt;em&gt;automation&lt;/em&gt; for this parameter (required)
     * @param testRunId This should always be &lt;strong&gt;0 (zero)&lt;/strong&gt; or else it will throw an exception (required)
     * @param escapeXml &lt;em&gt;escapeXml&#x3D;true&lt;/em&gt; - default value. &amp;gt and &amp;lt in &lt;em&gt;Automation Content&lt;/em&gt; field are encoded  &lt;em&gt;escapeXml&#x3D;false&lt;/em&gt; - the Automation Content field is not encoded (optional, default to false)
     * @param userId  (optional)
     * @return QueueProcessingResponse
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QueueProcessingResponse submitAutomationTestLogs(Long projectId, AutomationRequest body, String type, Long testRunId, Boolean escapeXml, String userId) throws QtestApiException {
        ApiResponse<QueueProcessingResponse> resp = submitAutomationTestLogsWithHttpInfo(projectId, body, type, testRunId, escapeXml, userId);
        return resp.getData();
    }

    /**
     * Submits multiple test results
     * To submit Automation Test Logs of multiple Test Runs  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 8.0.2+
     * @param projectId ID of the project (required)
     * @param body &lt;em&gt;test_suite:&lt;/em&gt; ID of the Test Suite where the submitted Test Runs will be located  &lt;em&gt;parent_module:&lt;/em&gt; In case there has been no Test Case associated with the submitted Test Run, a new automation Test Case will be created. The new Test Cases are located under a module named &lt;em&gt;Automation&lt;/em&gt;. If you specify an ID for parent_module, the &lt;em&gt;Automation&lt;/em&gt; module will be located under the specified module. Otherwise, the &lt;em&gt;Automation&lt;/em&gt; module is located directly under root  &lt;em&gt;execution_date (required):&lt;/em&gt; Execution date in &lt;em&gt;YYYY-mm-dd&lt;/em&gt; format  &lt;em&gt;test_logs (required):&lt;/em&gt; The array of TestLog objects. The below are TestLog attributes  &lt;em&gt;status (required):&lt;/em&gt; The automation result values that were mapped with Test Run Result in qTest automation settings  &lt;em&gt;exe_start_date (required):&lt;/em&gt; Execution start time  &lt;em&gt;exe_end_date (required):&lt;/em&gt; Execution end time  &lt;em&gt;name (required):&lt;/em&gt; Test Run name  &lt;em&gt;automation_content (required):&lt;/em&gt; An XML formatted string that contains the class test/ group test/ package test  &lt;em&gt;attachments:&lt;/em&gt; An array of the Attachment objects  &lt;em&gt;note:&lt;/em&gt; Test Log note  &lt;em&gt;test_step_logs:&lt;/em&gt; An of TestStepLog objects. You can specify Test Steps&#39; order in the requrest. It must be continous series of numbers, starting from zero, or it will throw an error. The order will be used when the Test Case is created or updated in qTest. If the order is omitted, Test Steps will be alphabetically sorted when creating or updating Test Case  &lt;em&gt;tosca_guid&lt;/em&gt;: GUID of Tosca test case. Use for creating Tosca Test Case  &lt;em&gt;tosca_node_path&lt;/em&gt;: Node Path of Tosca test case. Use for creating Tosca Test Case  &lt;em&gt;tosca_guid&lt;/em&gt; and &lt;em&gt;tosca_node_path&lt;/em&gt; are optional but must be specified in pair (required)
     * @param type Always input &lt;em&gt;automation&lt;/em&gt; for this parameter (required)
     * @param testRunId This should always be &lt;strong&gt;0 (zero)&lt;/strong&gt; or else it will throw an exception (required)
     * @param escapeXml &lt;em&gt;escapeXml&#x3D;true&lt;/em&gt; - default value. &amp;gt and &amp;lt in &lt;em&gt;Automation Content&lt;/em&gt; field are encoded  &lt;em&gt;escapeXml&#x3D;false&lt;/em&gt; - the Automation Content field is not encoded (optional, default to false)
     * @param userId  (optional)
     * @return ApiResponse&lt;QueueProcessingResponse&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QueueProcessingResponse> submitAutomationTestLogsWithHttpInfo(Long projectId, AutomationRequest body, String type, Long testRunId, Boolean escapeXml, String userId) throws QtestApiException {
        com.squareup.okhttp.Call call = submitAutomationTestLogsValidateBeforeCall(projectId, body, type, testRunId, escapeXml, userId, null, null);
        Type localVarReturnType = new TypeToken<QueueProcessingResponse>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Submits multiple test results (asynchronously)
     * To submit Automation Test Logs of multiple Test Runs  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 8.0.2+
     * @param projectId ID of the project (required)
     * @param body &lt;em&gt;test_suite:&lt;/em&gt; ID of the Test Suite where the submitted Test Runs will be located  &lt;em&gt;parent_module:&lt;/em&gt; In case there has been no Test Case associated with the submitted Test Run, a new automation Test Case will be created. The new Test Cases are located under a module named &lt;em&gt;Automation&lt;/em&gt;. If you specify an ID for parent_module, the &lt;em&gt;Automation&lt;/em&gt; module will be located under the specified module. Otherwise, the &lt;em&gt;Automation&lt;/em&gt; module is located directly under root  &lt;em&gt;execution_date (required):&lt;/em&gt; Execution date in &lt;em&gt;YYYY-mm-dd&lt;/em&gt; format  &lt;em&gt;test_logs (required):&lt;/em&gt; The array of TestLog objects. The below are TestLog attributes  &lt;em&gt;status (required):&lt;/em&gt; The automation result values that were mapped with Test Run Result in qTest automation settings  &lt;em&gt;exe_start_date (required):&lt;/em&gt; Execution start time  &lt;em&gt;exe_end_date (required):&lt;/em&gt; Execution end time  &lt;em&gt;name (required):&lt;/em&gt; Test Run name  &lt;em&gt;automation_content (required):&lt;/em&gt; An XML formatted string that contains the class test/ group test/ package test  &lt;em&gt;attachments:&lt;/em&gt; An array of the Attachment objects  &lt;em&gt;note:&lt;/em&gt; Test Log note  &lt;em&gt;test_step_logs:&lt;/em&gt; An of TestStepLog objects. You can specify Test Steps&#39; order in the requrest. It must be continous series of numbers, starting from zero, or it will throw an error. The order will be used when the Test Case is created or updated in qTest. If the order is omitted, Test Steps will be alphabetically sorted when creating or updating Test Case  &lt;em&gt;tosca_guid&lt;/em&gt;: GUID of Tosca test case. Use for creating Tosca Test Case  &lt;em&gt;tosca_node_path&lt;/em&gt;: Node Path of Tosca test case. Use for creating Tosca Test Case  &lt;em&gt;tosca_guid&lt;/em&gt; and &lt;em&gt;tosca_node_path&lt;/em&gt; are optional but must be specified in pair (required)
     * @param type Always input &lt;em&gt;automation&lt;/em&gt; for this parameter (required)
     * @param testRunId This should always be &lt;strong&gt;0 (zero)&lt;/strong&gt; or else it will throw an exception (required)
     * @param escapeXml &lt;em&gt;escapeXml&#x3D;true&lt;/em&gt; - default value. &amp;gt and &amp;lt in &lt;em&gt;Automation Content&lt;/em&gt; field are encoded  &lt;em&gt;escapeXml&#x3D;false&lt;/em&gt; - the Automation Content field is not encoded (optional, default to false)
     * @param userId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call submitAutomationTestLogsAsync(Long projectId, AutomationRequest body, String type, Long testRunId, Boolean escapeXml, String userId, final ApiCallback<QueueProcessingResponse> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = submitAutomationTestLogsValidateBeforeCall(projectId, body, type, testRunId, escapeXml, userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QueueProcessingResponse>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for submitAutomationTestLogs_0
     * @param projectId ID of the project (required)
     * @param body &lt;em&gt;test_cycle (required):&lt;/em&gt; PID or ID of the parent Test Cycle in qTest Manager where submitted Test Runs will be located  &lt;em&gt;test_logs (required):&lt;/em&gt; The array of TestLog objects. The below are TestLog attributes  &lt;strong&gt;TestLog attributes:&lt;/strong&gt;  - &lt;em&gt;test_case_version_id:&lt;/em&gt; ID of the associated Test Case&#39;s version. In case the Test Run has not existed, this field should not be included or it will cause an error  - &lt;em&gt;status (required):&lt;/em&gt; The automation result values that were mapped with Test Run Result in qTest automation settings  - &lt;em&gt;exe_start_date (required):&lt;/em&gt; Execution start time  - &lt;em&gt;exe_end_date (required):&lt;/em&gt; Execution end time  - &lt;em&gt;module_names (required):&lt;/em&gt; an array of folder names which will be used when creating hierarchical structure in Test Design and Test Execution trees. In Test Design tree, the first folder will be created as a Module directly under the tree root. Other folders will be created as sub-Modules under their preceding folders in the array. In Test Execution tree, the first folder will be created as a Test Cycle directly under the parent Test Cycle which is specified in the API request. Other folders will be created as sub Test Cycles under their preceding folders in the array. If there is a folder in the tree with matching name and location, the API will not create a duplicate one  - &lt;em&gt;name (required):&lt;/em&gt; It will be used when &lt;em&gt;creating&lt;/em&gt; Test Cases and Test Runs as their names. It will not be used for updating Test Case and Test Run names  - &lt;em&gt;automation_content (required):&lt;/em&gt; Specify a unique string to each Test Case. It acts as Test Case fingerprint. Before adding a Test Log, qTest Manager will look up Automation Content of existing Test Cases. If it can find an existing Test Case, the Test Log will be associated with that Test Case. Otherwise, a new Test Case will be created with the submitted Test Log. It is also be used when creating Test Runs. If qTest Manager finds an existing Test Run with matching Automation Content and location in Test Execution tree, it will not create a duplicate one. If there is an existing Test Run with matching Automation Content but it is located in different Test Cycles, qTest Manager will create a new Test Run in the specified folder  - &lt;em&gt;attachments:&lt;/em&gt; an array of the Attachment objects  - &lt;em&gt;test_step_logs:&lt;/em&gt; an array of TestStepLog objects. You can specify Test Steps&#39; order in the request. It must be continous series of numbers, starting from zero, or it will throw an error. The order will be used when the Test Case is created or updated in qTest. If the order is omitted, Test Steps will be alphabetically sorted when creating or updating Test Case  - &lt;em&gt;tosca_guid&lt;/em&gt;: GUID of Tosca test case. Use for creating Tosca Test Case  - &lt;em&gt;tosca_node_path&lt;/em&gt;: Node Path of Tosca test case. Use for creating Tosca Test Case  - &lt;em&gt;tosca_guid&lt;/em&gt; and &lt;em&gt;tosca_node_path&lt;/em&gt; are optional but must be specified in pair  &lt;strong&gt;Test Step Log attributes&lt;/strong&gt;  - &lt;em&gt;description (required):&lt;/em&gt; Description of the Test Step  - &lt;em&gt;expected_result (required):&lt;/em&gt; Expected result of the Test Step  - &lt;em&gt;actual_result (required):&lt;/em&gt; Actual result of the Test Step  - &lt;em&gt;status (required):&lt;/em&gt; The automation result values that were mapped with Test Run Result in qTest automation settings  - &lt;em&gt;order:&lt;/em&gt; Specify the order of Test Steps. It must be continous series of numbers, starting from zero, or it will throw an error. The order will be used when the Test Case is created or updated in qTest. If the order is omitted, Test Steps will be alphabetically sorted when creating or updating Test Case (required)
     * @param type always use &lt;em&gt;type&#x3D;automation&lt;/em&gt; for this parameter (required)
     * @param escapeXml &lt;em&gt;escapeXml&#x3D;true&lt;/em&gt; - default value. &amp;gt and &amp;lt in &lt;em&gt;Automation Content&lt;/em&gt; field are encoded  &lt;em&gt;escapeXml&#x3D;false&lt;/em&gt; - the Automation Content field is not encoded (optional)
     * @param userId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call submitAutomationTestLogs_0Call(Long projectId, AutomationRequest body, String type, Boolean escapeXml, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/auto-test-logs"
            .replaceAll("\\{" + "projectId" + "\\}", qtestApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("type", type));
        if (escapeXml != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("escapeXml", escapeXml));
        if (userId != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("userId", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call submitAutomationTestLogs_0ValidateBeforeCall(Long projectId, AutomationRequest body, String type, Boolean escapeXml, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new QtestApiException("Missing the required parameter 'projectId' when calling submitAutomationTestLogs_0(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new QtestApiException("Missing the required parameter 'body' when calling submitAutomationTestLogs_0(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new QtestApiException("Missing the required parameter 'type' when calling submitAutomationTestLogs_0(Async)");
        }
        

        com.squareup.okhttp.Call call = submitAutomationTestLogs_0Call(projectId, body, type, escapeXml, userId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Submits multiple test results and specifies Test Design and Test Execution tree structures
     * This is the extended version of this API &lt;strong&gt;POST /api/v3.1/projects/{projectId}/test-runs/{testRunId}/auto-test-logs&lt;/strong&gt;. It allows submitting multiple test logs in one API request, and creating Test Cases and Test Runs in hierarchical structure which is specified in the request body  &lt;strong&gt;Important:&lt;/strong&gt; This API does not update names and locations of existing Test Cases and Test Runs
     * @param projectId ID of the project (required)
     * @param body &lt;em&gt;test_cycle (required):&lt;/em&gt; PID or ID of the parent Test Cycle in qTest Manager where submitted Test Runs will be located  &lt;em&gt;test_logs (required):&lt;/em&gt; The array of TestLog objects. The below are TestLog attributes  &lt;strong&gt;TestLog attributes:&lt;/strong&gt;  - &lt;em&gt;test_case_version_id:&lt;/em&gt; ID of the associated Test Case&#39;s version. In case the Test Run has not existed, this field should not be included or it will cause an error  - &lt;em&gt;status (required):&lt;/em&gt; The automation result values that were mapped with Test Run Result in qTest automation settings  - &lt;em&gt;exe_start_date (required):&lt;/em&gt; Execution start time  - &lt;em&gt;exe_end_date (required):&lt;/em&gt; Execution end time  - &lt;em&gt;module_names (required):&lt;/em&gt; an array of folder names which will be used when creating hierarchical structure in Test Design and Test Execution trees. In Test Design tree, the first folder will be created as a Module directly under the tree root. Other folders will be created as sub-Modules under their preceding folders in the array. In Test Execution tree, the first folder will be created as a Test Cycle directly under the parent Test Cycle which is specified in the API request. Other folders will be created as sub Test Cycles under their preceding folders in the array. If there is a folder in the tree with matching name and location, the API will not create a duplicate one  - &lt;em&gt;name (required):&lt;/em&gt; It will be used when &lt;em&gt;creating&lt;/em&gt; Test Cases and Test Runs as their names. It will not be used for updating Test Case and Test Run names  - &lt;em&gt;automation_content (required):&lt;/em&gt; Specify a unique string to each Test Case. It acts as Test Case fingerprint. Before adding a Test Log, qTest Manager will look up Automation Content of existing Test Cases. If it can find an existing Test Case, the Test Log will be associated with that Test Case. Otherwise, a new Test Case will be created with the submitted Test Log. It is also be used when creating Test Runs. If qTest Manager finds an existing Test Run with matching Automation Content and location in Test Execution tree, it will not create a duplicate one. If there is an existing Test Run with matching Automation Content but it is located in different Test Cycles, qTest Manager will create a new Test Run in the specified folder  - &lt;em&gt;attachments:&lt;/em&gt; an array of the Attachment objects  - &lt;em&gt;test_step_logs:&lt;/em&gt; an array of TestStepLog objects. You can specify Test Steps&#39; order in the request. It must be continous series of numbers, starting from zero, or it will throw an error. The order will be used when the Test Case is created or updated in qTest. If the order is omitted, Test Steps will be alphabetically sorted when creating or updating Test Case  - &lt;em&gt;tosca_guid&lt;/em&gt;: GUID of Tosca test case. Use for creating Tosca Test Case  - &lt;em&gt;tosca_node_path&lt;/em&gt;: Node Path of Tosca test case. Use for creating Tosca Test Case  - &lt;em&gt;tosca_guid&lt;/em&gt; and &lt;em&gt;tosca_node_path&lt;/em&gt; are optional but must be specified in pair  &lt;strong&gt;Test Step Log attributes&lt;/strong&gt;  - &lt;em&gt;description (required):&lt;/em&gt; Description of the Test Step  - &lt;em&gt;expected_result (required):&lt;/em&gt; Expected result of the Test Step  - &lt;em&gt;actual_result (required):&lt;/em&gt; Actual result of the Test Step  - &lt;em&gt;status (required):&lt;/em&gt; The automation result values that were mapped with Test Run Result in qTest automation settings  - &lt;em&gt;order:&lt;/em&gt; Specify the order of Test Steps. It must be continous series of numbers, starting from zero, or it will throw an error. The order will be used when the Test Case is created or updated in qTest. If the order is omitted, Test Steps will be alphabetically sorted when creating or updating Test Case (required)
     * @param type always use &lt;em&gt;type&#x3D;automation&lt;/em&gt; for this parameter (required)
     * @param escapeXml &lt;em&gt;escapeXml&#x3D;true&lt;/em&gt; - default value. &amp;gt and &amp;lt in &lt;em&gt;Automation Content&lt;/em&gt; field are encoded  &lt;em&gt;escapeXml&#x3D;false&lt;/em&gt; - the Automation Content field is not encoded (optional)
     * @param userId  (optional)
     * @return QueueProcessingResponse
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QueueProcessingResponse submitAutomationTestLogs_0(Long projectId, AutomationRequest body, String type, Boolean escapeXml, String userId) throws QtestApiException {
        ApiResponse<QueueProcessingResponse> resp = submitAutomationTestLogs_0WithHttpInfo(projectId, body, type, escapeXml, userId);
        return resp.getData();
    }

    /**
     * Submits multiple test results and specifies Test Design and Test Execution tree structures
     * This is the extended version of this API &lt;strong&gt;POST /api/v3.1/projects/{projectId}/test-runs/{testRunId}/auto-test-logs&lt;/strong&gt;. It allows submitting multiple test logs in one API request, and creating Test Cases and Test Runs in hierarchical structure which is specified in the request body  &lt;strong&gt;Important:&lt;/strong&gt; This API does not update names and locations of existing Test Cases and Test Runs
     * @param projectId ID of the project (required)
     * @param body &lt;em&gt;test_cycle (required):&lt;/em&gt; PID or ID of the parent Test Cycle in qTest Manager where submitted Test Runs will be located  &lt;em&gt;test_logs (required):&lt;/em&gt; The array of TestLog objects. The below are TestLog attributes  &lt;strong&gt;TestLog attributes:&lt;/strong&gt;  - &lt;em&gt;test_case_version_id:&lt;/em&gt; ID of the associated Test Case&#39;s version. In case the Test Run has not existed, this field should not be included or it will cause an error  - &lt;em&gt;status (required):&lt;/em&gt; The automation result values that were mapped with Test Run Result in qTest automation settings  - &lt;em&gt;exe_start_date (required):&lt;/em&gt; Execution start time  - &lt;em&gt;exe_end_date (required):&lt;/em&gt; Execution end time  - &lt;em&gt;module_names (required):&lt;/em&gt; an array of folder names which will be used when creating hierarchical structure in Test Design and Test Execution trees. In Test Design tree, the first folder will be created as a Module directly under the tree root. Other folders will be created as sub-Modules under their preceding folders in the array. In Test Execution tree, the first folder will be created as a Test Cycle directly under the parent Test Cycle which is specified in the API request. Other folders will be created as sub Test Cycles under their preceding folders in the array. If there is a folder in the tree with matching name and location, the API will not create a duplicate one  - &lt;em&gt;name (required):&lt;/em&gt; It will be used when &lt;em&gt;creating&lt;/em&gt; Test Cases and Test Runs as their names. It will not be used for updating Test Case and Test Run names  - &lt;em&gt;automation_content (required):&lt;/em&gt; Specify a unique string to each Test Case. It acts as Test Case fingerprint. Before adding a Test Log, qTest Manager will look up Automation Content of existing Test Cases. If it can find an existing Test Case, the Test Log will be associated with that Test Case. Otherwise, a new Test Case will be created with the submitted Test Log. It is also be used when creating Test Runs. If qTest Manager finds an existing Test Run with matching Automation Content and location in Test Execution tree, it will not create a duplicate one. If there is an existing Test Run with matching Automation Content but it is located in different Test Cycles, qTest Manager will create a new Test Run in the specified folder  - &lt;em&gt;attachments:&lt;/em&gt; an array of the Attachment objects  - &lt;em&gt;test_step_logs:&lt;/em&gt; an array of TestStepLog objects. You can specify Test Steps&#39; order in the request. It must be continous series of numbers, starting from zero, or it will throw an error. The order will be used when the Test Case is created or updated in qTest. If the order is omitted, Test Steps will be alphabetically sorted when creating or updating Test Case  - &lt;em&gt;tosca_guid&lt;/em&gt;: GUID of Tosca test case. Use for creating Tosca Test Case  - &lt;em&gt;tosca_node_path&lt;/em&gt;: Node Path of Tosca test case. Use for creating Tosca Test Case  - &lt;em&gt;tosca_guid&lt;/em&gt; and &lt;em&gt;tosca_node_path&lt;/em&gt; are optional but must be specified in pair  &lt;strong&gt;Test Step Log attributes&lt;/strong&gt;  - &lt;em&gt;description (required):&lt;/em&gt; Description of the Test Step  - &lt;em&gt;expected_result (required):&lt;/em&gt; Expected result of the Test Step  - &lt;em&gt;actual_result (required):&lt;/em&gt; Actual result of the Test Step  - &lt;em&gt;status (required):&lt;/em&gt; The automation result values that were mapped with Test Run Result in qTest automation settings  - &lt;em&gt;order:&lt;/em&gt; Specify the order of Test Steps. It must be continous series of numbers, starting from zero, or it will throw an error. The order will be used when the Test Case is created or updated in qTest. If the order is omitted, Test Steps will be alphabetically sorted when creating or updating Test Case (required)
     * @param type always use &lt;em&gt;type&#x3D;automation&lt;/em&gt; for this parameter (required)
     * @param escapeXml &lt;em&gt;escapeXml&#x3D;true&lt;/em&gt; - default value. &amp;gt and &amp;lt in &lt;em&gt;Automation Content&lt;/em&gt; field are encoded  &lt;em&gt;escapeXml&#x3D;false&lt;/em&gt; - the Automation Content field is not encoded (optional)
     * @param userId  (optional)
     * @return ApiResponse&lt;QueueProcessingResponse&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QueueProcessingResponse> submitAutomationTestLogs_0WithHttpInfo(Long projectId, AutomationRequest body, String type, Boolean escapeXml, String userId) throws QtestApiException {
        com.squareup.okhttp.Call call = submitAutomationTestLogs_0ValidateBeforeCall(projectId, body, type, escapeXml, userId, null, null);
        Type localVarReturnType = new TypeToken<QueueProcessingResponse>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Submits multiple test results and specifies Test Design and Test Execution tree structures (asynchronously)
     * This is the extended version of this API &lt;strong&gt;POST /api/v3.1/projects/{projectId}/test-runs/{testRunId}/auto-test-logs&lt;/strong&gt;. It allows submitting multiple test logs in one API request, and creating Test Cases and Test Runs in hierarchical structure which is specified in the request body  &lt;strong&gt;Important:&lt;/strong&gt; This API does not update names and locations of existing Test Cases and Test Runs
     * @param projectId ID of the project (required)
     * @param body &lt;em&gt;test_cycle (required):&lt;/em&gt; PID or ID of the parent Test Cycle in qTest Manager where submitted Test Runs will be located  &lt;em&gt;test_logs (required):&lt;/em&gt; The array of TestLog objects. The below are TestLog attributes  &lt;strong&gt;TestLog attributes:&lt;/strong&gt;  - &lt;em&gt;test_case_version_id:&lt;/em&gt; ID of the associated Test Case&#39;s version. In case the Test Run has not existed, this field should not be included or it will cause an error  - &lt;em&gt;status (required):&lt;/em&gt; The automation result values that were mapped with Test Run Result in qTest automation settings  - &lt;em&gt;exe_start_date (required):&lt;/em&gt; Execution start time  - &lt;em&gt;exe_end_date (required):&lt;/em&gt; Execution end time  - &lt;em&gt;module_names (required):&lt;/em&gt; an array of folder names which will be used when creating hierarchical structure in Test Design and Test Execution trees. In Test Design tree, the first folder will be created as a Module directly under the tree root. Other folders will be created as sub-Modules under their preceding folders in the array. In Test Execution tree, the first folder will be created as a Test Cycle directly under the parent Test Cycle which is specified in the API request. Other folders will be created as sub Test Cycles under their preceding folders in the array. If there is a folder in the tree with matching name and location, the API will not create a duplicate one  - &lt;em&gt;name (required):&lt;/em&gt; It will be used when &lt;em&gt;creating&lt;/em&gt; Test Cases and Test Runs as their names. It will not be used for updating Test Case and Test Run names  - &lt;em&gt;automation_content (required):&lt;/em&gt; Specify a unique string to each Test Case. It acts as Test Case fingerprint. Before adding a Test Log, qTest Manager will look up Automation Content of existing Test Cases. If it can find an existing Test Case, the Test Log will be associated with that Test Case. Otherwise, a new Test Case will be created with the submitted Test Log. It is also be used when creating Test Runs. If qTest Manager finds an existing Test Run with matching Automation Content and location in Test Execution tree, it will not create a duplicate one. If there is an existing Test Run with matching Automation Content but it is located in different Test Cycles, qTest Manager will create a new Test Run in the specified folder  - &lt;em&gt;attachments:&lt;/em&gt; an array of the Attachment objects  - &lt;em&gt;test_step_logs:&lt;/em&gt; an array of TestStepLog objects. You can specify Test Steps&#39; order in the request. It must be continous series of numbers, starting from zero, or it will throw an error. The order will be used when the Test Case is created or updated in qTest. If the order is omitted, Test Steps will be alphabetically sorted when creating or updating Test Case  - &lt;em&gt;tosca_guid&lt;/em&gt;: GUID of Tosca test case. Use for creating Tosca Test Case  - &lt;em&gt;tosca_node_path&lt;/em&gt;: Node Path of Tosca test case. Use for creating Tosca Test Case  - &lt;em&gt;tosca_guid&lt;/em&gt; and &lt;em&gt;tosca_node_path&lt;/em&gt; are optional but must be specified in pair  &lt;strong&gt;Test Step Log attributes&lt;/strong&gt;  - &lt;em&gt;description (required):&lt;/em&gt; Description of the Test Step  - &lt;em&gt;expected_result (required):&lt;/em&gt; Expected result of the Test Step  - &lt;em&gt;actual_result (required):&lt;/em&gt; Actual result of the Test Step  - &lt;em&gt;status (required):&lt;/em&gt; The automation result values that were mapped with Test Run Result in qTest automation settings  - &lt;em&gt;order:&lt;/em&gt; Specify the order of Test Steps. It must be continous series of numbers, starting from zero, or it will throw an error. The order will be used when the Test Case is created or updated in qTest. If the order is omitted, Test Steps will be alphabetically sorted when creating or updating Test Case (required)
     * @param type always use &lt;em&gt;type&#x3D;automation&lt;/em&gt; for this parameter (required)
     * @param escapeXml &lt;em&gt;escapeXml&#x3D;true&lt;/em&gt; - default value. &amp;gt and &amp;lt in &lt;em&gt;Automation Content&lt;/em&gt; field are encoded  &lt;em&gt;escapeXml&#x3D;false&lt;/em&gt; - the Automation Content field is not encoded (optional)
     * @param userId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call submitAutomationTestLogs_0Async(Long projectId, AutomationRequest body, String type, Boolean escapeXml, String userId, final ApiCallback<QueueProcessingResponse> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = submitAutomationTestLogs_0ValidateBeforeCall(projectId, body, type, escapeXml, userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QueueProcessingResponse>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for submitTestLog
     * @param projectId ID of the project (required)
     * @param body &lt;em&gt;status (required):&lt;/em&gt; Status of the Test Log as defined in the project&#39;s Field Settings  &lt;em&gt;test_case_version_id:&lt;/em&gt; ID of the associated Test Case&#39;s version.    If it is omitted, the submitted Test Log will be associated with the Test Case&#39;s latest approved version  &lt;em&gt;exe_start_date (required):&lt;/em&gt; time when the test is executed  &lt;em&gt;exe_end_date (required):&lt;/em&gt; time when the test is finished  &lt;em&gt;attachments:&lt;/em&gt; the Test Log&#39;s attachments  &lt;em&gt;test_step_logs:&lt;/em &gt; If the associated Test Case is calling Test Steps from another Test Case, the \&quot;called_test_case_id\&quot; and \&quot;parent_test_step_id\&quot; must be included in the request body (required)
     * @param testRunId ID of the Test Run (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call submitTestLogCall(Long projectId, ManualTestLogResource body, Long testRunId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-runs/{testRunId}/test-logs"
            .replaceAll("\\{" + "projectId" + "\\}", qtestApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "testRunId" + "\\}", qtestApiClient.escapeString(testRunId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call submitTestLogValidateBeforeCall(Long projectId, ManualTestLogResource body, Long testRunId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new QtestApiException("Missing the required parameter 'projectId' when calling submitTestLog(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new QtestApiException("Missing the required parameter 'body' when calling submitTestLog(Async)");
        }
        
        // verify the required parameter 'testRunId' is set
        if (testRunId == null) {
            throw new QtestApiException("Missing the required parameter 'testRunId' when calling submitTestLog(Async)");
        }
        

        com.squareup.okhttp.Call call = submitTestLogCall(projectId, body, testRunId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Submits a Manual Test Log
     * To submit test result of a &lt;em&gt;manual&lt;/em&gt; Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     * @param projectId ID of the project (required)
     * @param body &lt;em&gt;status (required):&lt;/em&gt; Status of the Test Log as defined in the project&#39;s Field Settings  &lt;em&gt;test_case_version_id:&lt;/em&gt; ID of the associated Test Case&#39;s version.    If it is omitted, the submitted Test Log will be associated with the Test Case&#39;s latest approved version  &lt;em&gt;exe_start_date (required):&lt;/em&gt; time when the test is executed  &lt;em&gt;exe_end_date (required):&lt;/em&gt; time when the test is finished  &lt;em&gt;attachments:&lt;/em&gt; the Test Log&#39;s attachments  &lt;em&gt;test_step_logs:&lt;/em &gt; If the associated Test Case is calling Test Steps from another Test Case, the \&quot;called_test_case_id\&quot; and \&quot;parent_test_step_id\&quot; must be included in the request body (required)
     * @param testRunId ID of the Test Run (required)
     * @return TestLogResource
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TestLogResource submitTestLog(Long projectId, ManualTestLogResource body, Long testRunId) throws QtestApiException {
        ApiResponse<TestLogResource> resp = submitTestLogWithHttpInfo(projectId, body, testRunId);
        return resp.getData();
    }

    /**
     * Submits a Manual Test Log
     * To submit test result of a &lt;em&gt;manual&lt;/em&gt; Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     * @param projectId ID of the project (required)
     * @param body &lt;em&gt;status (required):&lt;/em&gt; Status of the Test Log as defined in the project&#39;s Field Settings  &lt;em&gt;test_case_version_id:&lt;/em&gt; ID of the associated Test Case&#39;s version.    If it is omitted, the submitted Test Log will be associated with the Test Case&#39;s latest approved version  &lt;em&gt;exe_start_date (required):&lt;/em&gt; time when the test is executed  &lt;em&gt;exe_end_date (required):&lt;/em&gt; time when the test is finished  &lt;em&gt;attachments:&lt;/em&gt; the Test Log&#39;s attachments  &lt;em&gt;test_step_logs:&lt;/em &gt; If the associated Test Case is calling Test Steps from another Test Case, the \&quot;called_test_case_id\&quot; and \&quot;parent_test_step_id\&quot; must be included in the request body (required)
     * @param testRunId ID of the Test Run (required)
     * @return ApiResponse&lt;TestLogResource&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TestLogResource> submitTestLogWithHttpInfo(Long projectId, ManualTestLogResource body, Long testRunId) throws QtestApiException {
        com.squareup.okhttp.Call call = submitTestLogValidateBeforeCall(projectId, body, testRunId, null, null);
        Type localVarReturnType = new TypeToken<TestLogResource>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Submits a Manual Test Log (asynchronously)
     * To submit test result of a &lt;em&gt;manual&lt;/em&gt; Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     * @param projectId ID of the project (required)
     * @param body &lt;em&gt;status (required):&lt;/em&gt; Status of the Test Log as defined in the project&#39;s Field Settings  &lt;em&gt;test_case_version_id:&lt;/em&gt; ID of the associated Test Case&#39;s version.    If it is omitted, the submitted Test Log will be associated with the Test Case&#39;s latest approved version  &lt;em&gt;exe_start_date (required):&lt;/em&gt; time when the test is executed  &lt;em&gt;exe_end_date (required):&lt;/em&gt; time when the test is finished  &lt;em&gt;attachments:&lt;/em&gt; the Test Log&#39;s attachments  &lt;em&gt;test_step_logs:&lt;/em &gt; If the associated Test Case is calling Test Steps from another Test Case, the \&quot;called_test_case_id\&quot; and \&quot;parent_test_step_id\&quot; must be included in the request body (required)
     * @param testRunId ID of the Test Run (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call submitTestLogAsync(Long projectId, ManualTestLogResource body, Long testRunId, final ApiCallback<TestLogResource> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = submitTestLogValidateBeforeCall(projectId, body, testRunId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TestLogResource>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for track
     * @param id The ID of the submission job.   It is included in the response of these 2 APIs:  &lt;strong&gt;POST /api/v3.1/projects/{projectId}/test-runs/{testRunId}/auto-test-logs?type&#x3D;automation&lt;/strong&gt;   or &lt;strong&gt;POST /api/v3/projects/{projectId}/auto-test-logs?type&#x3D;automation&lt;/strong&gt; (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call trackCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/projects/queue-processing/{id}"
            .replaceAll("\\{" + "id" + "\\}", qtestApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call trackValidateBeforeCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new QtestApiException("Missing the required parameter 'id' when calling track(Async)");
        }
        

        com.squareup.okhttp.Call call = trackCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets a Batch Test Log Submission job&#39;s state
     * To check the state of a Batch Test Log Submission job.   When you submit test results to qTest Manager using:  &lt;strong&gt;POST /api/v3.1/projects/{projectId}/test-runs/{testRunId}/auto-test-logs?type&#x3D;automation&lt;/strong&gt;  or &lt;strong&gt;POST /api/v3/projects/{projectId}/auto-test-logs?type&#x3D;automation&lt;/strong&gt;, their response include a job ID.  You will need to use this API and the returned ID to check if the submission job has completed.  Job states include &lt;i&gt;IN_WAITING&lt;/i&gt;, &lt;i&gt;IN_PROCESSING&lt;/i&gt;, &lt;i&gt;FAILED&lt;/i&gt;, &lt;i&gt;PENDING&lt;/i&gt; and &lt;i&gt;SUCCESS&lt;/i&gt;
     * @param id The ID of the submission job.   It is included in the response of these 2 APIs:  &lt;strong&gt;POST /api/v3.1/projects/{projectId}/test-runs/{testRunId}/auto-test-logs?type&#x3D;automation&lt;/strong&gt;   or &lt;strong&gt;POST /api/v3/projects/{projectId}/auto-test-logs?type&#x3D;automation&lt;/strong&gt; (required)
     * @return QueueProcessingResponse
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QueueProcessingResponse track(Long id) throws QtestApiException {
        ApiResponse<QueueProcessingResponse> resp = trackWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Gets a Batch Test Log Submission job&#39;s state
     * To check the state of a Batch Test Log Submission job.   When you submit test results to qTest Manager using:  &lt;strong&gt;POST /api/v3.1/projects/{projectId}/test-runs/{testRunId}/auto-test-logs?type&#x3D;automation&lt;/strong&gt;  or &lt;strong&gt;POST /api/v3/projects/{projectId}/auto-test-logs?type&#x3D;automation&lt;/strong&gt;, their response include a job ID.  You will need to use this API and the returned ID to check if the submission job has completed.  Job states include &lt;i&gt;IN_WAITING&lt;/i&gt;, &lt;i&gt;IN_PROCESSING&lt;/i&gt;, &lt;i&gt;FAILED&lt;/i&gt;, &lt;i&gt;PENDING&lt;/i&gt; and &lt;i&gt;SUCCESS&lt;/i&gt;
     * @param id The ID of the submission job.   It is included in the response of these 2 APIs:  &lt;strong&gt;POST /api/v3.1/projects/{projectId}/test-runs/{testRunId}/auto-test-logs?type&#x3D;automation&lt;/strong&gt;   or &lt;strong&gt;POST /api/v3/projects/{projectId}/auto-test-logs?type&#x3D;automation&lt;/strong&gt; (required)
     * @return ApiResponse&lt;QueueProcessingResponse&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QueueProcessingResponse> trackWithHttpInfo(Long id) throws QtestApiException {
        com.squareup.okhttp.Call call = trackValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<QueueProcessingResponse>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a Batch Test Log Submission job&#39;s state (asynchronously)
     * To check the state of a Batch Test Log Submission job.   When you submit test results to qTest Manager using:  &lt;strong&gt;POST /api/v3.1/projects/{projectId}/test-runs/{testRunId}/auto-test-logs?type&#x3D;automation&lt;/strong&gt;  or &lt;strong&gt;POST /api/v3/projects/{projectId}/auto-test-logs?type&#x3D;automation&lt;/strong&gt;, their response include a job ID.  You will need to use this API and the returned ID to check if the submission job has completed.  Job states include &lt;i&gt;IN_WAITING&lt;/i&gt;, &lt;i&gt;IN_PROCESSING&lt;/i&gt;, &lt;i&gt;FAILED&lt;/i&gt;, &lt;i&gt;PENDING&lt;/i&gt; and &lt;i&gt;SUCCESS&lt;/i&gt;
     * @param id The ID of the submission job.   It is included in the response of these 2 APIs:  &lt;strong&gt;POST /api/v3.1/projects/{projectId}/test-runs/{testRunId}/auto-test-logs?type&#x3D;automation&lt;/strong&gt;   or &lt;strong&gt;POST /api/v3/projects/{projectId}/auto-test-logs?type&#x3D;automation&lt;/strong&gt; (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call trackAsync(Long id, final ApiCallback<QueueProcessingResponse> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = trackValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QueueProcessingResponse>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
