/*
 * qTest Manager API Version 8.6 - 10.2
 * qTest Manager API Version 8.6 - 10.2
 *
 * OpenAPI spec version: 8.6 - 10.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.neotys.qtest.api.client.api;

import com.neotys.qtest.api.client.*;
import com.neotys.qtest.api.client.model.FieldResource;
import com.neotys.qtest.api.client.QtestApiClient;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FieldApi {
    private QtestApiClient qtestApiClient;

    public FieldApi() {
        this(Configuration.getDefaultQtestApiClient());
    }

    public FieldApi(QtestApiClient qtestApiClient) {
        this.qtestApiClient = qtestApiClient;
    }

    public QtestApiClient getQtestApiClient() {
        return qtestApiClient;
    }

    public void setQtestApiClient(QtestApiClient qtestApiClient) {
        this.qtestApiClient = qtestApiClient;
    }

    /**
     * Build call for create
     * @param projectId ID of the project (required)
     * @param body The field&#39;s properties and values  &lt;strong&gt;data_type (required):&lt;/strong&gt; specify the field type. Its valid values include  - 1 - Text box  - 2 - Text area  - 3 - Combo box  - 4 - Date picker  - 5 - User list  - 6 - Rich text editor  - 7 - Number  - 8 - Check box  - 9 - Date time picker  - 12 - URL  - 17 - Multiple selection combobox  In case you are creating a multiple picklist typed field (data_type&#39;s value is 8 or 17), you will need to specify &lt;em&gt;multiple&#x3D;true&lt;/em&gt;  In case you are creating a picklist typed field, you can specify the field&#39;s values in the &lt;em&gt;allowed_values&lt;/em&gt; array (required)
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createCall(Long projectId, FieldResource body, String objectType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/settings/{objectType}/fields"
            .replaceAll("\\{" + "projectId" + "\\}", qtestApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "objectType" + "\\}", qtestApiClient.escapeString(objectType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createValidateBeforeCall(Long projectId, FieldResource body, String objectType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new QtestApiException("Missing the required parameter 'projectId' when calling create(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new QtestApiException("Missing the required parameter 'body' when calling create(Async)");
        }
        
        // verify the required parameter 'objectType' is set
        if (objectType == null) {
            throw new QtestApiException("Missing the required parameter 'objectType' when calling create(Async)");
        }
        

        com.squareup.okhttp.Call call = createCall(projectId, body, objectType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates a Custom Field of an Object Type
     * To create a new custom Field for Release, Build, Requirement, Test Case, Test Suite, Test Run, or Defect
     * @param projectId ID of the project (required)
     * @param body The field&#39;s properties and values  &lt;strong&gt;data_type (required):&lt;/strong&gt; specify the field type. Its valid values include  - 1 - Text box  - 2 - Text area  - 3 - Combo box  - 4 - Date picker  - 5 - User list  - 6 - Rich text editor  - 7 - Number  - 8 - Check box  - 9 - Date time picker  - 12 - URL  - 17 - Multiple selection combobox  In case you are creating a multiple picklist typed field (data_type&#39;s value is 8 or 17), you will need to specify &lt;em&gt;multiple&#x3D;true&lt;/em&gt;  In case you are creating a picklist typed field, you can specify the field&#39;s values in the &lt;em&gt;allowed_values&lt;/em&gt; array (required)
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @return FieldResource
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FieldResource create(Long projectId, FieldResource body, String objectType) throws QtestApiException {
        ApiResponse<FieldResource> resp = createWithHttpInfo(projectId, body, objectType);
        return resp.getData();
    }

    /**
     * Creates a Custom Field of an Object Type
     * To create a new custom Field for Release, Build, Requirement, Test Case, Test Suite, Test Run, or Defect
     * @param projectId ID of the project (required)
     * @param body The field&#39;s properties and values  &lt;strong&gt;data_type (required):&lt;/strong&gt; specify the field type. Its valid values include  - 1 - Text box  - 2 - Text area  - 3 - Combo box  - 4 - Date picker  - 5 - User list  - 6 - Rich text editor  - 7 - Number  - 8 - Check box  - 9 - Date time picker  - 12 - URL  - 17 - Multiple selection combobox  In case you are creating a multiple picklist typed field (data_type&#39;s value is 8 or 17), you will need to specify &lt;em&gt;multiple&#x3D;true&lt;/em&gt;  In case you are creating a picklist typed field, you can specify the field&#39;s values in the &lt;em&gt;allowed_values&lt;/em&gt; array (required)
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @return ApiResponse&lt;FieldResource&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FieldResource> createWithHttpInfo(Long projectId, FieldResource body, String objectType) throws QtestApiException {
        com.squareup.okhttp.Call call = createValidateBeforeCall(projectId, body, objectType, null, null);
        Type localVarReturnType = new TypeToken<FieldResource>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a Custom Field of an Object Type (asynchronously)
     * To create a new custom Field for Release, Build, Requirement, Test Case, Test Suite, Test Run, or Defect
     * @param projectId ID of the project (required)
     * @param body The field&#39;s properties and values  &lt;strong&gt;data_type (required):&lt;/strong&gt; specify the field type. Its valid values include  - 1 - Text box  - 2 - Text area  - 3 - Combo box  - 4 - Date picker  - 5 - User list  - 6 - Rich text editor  - 7 - Number  - 8 - Check box  - 9 - Date time picker  - 12 - URL  - 17 - Multiple selection combobox  In case you are creating a multiple picklist typed field (data_type&#39;s value is 8 or 17), you will need to specify &lt;em&gt;multiple&#x3D;true&lt;/em&gt;  In case you are creating a picklist typed field, you can specify the field&#39;s values in the &lt;em&gt;allowed_values&lt;/em&gt; array (required)
     * @param objectType Valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAsync(Long projectId, FieldResource body, String objectType, final ApiCallback<FieldResource> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createValidateBeforeCall(projectId, body, objectType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FieldResource>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFields
     * @param projectId ID of the project (required)
     * @param objectType valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param includeInactive By default inactive Fields are excluded from the response. Specify &lt;em&gt;includeInactive&#x3D;true&lt;/em&gt; to include inactive fields (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFieldsCall(Long projectId, String objectType, Boolean includeInactive, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/settings/{objectType}/fields"
            .replaceAll("\\{" + "projectId" + "\\}", qtestApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "objectType" + "\\}", qtestApiClient.escapeString(objectType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (includeInactive != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("includeInactive", includeInactive));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFieldsValidateBeforeCall(Long projectId, String objectType, Boolean includeInactive, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new QtestApiException("Missing the required parameter 'projectId' when calling getFields(Async)");
        }
        
        // verify the required parameter 'objectType' is set
        if (objectType == null) {
            throw new QtestApiException("Missing the required parameter 'objectType' when calling getFields(Async)");
        }
        

        com.squareup.okhttp.Call call = getFieldsCall(projectId, objectType, includeInactive, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets all Fields of an Object Type
     * To retrieve Fields of an Object Type  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     * @param projectId ID of the project (required)
     * @param objectType valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param includeInactive By default inactive Fields are excluded from the response. Specify &lt;em&gt;includeInactive&#x3D;true&lt;/em&gt; to include inactive fields (optional)
     * @return List&lt;FieldResource&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FieldResource> getFields(Long projectId, String objectType, Boolean includeInactive) throws QtestApiException {
        ApiResponse<List<FieldResource>> resp = getFieldsWithHttpInfo(projectId, objectType, includeInactive);
        return resp.getData();
    }

    /**
     * Gets all Fields of an Object Type
     * To retrieve Fields of an Object Type  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     * @param projectId ID of the project (required)
     * @param objectType valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param includeInactive By default inactive Fields are excluded from the response. Specify &lt;em&gt;includeInactive&#x3D;true&lt;/em&gt; to include inactive fields (optional)
     * @return ApiResponse&lt;List&lt;FieldResource&gt;&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FieldResource>> getFieldsWithHttpInfo(Long projectId, String objectType, Boolean includeInactive) throws QtestApiException {
        com.squareup.okhttp.Call call = getFieldsValidateBeforeCall(projectId, objectType, includeInactive, null, null);
        Type localVarReturnType = new TypeToken<List<FieldResource>>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets all Fields of an Object Type (asynchronously)
     * To retrieve Fields of an Object Type  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     * @param projectId ID of the project (required)
     * @param objectType valid values include releases, builds, requirements, test-cases, defects, test-suites and test-runs (required)
     * @param includeInactive By default inactive Fields are excluded from the response. Specify &lt;em&gt;includeInactive&#x3D;true&lt;/em&gt; to include inactive fields (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFieldsAsync(Long projectId, String objectType, Boolean includeInactive, final ApiCallback<List<FieldResource>> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFieldsValidateBeforeCall(projectId, objectType, includeInactive, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<FieldResource>>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
