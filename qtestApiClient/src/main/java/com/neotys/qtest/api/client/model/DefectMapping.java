/*
 * qTest Manager API Version 8.6 - 10.2
 * qTest Manager API Version 8.6 - 10.2
 *
 * OpenAPI spec version: 8.6 - 10.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.neotys.qtest.api.client.model;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.List;

/**
 * DefectMapping
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-01-14T16:24:25.829Z")
public class DefectMapping {
  @SerializedName("type_id")
  private Long typeId = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("type_label")
  private String typeLabel = null;

  @SerializedName("project_id")
  private Long projectId = null;

  @SerializedName("project")
  private String project = null;

  @SerializedName("project_label")
  private String projectLabel = null;

  @SerializedName("fields")
  private List<DefectFieldMapping> fields = null;

  public DefectMapping typeId(Long typeId) {
    this.typeId = typeId;
    return this;
  }

   /**
   * Get typeId
   * @return typeId
  **/
  @ApiModelProperty(value = "")
  public Long getTypeId() {
    return typeId;
  }

  public void setTypeId(Long typeId) {
    this.typeId = typeId;
  }

  public DefectMapping type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @ApiModelProperty(value = "")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public DefectMapping typeLabel(String typeLabel) {
    this.typeLabel = typeLabel;
    return this;
  }

   /**
   * Get typeLabel
   * @return typeLabel
  **/
  @ApiModelProperty(value = "")
  public String getTypeLabel() {
    return typeLabel;
  }

  public void setTypeLabel(String typeLabel) {
    this.typeLabel = typeLabel;
  }

  public DefectMapping projectId(Long projectId) {
    this.projectId = projectId;
    return this;
  }

   /**
   * Get projectId
   * @return projectId
  **/
  @ApiModelProperty(value = "")
  public Long getProjectId() {
    return projectId;
  }

  public void setProjectId(Long projectId) {
    this.projectId = projectId;
  }

  public DefectMapping project(String project) {
    this.project = project;
    return this;
  }

   /**
   * Get project
   * @return project
  **/
  @ApiModelProperty(value = "")
  public String getProject() {
    return project;
  }

  public void setProject(String project) {
    this.project = project;
  }

  public DefectMapping projectLabel(String projectLabel) {
    this.projectLabel = projectLabel;
    return this;
  }

   /**
   * Get projectLabel
   * @return projectLabel
  **/
  @ApiModelProperty(value = "")
  public String getProjectLabel() {
    return projectLabel;
  }

  public void setProjectLabel(String projectLabel) {
    this.projectLabel = projectLabel;
  }

  public DefectMapping fields(List<DefectFieldMapping> fields) {
    this.fields = fields;
    return this;
  }

  public DefectMapping addFieldsItem(DefectFieldMapping fieldsItem) {
    if (this.fields == null) {
      this.fields = new ArrayList<DefectFieldMapping>();
    }
    this.fields.add(fieldsItem);
    return this;
  }

   /**
   * Get fields
   * @return fields
  **/
  @ApiModelProperty(value = "")
  public List<DefectFieldMapping> getFields() {
    return fields;
  }

  public void setFields(List<DefectFieldMapping> fields) {
    this.fields = fields;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DefectMapping defectMapping = (DefectMapping) o;
    return Objects.equals(this.typeId, defectMapping.typeId) &&
        Objects.equals(this.type, defectMapping.type) &&
        Objects.equals(this.typeLabel, defectMapping.typeLabel) &&
        Objects.equals(this.projectId, defectMapping.projectId) &&
        Objects.equals(this.project, defectMapping.project) &&
        Objects.equals(this.projectLabel, defectMapping.projectLabel) &&
        Objects.equals(this.fields, defectMapping.fields);
  }

  @Override
  public int hashCode() {
    return Objects.hash(typeId, type, typeLabel, projectId, project, projectLabel, fields);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DefectMapping {\n");
    
    sb.append("    typeId: ").append(toIndentedString(typeId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    typeLabel: ").append(toIndentedString(typeLabel)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    projectLabel: ").append(toIndentedString(projectLabel)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

