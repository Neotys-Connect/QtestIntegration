/*
 * qTest Manager API Version 8.6 - 10.2
 * qTest Manager API Version 8.6 - 10.2
 *
 * OpenAPI spec version: 8.6 - 10.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.neotys.qtest.api.client.api;

import com.neotys.qtest.api.client.*;
import com.neotys.qtest.api.client.model.Message;
import com.neotys.qtest.api.client.model.ModuleResource;
import com.neotys.qtest.api.client.QtestApiClient;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ModuleApi {
    private QtestApiClient qtestApiClient;

    public ModuleApi() {
        this(Configuration.getDefaultQtestApiClient());
    }

    public ModuleApi(QtestApiClient qtestApiClient) {
        this.qtestApiClient = qtestApiClient;
    }

    public QtestApiClient getQtestApiClient() {
        return qtestApiClient;
    }

    public void setQtestApiClient(QtestApiClient qtestApiClient) {
        this.qtestApiClient = qtestApiClient;
    }

    /**
     * Build call for createModule
     * @param projectId ID of the project (required)
     * @param body &lt;em&gt;name (required):&lt;/em&gt; the Module name  &lt;em&gt;shared:&lt;/em&gt; Specify &lt;em&gt;shared&#x3D;true&lt;/em&gt; to share this Module to other projects. Only use it if Test Case Sharing feature is enabled in your project  &lt;em&gt;tosca_guid&lt;/em&gt;: Tosca folder GUID. Use for creating Module and link with Tosca folder. This property must be provided along with &lt;em&gt;tosca_node_path&lt;/em&gt;, or it will fail to create module.  &lt;em&gt;tosca_node_path&lt;/em&gt;: Tosca folder node path. Use for creating Module and link with Tosca folder. This property must be provided along with &lt;em&gt;tosca_guid&lt;/em&gt;, or it will fail to create module. (required)
     * @param parentId The parent Module which will contain the newly created one. If it is not specified, the newly created module is located under root  Use this parameter if your qTest Manager version is 6+. For older versions, use &lt;em&gt;parent_id&lt;/em&gt; in the request body (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createModuleCall(Long projectId, ModuleResource body, Long parentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/modules"
            .replaceAll("\\{" + "projectId" + "\\}", qtestApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (parentId != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("parentId", parentId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createModuleValidateBeforeCall(Long projectId, ModuleResource body, Long parentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new QtestApiException("Missing the required parameter 'projectId' when calling createModule(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new QtestApiException("Missing the required parameter 'body' when calling createModule(Async)");
        }
        

        com.squareup.okhttp.Call call = createModuleCall(projectId, body, parentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates a Module
     * To create a Module under root or a sub-Module under a parent Module  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     * @param projectId ID of the project (required)
     * @param body &lt;em&gt;name (required):&lt;/em&gt; the Module name  &lt;em&gt;shared:&lt;/em&gt; Specify &lt;em&gt;shared&#x3D;true&lt;/em&gt; to share this Module to other projects. Only use it if Test Case Sharing feature is enabled in your project  &lt;em&gt;tosca_guid&lt;/em&gt;: Tosca folder GUID. Use for creating Module and link with Tosca folder. This property must be provided along with &lt;em&gt;tosca_node_path&lt;/em&gt;, or it will fail to create module.  &lt;em&gt;tosca_node_path&lt;/em&gt;: Tosca folder node path. Use for creating Module and link with Tosca folder. This property must be provided along with &lt;em&gt;tosca_guid&lt;/em&gt;, or it will fail to create module. (required)
     * @param parentId The parent Module which will contain the newly created one. If it is not specified, the newly created module is located under root  Use this parameter if your qTest Manager version is 6+. For older versions, use &lt;em&gt;parent_id&lt;/em&gt; in the request body (optional)
     * @return ModuleResource
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModuleResource createModule(Long projectId, ModuleResource body, Long parentId) throws QtestApiException {
        ApiResponse<ModuleResource> resp = createModuleWithHttpInfo(projectId, body, parentId);
        return resp.getData();
    }

    /**
     * Creates a Module
     * To create a Module under root or a sub-Module under a parent Module  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     * @param projectId ID of the project (required)
     * @param body &lt;em&gt;name (required):&lt;/em&gt; the Module name  &lt;em&gt;shared:&lt;/em&gt; Specify &lt;em&gt;shared&#x3D;true&lt;/em&gt; to share this Module to other projects. Only use it if Test Case Sharing feature is enabled in your project  &lt;em&gt;tosca_guid&lt;/em&gt;: Tosca folder GUID. Use for creating Module and link with Tosca folder. This property must be provided along with &lt;em&gt;tosca_node_path&lt;/em&gt;, or it will fail to create module.  &lt;em&gt;tosca_node_path&lt;/em&gt;: Tosca folder node path. Use for creating Module and link with Tosca folder. This property must be provided along with &lt;em&gt;tosca_guid&lt;/em&gt;, or it will fail to create module. (required)
     * @param parentId The parent Module which will contain the newly created one. If it is not specified, the newly created module is located under root  Use this parameter if your qTest Manager version is 6+. For older versions, use &lt;em&gt;parent_id&lt;/em&gt; in the request body (optional)
     * @return ApiResponse&lt;ModuleResource&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModuleResource> createModuleWithHttpInfo(Long projectId, ModuleResource body, Long parentId) throws QtestApiException {
        com.squareup.okhttp.Call call = createModuleValidateBeforeCall(projectId, body, parentId, null, null);
        Type localVarReturnType = new TypeToken<ModuleResource>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a Module (asynchronously)
     * To create a Module under root or a sub-Module under a parent Module  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     * @param projectId ID of the project (required)
     * @param body &lt;em&gt;name (required):&lt;/em&gt; the Module name  &lt;em&gt;shared:&lt;/em&gt; Specify &lt;em&gt;shared&#x3D;true&lt;/em&gt; to share this Module to other projects. Only use it if Test Case Sharing feature is enabled in your project  &lt;em&gt;tosca_guid&lt;/em&gt;: Tosca folder GUID. Use for creating Module and link with Tosca folder. This property must be provided along with &lt;em&gt;tosca_node_path&lt;/em&gt;, or it will fail to create module.  &lt;em&gt;tosca_node_path&lt;/em&gt;: Tosca folder node path. Use for creating Module and link with Tosca folder. This property must be provided along with &lt;em&gt;tosca_guid&lt;/em&gt;, or it will fail to create module. (required)
     * @param parentId The parent Module which will contain the newly created one. If it is not specified, the newly created module is located under root  Use this parameter if your qTest Manager version is 6+. For older versions, use &lt;em&gt;parent_id&lt;/em&gt; in the request body (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createModuleAsync(Long projectId, ModuleResource body, Long parentId, final ApiCallback<ModuleResource> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createModuleValidateBeforeCall(projectId, body, parentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModuleResource>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteModule
     * @param projectId ID of the project (required)
     * @param moduleId ID of Module to delete (required)
     * @param force &lt;em&gt;force&#x3D;true&lt;/em&gt; - delete the Module and its children  force&#x3D;false - default value. Only delete the Module if it contains no sub Modules or Test Cases (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteModuleCall(Long projectId, Long moduleId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/modules/{moduleId}"
            .replaceAll("\\{" + "projectId" + "\\}", qtestApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "moduleId" + "\\}", qtestApiClient.escapeString(moduleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("force", force));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteModuleValidateBeforeCall(Long projectId, Long moduleId, Boolean force, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new QtestApiException("Missing the required parameter 'projectId' when calling deleteModule(Async)");
        }
        
        // verify the required parameter 'moduleId' is set
        if (moduleId == null) {
            throw new QtestApiException("Missing the required parameter 'moduleId' when calling deleteModule(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteModuleCall(projectId, moduleId, force, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deletes a Module
     * To delete a Module  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param moduleId ID of Module to delete (required)
     * @param force &lt;em&gt;force&#x3D;true&lt;/em&gt; - delete the Module and its children  force&#x3D;false - default value. Only delete the Module if it contains no sub Modules or Test Cases (optional)
     * @return Message
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Message deleteModule(Long projectId, Long moduleId, Boolean force) throws QtestApiException {
        ApiResponse<Message> resp = deleteModuleWithHttpInfo(projectId, moduleId, force);
        return resp.getData();
    }

    /**
     * Deletes a Module
     * To delete a Module  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param moduleId ID of Module to delete (required)
     * @param force &lt;em&gt;force&#x3D;true&lt;/em&gt; - delete the Module and its children  force&#x3D;false - default value. Only delete the Module if it contains no sub Modules or Test Cases (optional)
     * @return ApiResponse&lt;Message&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Message> deleteModuleWithHttpInfo(Long projectId, Long moduleId, Boolean force) throws QtestApiException {
        com.squareup.okhttp.Call call = deleteModuleValidateBeforeCall(projectId, moduleId, force, null, null);
        Type localVarReturnType = new TypeToken<Message>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes a Module (asynchronously)
     * To delete a Module  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param moduleId ID of Module to delete (required)
     * @param force &lt;em&gt;force&#x3D;true&lt;/em&gt; - delete the Module and its children  force&#x3D;false - default value. Only delete the Module if it contains no sub Modules or Test Cases (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteModuleAsync(Long projectId, Long moduleId, Boolean force, final ApiCallback<Message> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteModuleValidateBeforeCall(projectId, moduleId, force, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Message>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getModule
     * @param projectId ID of the project (required)
     * @param moduleId ID of the Module (required)
     * @param expand Specify &lt;em&gt;expand&#x3D;descendants&lt;/em&gt; to include the Module&#39;s sub and grand-sub Modules in the response (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getModuleCall(Long projectId, Long moduleId, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/modules/{moduleId}"
            .replaceAll("\\{" + "projectId" + "\\}", qtestApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "moduleId" + "\\}", qtestApiClient.escapeString(moduleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getModuleValidateBeforeCall(Long projectId, Long moduleId, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new QtestApiException("Missing the required parameter 'projectId' when calling getModule(Async)");
        }
        
        // verify the required parameter 'moduleId' is set
        if (moduleId == null) {
            throw new QtestApiException("Missing the required parameter 'moduleId' when calling getModule(Async)");
        }
        

        com.squareup.okhttp.Call call = getModuleCall(projectId, moduleId, expand, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets a Module
     * To retrieve a Module  &lt;em&gt;qTest Manager version:&lt;/em&gt; 6+
     * @param projectId ID of the project (required)
     * @param moduleId ID of the Module (required)
     * @param expand Specify &lt;em&gt;expand&#x3D;descendants&lt;/em&gt; to include the Module&#39;s sub and grand-sub Modules in the response (optional)
     * @return ModuleResource
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModuleResource getModule(Long projectId, Long moduleId, String expand) throws QtestApiException {
        ApiResponse<ModuleResource> resp = getModuleWithHttpInfo(projectId, moduleId, expand);
        return resp.getData();
    }

    /**
     * Gets a Module
     * To retrieve a Module  &lt;em&gt;qTest Manager version:&lt;/em&gt; 6+
     * @param projectId ID of the project (required)
     * @param moduleId ID of the Module (required)
     * @param expand Specify &lt;em&gt;expand&#x3D;descendants&lt;/em&gt; to include the Module&#39;s sub and grand-sub Modules in the response (optional)
     * @return ApiResponse&lt;ModuleResource&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModuleResource> getModuleWithHttpInfo(Long projectId, Long moduleId, String expand) throws QtestApiException {
        com.squareup.okhttp.Call call = getModuleValidateBeforeCall(projectId, moduleId, expand, null, null);
        Type localVarReturnType = new TypeToken<ModuleResource>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a Module (asynchronously)
     * To retrieve a Module  &lt;em&gt;qTest Manager version:&lt;/em&gt; 6+
     * @param projectId ID of the project (required)
     * @param moduleId ID of the Module (required)
     * @param expand Specify &lt;em&gt;expand&#x3D;descendants&lt;/em&gt; to include the Module&#39;s sub and grand-sub Modules in the response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getModuleAsync(Long projectId, Long moduleId, String expand, final ApiCallback<ModuleResource> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getModuleValidateBeforeCall(projectId, moduleId, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModuleResource>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSubModulesOf
     * @param projectId ID of the project (required)
     * @param parentId ID of the parent Module. Leave it blank to retrieve Modules under root (optional)
     * @param search The free-text to search for Modules by names. You can utilize this parameter to search for Modules. Leave it blank to retrieve all Modules under root or the parent Module (optional)
     * @param expand  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSubModulesOfCall(Long projectId, Long parentId, String search, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/modules"
            .replaceAll("\\{" + "projectId" + "\\}", qtestApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (parentId != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("parentId", parentId));
        if (search != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("search", search));
        if (expand != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSubModulesOfValidateBeforeCall(Long projectId, Long parentId, String search, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new QtestApiException("Missing the required parameter 'projectId' when calling getSubModulesOf(Async)");
        }
        

        com.squareup.okhttp.Call call = getSubModulesOfCall(projectId, parentId, search, expand, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets multiple Modules
     * To search for Modules under root or sub-Modules under a parent Module  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param parentId ID of the parent Module. Leave it blank to retrieve Modules under root (optional)
     * @param search The free-text to search for Modules by names. You can utilize this parameter to search for Modules. Leave it blank to retrieve all Modules under root or the parent Module (optional)
     * @param expand  (optional)
     * @return List&lt;ModuleResource&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ModuleResource> getSubModulesOf(Long projectId, Long parentId, String search, String expand) throws QtestApiException {
        ApiResponse<List<ModuleResource>> resp = getSubModulesOfWithHttpInfo(projectId, parentId, search, expand);
        return resp.getData();
    }

    /**
     * Gets multiple Modules
     * To search for Modules under root or sub-Modules under a parent Module  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param parentId ID of the parent Module. Leave it blank to retrieve Modules under root (optional)
     * @param search The free-text to search for Modules by names. You can utilize this parameter to search for Modules. Leave it blank to retrieve all Modules under root or the parent Module (optional)
     * @param expand  (optional)
     * @return ApiResponse&lt;List&lt;ModuleResource&gt;&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ModuleResource>> getSubModulesOfWithHttpInfo(Long projectId, Long parentId, String search, String expand) throws QtestApiException {
        com.squareup.okhttp.Call call = getSubModulesOfValidateBeforeCall(projectId, parentId, search, expand, null, null);
        Type localVarReturnType = new TypeToken<List<ModuleResource>>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets multiple Modules (asynchronously)
     * To search for Modules under root or sub-Modules under a parent Module  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param parentId ID of the parent Module. Leave it blank to retrieve Modules under root (optional)
     * @param search The free-text to search for Modules by names. You can utilize this parameter to search for Modules. Leave it blank to retrieve all Modules under root or the parent Module (optional)
     * @param expand  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSubModulesOfAsync(Long projectId, Long parentId, String search, String expand, final ApiCallback<List<ModuleResource>> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSubModulesOfValidateBeforeCall(projectId, parentId, search, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ModuleResource>>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateModule
     * @param projectId ID of the project (required)
     * @param moduleId ID of the Module (required)
     * @param body The Module&#39;s update properties (required)
     * @param parentId ID of the parent Module which the Module will be moved to  &lt;strong&gt;Important:&lt;/strong&gt; If you use this parameter, the request body will be ignored. That means the Module is being moved but it will not be updated with the properties specified in the request body (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateModuleCall(Long projectId, Long moduleId, ModuleResource body, Long parentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/modules/{moduleId}"
            .replaceAll("\\{" + "projectId" + "\\}", qtestApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "moduleId" + "\\}", qtestApiClient.escapeString(moduleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (parentId != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("parentId", parentId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateModuleValidateBeforeCall(Long projectId, Long moduleId, ModuleResource body, Long parentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new QtestApiException("Missing the required parameter 'projectId' when calling updateModule(Async)");
        }
        
        // verify the required parameter 'moduleId' is set
        if (moduleId == null) {
            throw new QtestApiException("Missing the required parameter 'moduleId' when calling updateModule(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new QtestApiException("Missing the required parameter 'body' when calling updateModule(Async)");
        }
        

        com.squareup.okhttp.Call call = updateModuleCall(projectId, moduleId, body, parentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates a Module
     * To update a Module or move it to another parent Module
     * @param projectId ID of the project (required)
     * @param moduleId ID of the Module (required)
     * @param body The Module&#39;s update properties (required)
     * @param parentId ID of the parent Module which the Module will be moved to  &lt;strong&gt;Important:&lt;/strong&gt; If you use this parameter, the request body will be ignored. That means the Module is being moved but it will not be updated with the properties specified in the request body (optional)
     * @return ModuleResource
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModuleResource updateModule(Long projectId, Long moduleId, ModuleResource body, Long parentId) throws QtestApiException {
        ApiResponse<ModuleResource> resp = updateModuleWithHttpInfo(projectId, moduleId, body, parentId);
        return resp.getData();
    }

    /**
     * Updates a Module
     * To update a Module or move it to another parent Module
     * @param projectId ID of the project (required)
     * @param moduleId ID of the Module (required)
     * @param body The Module&#39;s update properties (required)
     * @param parentId ID of the parent Module which the Module will be moved to  &lt;strong&gt;Important:&lt;/strong&gt; If you use this parameter, the request body will be ignored. That means the Module is being moved but it will not be updated with the properties specified in the request body (optional)
     * @return ApiResponse&lt;ModuleResource&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModuleResource> updateModuleWithHttpInfo(Long projectId, Long moduleId, ModuleResource body, Long parentId) throws QtestApiException {
        com.squareup.okhttp.Call call = updateModuleValidateBeforeCall(projectId, moduleId, body, parentId, null, null);
        Type localVarReturnType = new TypeToken<ModuleResource>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a Module (asynchronously)
     * To update a Module or move it to another parent Module
     * @param projectId ID of the project (required)
     * @param moduleId ID of the Module (required)
     * @param body The Module&#39;s update properties (required)
     * @param parentId ID of the parent Module which the Module will be moved to  &lt;strong&gt;Important:&lt;/strong&gt; If you use this parameter, the request body will be ignored. That means the Module is being moved but it will not be updated with the properties specified in the request body (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateModuleAsync(Long projectId, Long moduleId, ModuleResource body, Long parentId, final ApiCallback<ModuleResource> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateModuleValidateBeforeCall(projectId, moduleId, body, parentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModuleResource>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
