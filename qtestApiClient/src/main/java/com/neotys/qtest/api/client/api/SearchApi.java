/*
 * qTest Manager API Version 8.6 - 10.2
 * qTest Manager API Version 8.6 - 10.2
 *
 * OpenAPI spec version: 8.6 - 10.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.neotys.qtest.api.client.api;

import com.neotys.qtest.api.client.ApiCallback;
import com.neotys.qtest.api.client.QtestApiClient;
import com.neotys.qtest.api.client.QtestApiException;
import com.neotys.qtest.api.client.ApiResponse;
import com.neotys.qtest.api.client.Configuration;
import com.neotys.qtest.api.client.Pair;
import com.neotys.qtest.api.client.ProgressRequestBody;
import com.neotys.qtest.api.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.neotys.qtest.api.client.model.ArtifactHistoryResource;
import com.neotys.qtest.api.client.model.ArtifactSearchParams;
import com.neotys.qtest.api.client.model.CommentQueryParams;
import com.neotys.qtest.api.client.model.HistoryQueryParams;
import com.neotys.qtest.api.client.model.PagedResource;
import com.neotys.qtest.api.client.model.QueryCommentResource;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SearchApi {
    private QtestApiClient qtestApiClient;

    public SearchApi() {
        this(Configuration.getDefaultQtestApiClient());
    }

    public SearchApi(QtestApiClient qtestApiClient) {
        this.qtestApiClient = qtestApiClient;
    }

    public QtestApiClient getQtestApiClient() {
        return qtestApiClient;
    }

    public void setQtestApiClient(QtestApiClient qtestApiClient) {
        this.qtestApiClient = qtestApiClient;
    }

    /**
     * Build call for queryHistories
     * @param projectId ID of the project (required)
     * @param body &lt;em&gt;object_type (required):&lt;/em&gt; valid values include &lt;em&gt;requirements&lt;/em&gt;, &lt;em&gt;test-cases&lt;/em&gt;, &lt;em&gt;test-runs&lt;/em&gt;, or &lt;em&gt;defects&lt;/em&gt;  &lt;em&gt;fields:&lt;/em&gt; specify which object fields you want to include in the response. If you omit it or specify an asterisk (*), all fields are included  &lt;em&gt;object_query:&lt;/em&gt; specify a structured query to search for qTest objects. &lt;br/&gt;Refer to attribute &lt;em&gt;query&lt;/em&gt; in the Request Body of &lt;em&gt;Queries Objects&lt;/em&gt; API  &lt;em&gt;query:&lt;/em&gt; specify a structured query to retrieve histories of objects specified in attribute &lt;em&gt;object_query&lt;/em&gt; above. You can use operators &lt;em&gt;and&lt;/em&gt; and &lt;em&gt;or&lt;/em&gt; to combine multiple criteria. Only these 2 criteria are supported:  &lt;br/&gt;i) &lt;em&gt;created:&lt;/em&gt; it can be used for querying by updated date of the object. Its values need to be in ISO Date format. Applicable operator include: &#x3D;, &lt;&gt;, &lt;&#x3D; and &gt;&#x3D;  &lt;br/&gt;ii) &lt;em&gt;author:&lt;/em&gt; it can be used for querying by ID of the users who made the update. Applicable operators include: &#x3D; and &lt;&gt; (required)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queryHistoriesCall(Long projectId, HistoryQueryParams body, Long pageSize, Long page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/histories"
            .replaceAll("\\{" + "projectId" + "\\}", qtestApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("pageSize", pageSize));
        if (page != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("page", page));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queryHistoriesValidateBeforeCall(Long projectId, HistoryQueryParams body, Long pageSize, Long page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new QtestApiException("Missing the required parameter 'projectId' when calling queryHistories(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new QtestApiException("Missing the required parameter 'body' when calling queryHistories(Async)");
        }
        

        com.squareup.okhttp.Call call = queryHistoriesCall(projectId, body, pageSize, page, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Queries objects&#39; histories
     * To query histories of Requirements, Test Cases, Test Runs and &lt;em&gt;internal&lt;/em&gt; Defects  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.6+
     * @param projectId ID of the project (required)
     * @param body &lt;em&gt;object_type (required):&lt;/em&gt; valid values include &lt;em&gt;requirements&lt;/em&gt;, &lt;em&gt;test-cases&lt;/em&gt;, &lt;em&gt;test-runs&lt;/em&gt;, or &lt;em&gt;defects&lt;/em&gt;  &lt;em&gt;fields:&lt;/em&gt; specify which object fields you want to include in the response. If you omit it or specify an asterisk (*), all fields are included  &lt;em&gt;object_query:&lt;/em&gt; specify a structured query to search for qTest objects. &lt;br/&gt;Refer to attribute &lt;em&gt;query&lt;/em&gt; in the Request Body of &lt;em&gt;Queries Objects&lt;/em&gt; API  &lt;em&gt;query:&lt;/em&gt; specify a structured query to retrieve histories of objects specified in attribute &lt;em&gt;object_query&lt;/em&gt; above. You can use operators &lt;em&gt;and&lt;/em&gt; and &lt;em&gt;or&lt;/em&gt; to combine multiple criteria. Only these 2 criteria are supported:  &lt;br/&gt;i) &lt;em&gt;created:&lt;/em&gt; it can be used for querying by updated date of the object. Its values need to be in ISO Date format. Applicable operator include: &#x3D;, &lt;&gt;, &lt;&#x3D; and &gt;&#x3D;  &lt;br/&gt;ii) &lt;em&gt;author:&lt;/em&gt; it can be used for querying by ID of the users who made the update. Applicable operators include: &#x3D; and &lt;&gt; (required)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @return ArtifactHistoryResource
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArtifactHistoryResource queryHistories(Long projectId, HistoryQueryParams body, Long pageSize, Long page) throws QtestApiException {
        ApiResponse<ArtifactHistoryResource> resp = queryHistoriesWithHttpInfo(projectId, body, pageSize, page);
        return resp.getData();
    }

    /**
     * Queries objects&#39; histories
     * To query histories of Requirements, Test Cases, Test Runs and &lt;em&gt;internal&lt;/em&gt; Defects  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.6+
     * @param projectId ID of the project (required)
     * @param body &lt;em&gt;object_type (required):&lt;/em&gt; valid values include &lt;em&gt;requirements&lt;/em&gt;, &lt;em&gt;test-cases&lt;/em&gt;, &lt;em&gt;test-runs&lt;/em&gt;, or &lt;em&gt;defects&lt;/em&gt;  &lt;em&gt;fields:&lt;/em&gt; specify which object fields you want to include in the response. If you omit it or specify an asterisk (*), all fields are included  &lt;em&gt;object_query:&lt;/em&gt; specify a structured query to search for qTest objects. &lt;br/&gt;Refer to attribute &lt;em&gt;query&lt;/em&gt; in the Request Body of &lt;em&gt;Queries Objects&lt;/em&gt; API  &lt;em&gt;query:&lt;/em&gt; specify a structured query to retrieve histories of objects specified in attribute &lt;em&gt;object_query&lt;/em&gt; above. You can use operators &lt;em&gt;and&lt;/em&gt; and &lt;em&gt;or&lt;/em&gt; to combine multiple criteria. Only these 2 criteria are supported:  &lt;br/&gt;i) &lt;em&gt;created:&lt;/em&gt; it can be used for querying by updated date of the object. Its values need to be in ISO Date format. Applicable operator include: &#x3D;, &lt;&gt;, &lt;&#x3D; and &gt;&#x3D;  &lt;br/&gt;ii) &lt;em&gt;author:&lt;/em&gt; it can be used for querying by ID of the users who made the update. Applicable operators include: &#x3D; and &lt;&gt; (required)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @return ApiResponse&lt;ArtifactHistoryResource&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArtifactHistoryResource> queryHistoriesWithHttpInfo(Long projectId, HistoryQueryParams body, Long pageSize, Long page) throws QtestApiException {
        com.squareup.okhttp.Call call = queryHistoriesValidateBeforeCall(projectId, body, pageSize, page, null, null);
        Type localVarReturnType = new TypeToken<ArtifactHistoryResource>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Queries objects&#39; histories (asynchronously)
     * To query histories of Requirements, Test Cases, Test Runs and &lt;em&gt;internal&lt;/em&gt; Defects  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.6+
     * @param projectId ID of the project (required)
     * @param body &lt;em&gt;object_type (required):&lt;/em&gt; valid values include &lt;em&gt;requirements&lt;/em&gt;, &lt;em&gt;test-cases&lt;/em&gt;, &lt;em&gt;test-runs&lt;/em&gt;, or &lt;em&gt;defects&lt;/em&gt;  &lt;em&gt;fields:&lt;/em&gt; specify which object fields you want to include in the response. If you omit it or specify an asterisk (*), all fields are included  &lt;em&gt;object_query:&lt;/em&gt; specify a structured query to search for qTest objects. &lt;br/&gt;Refer to attribute &lt;em&gt;query&lt;/em&gt; in the Request Body of &lt;em&gt;Queries Objects&lt;/em&gt; API  &lt;em&gt;query:&lt;/em&gt; specify a structured query to retrieve histories of objects specified in attribute &lt;em&gt;object_query&lt;/em&gt; above. You can use operators &lt;em&gt;and&lt;/em&gt; and &lt;em&gt;or&lt;/em&gt; to combine multiple criteria. Only these 2 criteria are supported:  &lt;br/&gt;i) &lt;em&gt;created:&lt;/em&gt; it can be used for querying by updated date of the object. Its values need to be in ISO Date format. Applicable operator include: &#x3D;, &lt;&gt;, &lt;&#x3D; and &gt;&#x3D;  &lt;br/&gt;ii) &lt;em&gt;author:&lt;/em&gt; it can be used for querying by ID of the users who made the update. Applicable operators include: &#x3D; and &lt;&gt; (required)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queryHistoriesAsync(Long projectId, HistoryQueryParams body, Long pageSize, Long page, final ApiCallback<ArtifactHistoryResource> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queryHistoriesValidateBeforeCall(projectId, body, pageSize, page, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArtifactHistoryResource>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for search
     * @param projectId ID of the project (required)
     * @param body &lt;em&gt;object_type (required):&lt;/em&gt; valid values include requirements, test-cases, test-runs and defects  &lt;em&gt;object:&lt;/em&gt; ID of the object from which you want to retrieve comments  &lt;em&gt;authors:&lt;/em&gt; ID of the user who made the comments  &lt;em&gt;start:&lt;/em&gt; This value needs to be in ISO Date format  &lt;em&gt;end:&lt;/em&gt; This value needs to be in ISO Date format (required)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchCall(Long projectId, CommentQueryParams body, Long page, Long pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/comments"
            .replaceAll("\\{" + "projectId" + "\\}", qtestApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchValidateBeforeCall(Long projectId, CommentQueryParams body, Long page, Long pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new QtestApiException("Missing the required parameter 'projectId' when calling search(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new QtestApiException("Missing the required parameter 'body' when calling search(Async)");
        }
        

        com.squareup.okhttp.Call call = searchCall(projectId, body, page, pageSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Queries Comments
     * To search for comments  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.6+
     * @param projectId ID of the project (required)
     * @param body &lt;em&gt;object_type (required):&lt;/em&gt; valid values include requirements, test-cases, test-runs and defects  &lt;em&gt;object:&lt;/em&gt; ID of the object from which you want to retrieve comments  &lt;em&gt;authors:&lt;/em&gt; ID of the user who made the comments  &lt;em&gt;start:&lt;/em&gt; This value needs to be in ISO Date format  &lt;em&gt;end:&lt;/em&gt; This value needs to be in ISO Date format (required)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @return QueryCommentResource
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QueryCommentResource search(Long projectId, CommentQueryParams body, Long page, Long pageSize) throws QtestApiException {
        ApiResponse<QueryCommentResource> resp = searchWithHttpInfo(projectId, body, page, pageSize);
        return resp.getData();
    }

    /**
     * Queries Comments
     * To search for comments  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.6+
     * @param projectId ID of the project (required)
     * @param body &lt;em&gt;object_type (required):&lt;/em&gt; valid values include requirements, test-cases, test-runs and defects  &lt;em&gt;object:&lt;/em&gt; ID of the object from which you want to retrieve comments  &lt;em&gt;authors:&lt;/em&gt; ID of the user who made the comments  &lt;em&gt;start:&lt;/em&gt; This value needs to be in ISO Date format  &lt;em&gt;end:&lt;/em&gt; This value needs to be in ISO Date format (required)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @return ApiResponse&lt;QueryCommentResource&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QueryCommentResource> searchWithHttpInfo(Long projectId, CommentQueryParams body, Long page, Long pageSize) throws QtestApiException {
        com.squareup.okhttp.Call call = searchValidateBeforeCall(projectId, body, page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<QueryCommentResource>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Queries Comments (asynchronously)
     * To search for comments  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.6+
     * @param projectId ID of the project (required)
     * @param body &lt;em&gt;object_type (required):&lt;/em&gt; valid values include requirements, test-cases, test-runs and defects  &lt;em&gt;object:&lt;/em&gt; ID of the object from which you want to retrieve comments  &lt;em&gt;authors:&lt;/em&gt; ID of the user who made the comments  &lt;em&gt;start:&lt;/em&gt; This value needs to be in ISO Date format  &lt;em&gt;end:&lt;/em&gt; This value needs to be in ISO Date format (required)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchAsync(Long projectId, CommentQueryParams body, Long page, Long pageSize, final ApiCallback<QueryCommentResource> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchValidateBeforeCall(projectId, body, page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QueryCommentResource>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for search_0
     * @param projectId ID of the project (required)
     * @param body &lt;em&gt;object_type (required):&lt;/em&gt; Its value can be &lt;em&gt;requirements&lt;/em&gt;, &lt;em&gt;test-cases&lt;/em&gt;, &lt;em&gt;test-runs&lt;/em&gt;, or &lt;em&gt;defects&lt;/em&gt;  &lt;em&gt;fields:&lt;/em&gt; specify which object fields you want to include in the response. If you omit it or specify an asterisk (*), all fields are included  &lt;em&gt;query:&lt;/em&gt; specify a structured query to search for qTest Manager objects. Basically, you can use the Query Summary text in qTest web app as in the below image for this attribute  &lt;strong&gt;IMPORTANT:&lt;/strong&gt; When using Query Summary to specify the query, you will need to modify the Query Summary in some special cases as below:  - If there are spaces in the criteria name, put it between &#39;&#39; (single quotation marks)  - There need to be spaces between a criteria, operator and value  - You can use field name or field ID in the query  - You can use a value text or its ID in the query  - For date time typed fields: you will need to convert the values to ISO Date Time format  - &lt;em&gt;Affected Release/Build:&lt;/em&gt; if you want to query Defects by their affected release, use &lt;em&gt;Affected Release&lt;/em&gt; instead. Otherwise, use &lt;em&gt;Affected Build&lt;/em&gt;  - &lt;em&gt;Target Release/Build:&lt;/em&gt; similarly, you will need to break it down to &lt;em&gt;Target Release&lt;/em&gt; and &lt;em&gt;Target Build&lt;/em&gt;  - &lt;em&gt;Fixed Release/Build:&lt;/em&gt; similarly, you will need to break it down to &lt;em&gt;Fixed Release&lt;/em&gt; and &lt;em&gt;Fixed Build&lt;/em&gt;  - Subscriber: modify it to Subscribers and use user ID instead of username to query  - You will need to use object Id when querying using these fields: Id, Affected Release, Affected Build, Target Release, Target Build, Fixed Release and Fixed Build  - Modify operator &lt;em&gt;contains&lt;/em&gt; to &lt;em&gt;~&lt;/em&gt;, and modify operator &lt;em&gt;not contains&lt;/em&gt; to &lt;em&gt;!~&lt;/em&gt;. Eg: instead of &lt;em&gt;Name contains \&quot;login\&quot;&lt;/em&gt;, change it to &lt;em&gt;Name ~ \&quot;login\&quot;&lt;/em&gt;  - Modify operator &lt;em&gt;is not empty&lt;/em&gt; to &lt;strong&gt;is &#39;not empty&#39;&lt;/strong&gt;. Eg: Name is &#39;not empty&#39; (required)
     * @param appendTestSteps  (optional)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call search_0Call(Long projectId, ArtifactSearchParams body, Boolean appendTestSteps, Long pageSize, Long page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/search"
            .replaceAll("\\{" + "projectId" + "\\}", qtestApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (appendTestSteps != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("appendTestSteps", appendTestSteps));
        if (pageSize != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("pageSize", pageSize));
        if (page != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("page", page));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call search_0ValidateBeforeCall(Long projectId, ArtifactSearchParams body, Boolean appendTestSteps, Long pageSize, Long page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new QtestApiException("Missing the required parameter 'projectId' when calling search_0(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new QtestApiException("Missing the required parameter 'body' when calling search_0(Async)");
        }
        

        com.squareup.okhttp.Call call = search_0Call(projectId, body, appendTestSteps, pageSize, page, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Queries objects
     * This API mimics the Data Query function of qTest Manager web app. It provides the capability to query Requirements, Test Cases, Test Runs and &lt;em&gt;internal&lt;/em&gt; Defects
     * @param projectId ID of the project (required)
     * @param body &lt;em&gt;object_type (required):&lt;/em&gt; Its value can be &lt;em&gt;requirements&lt;/em&gt;, &lt;em&gt;test-cases&lt;/em&gt;, &lt;em&gt;test-runs&lt;/em&gt;, or &lt;em&gt;defects&lt;/em&gt;  &lt;em&gt;fields:&lt;/em&gt; specify which object fields you want to include in the response. If you omit it or specify an asterisk (*), all fields are included  &lt;em&gt;query:&lt;/em&gt; specify a structured query to search for qTest Manager objects. Basically, you can use the Query Summary text in qTest web app as in the below image for this attribute  &lt;strong&gt;IMPORTANT:&lt;/strong&gt; When using Query Summary to specify the query, you will need to modify the Query Summary in some special cases as below:  - If there are spaces in the criteria name, put it between &#39;&#39; (single quotation marks)  - There need to be spaces between a criteria, operator and value  - You can use field name or field ID in the query  - You can use a value text or its ID in the query  - For date time typed fields: you will need to convert the values to ISO Date Time format  - &lt;em&gt;Affected Release/Build:&lt;/em&gt; if you want to query Defects by their affected release, use &lt;em&gt;Affected Release&lt;/em&gt; instead. Otherwise, use &lt;em&gt;Affected Build&lt;/em&gt;  - &lt;em&gt;Target Release/Build:&lt;/em&gt; similarly, you will need to break it down to &lt;em&gt;Target Release&lt;/em&gt; and &lt;em&gt;Target Build&lt;/em&gt;  - &lt;em&gt;Fixed Release/Build:&lt;/em&gt; similarly, you will need to break it down to &lt;em&gt;Fixed Release&lt;/em&gt; and &lt;em&gt;Fixed Build&lt;/em&gt;  - Subscriber: modify it to Subscribers and use user ID instead of username to query  - You will need to use object Id when querying using these fields: Id, Affected Release, Affected Build, Target Release, Target Build, Fixed Release and Fixed Build  - Modify operator &lt;em&gt;contains&lt;/em&gt; to &lt;em&gt;~&lt;/em&gt;, and modify operator &lt;em&gt;not contains&lt;/em&gt; to &lt;em&gt;!~&lt;/em&gt;. Eg: instead of &lt;em&gt;Name contains \&quot;login\&quot;&lt;/em&gt;, change it to &lt;em&gt;Name ~ \&quot;login\&quot;&lt;/em&gt;  - Modify operator &lt;em&gt;is not empty&lt;/em&gt; to &lt;strong&gt;is &#39;not empty&#39;&lt;/strong&gt;. Eg: Name is &#39;not empty&#39; (required)
     * @param appendTestSteps  (optional)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @return PagedResource
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PagedResource search_0(Long projectId, ArtifactSearchParams body, Boolean appendTestSteps, Long pageSize, Long page) throws QtestApiException {
        ApiResponse<PagedResource> resp = search_0WithHttpInfo(projectId, body, appendTestSteps, pageSize, page);
        return resp.getData();
    }

    /**
     * Queries objects
     * This API mimics the Data Query function of qTest Manager web app. It provides the capability to query Requirements, Test Cases, Test Runs and &lt;em&gt;internal&lt;/em&gt; Defects
     * @param projectId ID of the project (required)
     * @param body &lt;em&gt;object_type (required):&lt;/em&gt; Its value can be &lt;em&gt;requirements&lt;/em&gt;, &lt;em&gt;test-cases&lt;/em&gt;, &lt;em&gt;test-runs&lt;/em&gt;, or &lt;em&gt;defects&lt;/em&gt;  &lt;em&gt;fields:&lt;/em&gt; specify which object fields you want to include in the response. If you omit it or specify an asterisk (*), all fields are included  &lt;em&gt;query:&lt;/em&gt; specify a structured query to search for qTest Manager objects. Basically, you can use the Query Summary text in qTest web app as in the below image for this attribute  &lt;strong&gt;IMPORTANT:&lt;/strong&gt; When using Query Summary to specify the query, you will need to modify the Query Summary in some special cases as below:  - If there are spaces in the criteria name, put it between &#39;&#39; (single quotation marks)  - There need to be spaces between a criteria, operator and value  - You can use field name or field ID in the query  - You can use a value text or its ID in the query  - For date time typed fields: you will need to convert the values to ISO Date Time format  - &lt;em&gt;Affected Release/Build:&lt;/em&gt; if you want to query Defects by their affected release, use &lt;em&gt;Affected Release&lt;/em&gt; instead. Otherwise, use &lt;em&gt;Affected Build&lt;/em&gt;  - &lt;em&gt;Target Release/Build:&lt;/em&gt; similarly, you will need to break it down to &lt;em&gt;Target Release&lt;/em&gt; and &lt;em&gt;Target Build&lt;/em&gt;  - &lt;em&gt;Fixed Release/Build:&lt;/em&gt; similarly, you will need to break it down to &lt;em&gt;Fixed Release&lt;/em&gt; and &lt;em&gt;Fixed Build&lt;/em&gt;  - Subscriber: modify it to Subscribers and use user ID instead of username to query  - You will need to use object Id when querying using these fields: Id, Affected Release, Affected Build, Target Release, Target Build, Fixed Release and Fixed Build  - Modify operator &lt;em&gt;contains&lt;/em&gt; to &lt;em&gt;~&lt;/em&gt;, and modify operator &lt;em&gt;not contains&lt;/em&gt; to &lt;em&gt;!~&lt;/em&gt;. Eg: instead of &lt;em&gt;Name contains \&quot;login\&quot;&lt;/em&gt;, change it to &lt;em&gt;Name ~ \&quot;login\&quot;&lt;/em&gt;  - Modify operator &lt;em&gt;is not empty&lt;/em&gt; to &lt;strong&gt;is &#39;not empty&#39;&lt;/strong&gt;. Eg: Name is &#39;not empty&#39; (required)
     * @param appendTestSteps  (optional)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @return ApiResponse&lt;PagedResource&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PagedResource> search_0WithHttpInfo(Long projectId, ArtifactSearchParams body, Boolean appendTestSteps, Long pageSize, Long page) throws QtestApiException {
        com.squareup.okhttp.Call call = search_0ValidateBeforeCall(projectId, body, appendTestSteps, pageSize, page, null, null);
        Type localVarReturnType = new TypeToken<PagedResource>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Queries objects (asynchronously)
     * This API mimics the Data Query function of qTest Manager web app. It provides the capability to query Requirements, Test Cases, Test Runs and &lt;em&gt;internal&lt;/em&gt; Defects
     * @param projectId ID of the project (required)
     * @param body &lt;em&gt;object_type (required):&lt;/em&gt; Its value can be &lt;em&gt;requirements&lt;/em&gt;, &lt;em&gt;test-cases&lt;/em&gt;, &lt;em&gt;test-runs&lt;/em&gt;, or &lt;em&gt;defects&lt;/em&gt;  &lt;em&gt;fields:&lt;/em&gt; specify which object fields you want to include in the response. If you omit it or specify an asterisk (*), all fields are included  &lt;em&gt;query:&lt;/em&gt; specify a structured query to search for qTest Manager objects. Basically, you can use the Query Summary text in qTest web app as in the below image for this attribute  &lt;strong&gt;IMPORTANT:&lt;/strong&gt; When using Query Summary to specify the query, you will need to modify the Query Summary in some special cases as below:  - If there are spaces in the criteria name, put it between &#39;&#39; (single quotation marks)  - There need to be spaces between a criteria, operator and value  - You can use field name or field ID in the query  - You can use a value text or its ID in the query  - For date time typed fields: you will need to convert the values to ISO Date Time format  - &lt;em&gt;Affected Release/Build:&lt;/em&gt; if you want to query Defects by their affected release, use &lt;em&gt;Affected Release&lt;/em&gt; instead. Otherwise, use &lt;em&gt;Affected Build&lt;/em&gt;  - &lt;em&gt;Target Release/Build:&lt;/em&gt; similarly, you will need to break it down to &lt;em&gt;Target Release&lt;/em&gt; and &lt;em&gt;Target Build&lt;/em&gt;  - &lt;em&gt;Fixed Release/Build:&lt;/em&gt; similarly, you will need to break it down to &lt;em&gt;Fixed Release&lt;/em&gt; and &lt;em&gt;Fixed Build&lt;/em&gt;  - Subscriber: modify it to Subscribers and use user ID instead of username to query  - You will need to use object Id when querying using these fields: Id, Affected Release, Affected Build, Target Release, Target Build, Fixed Release and Fixed Build  - Modify operator &lt;em&gt;contains&lt;/em&gt; to &lt;em&gt;~&lt;/em&gt;, and modify operator &lt;em&gt;not contains&lt;/em&gt; to &lt;em&gt;!~&lt;/em&gt;. Eg: instead of &lt;em&gt;Name contains \&quot;login\&quot;&lt;/em&gt;, change it to &lt;em&gt;Name ~ \&quot;login\&quot;&lt;/em&gt;  - Modify operator &lt;em&gt;is not empty&lt;/em&gt; to &lt;strong&gt;is &#39;not empty&#39;&lt;/strong&gt;. Eg: Name is &#39;not empty&#39; (required)
     * @param appendTestSteps  (optional)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call search_0Async(Long projectId, ArtifactSearchParams body, Boolean appendTestSteps, Long pageSize, Long page, final ApiCallback<PagedResource> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = search_0ValidateBeforeCall(projectId, body, appendTestSteps, pageSize, page, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PagedResource>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
