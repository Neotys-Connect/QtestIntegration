/*
 * qTest Manager API Version 8.6 - 10.2
 * qTest Manager API Version 8.6 - 10.2
 *
 * OpenAPI spec version: 8.6 - 10.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.neotys.qtest.api.client.api;

import com.neotys.qtest.api.client.*;
import com.neotys.qtest.api.client.model.AssignedUsersProject;
import com.neotys.qtest.api.client.QtestApiClient;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.neotys.qtest.api.client.model.AssignedProject;
import com.neotys.qtest.api.client.model.LoggedUser;
import com.neotys.qtest.api.client.model.Message;
import com.neotys.qtest.api.client.model.OutputStream;
import com.neotys.qtest.api.client.model.ProjectWithUserIdsObject;
import com.neotys.qtest.api.client.model.SearchUserResourceExtensionResponse;
import com.neotys.qtest.api.client.model.SearchUserResponse;
import com.neotys.qtest.api.client.model.UserResource;
import com.neotys.qtest.api.client.model.UserUpdateResource;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserApi {
    private QtestApiClient qtestApiClient;

    public UserApi() {
        this(Configuration.getDefaultQtestApiClient());
    }

    public UserApi(QtestApiClient qtestApiClient) {
        this.qtestApiClient = qtestApiClient;
    }

    public QtestApiClient getQtestApiClient() {
        return qtestApiClient;
    }

    public void setQtestApiClient(QtestApiClient qtestApiClient) {
        this.qtestApiClient = qtestApiClient;
    }

    /**
     * Build call for assignToProject
     * @param userId ID of the user. (required)
     * @param body The project ID and the assigned user profile in the project. If the profile is not provided, profile Developer is used by default (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call assignToProjectCall(Long userId, AssignedProject body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v3/users/{userId}/projects"
            .replaceAll("\\{" + "userId" + "\\}", qtestApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call assignToProjectValidateBeforeCall(Long userId, AssignedProject body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new QtestApiException("Missing the required parameter 'userId' when calling assignToProject(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new QtestApiException("Missing the required parameter 'body' when calling assignToProject(Async)");
        }
        

        com.squareup.okhttp.Call call = assignToProjectCall(userId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Assigns a User to a Project
     * To assign a User to a Project
     * @param userId ID of the user. (required)
     * @param body The project ID and the assigned user profile in the project. If the profile is not provided, profile Developer is used by default (required)
     * @return AssignedProject
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AssignedProject assignToProject(Long userId, AssignedProject body) throws QtestApiException {
        ApiResponse<AssignedProject> resp = assignToProjectWithHttpInfo(userId, body);
        return resp.getData();
    }

    /**
     * Assigns a User to a Project
     * To assign a User to a Project
     * @param userId ID of the user. (required)
     * @param body The project ID and the assigned user profile in the project. If the profile is not provided, profile Developer is used by default (required)
     * @return ApiResponse&lt;AssignedProject&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AssignedProject> assignToProjectWithHttpInfo(Long userId, AssignedProject body) throws QtestApiException {
        com.squareup.okhttp.Call call = assignToProjectValidateBeforeCall(userId, body, null, null);
        Type localVarReturnType = new TypeToken<AssignedProject>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Assigns a User to a Project (asynchronously)
     * To assign a User to a Project
     * @param userId ID of the user. (required)
     * @param body The project ID and the assigned user profile in the project. If the profile is not provided, profile Developer is used by default (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call assignToProjectAsync(Long userId, AssignedProject body, final ApiCallback<AssignedProject> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = assignToProjectValidateBeforeCall(userId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AssignedProject>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for assignUsersToProject
     * @param body ID of the Project and an array of assigned Users&#39; IDs. If the profile is not provided, Developer profile is used by default (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call assignUsersToProjectCall(AssignedUsersProject body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v3/users/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call assignUsersToProjectValidateBeforeCall(AssignedUsersProject body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new QtestApiException("Missing the required parameter 'body' when calling assignUsersToProject(Async)");
        }
        

        com.squareup.okhttp.Call call = assignUsersToProjectCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Assigns multiple Users to a Project
     * To assign a list of Users to a Project  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     * @param body ID of the Project and an array of assigned Users&#39; IDs. If the profile is not provided, Developer profile is used by default (required)
     * @return AssignedUsersProject
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AssignedUsersProject assignUsersToProject(AssignedUsersProject body) throws QtestApiException {
        ApiResponse<AssignedUsersProject> resp = assignUsersToProjectWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Assigns multiple Users to a Project
     * To assign a list of Users to a Project  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     * @param body ID of the Project and an array of assigned Users&#39; IDs. If the profile is not provided, Developer profile is used by default (required)
     * @return ApiResponse&lt;AssignedUsersProject&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AssignedUsersProject> assignUsersToProjectWithHttpInfo(AssignedUsersProject body) throws QtestApiException {
        com.squareup.okhttp.Call call = assignUsersToProjectValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<AssignedUsersProject>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Assigns multiple Users to a Project (asynchronously)
     * To assign a list of Users to a Project  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     * @param body ID of the Project and an array of assigned Users&#39; IDs. If the profile is not provided, Developer profile is used by default (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call assignUsersToProjectAsync(AssignedUsersProject body, final ApiCallback<AssignedUsersProject> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = assignUsersToProjectValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AssignedUsersProject>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createUser
     * @param body Invited user&#39;s information  &lt;em&gt;username (require)&lt;/em&gt;: email of new user  &lt;em&gt;email&lt;/em&gt;: recovery email of new user  &lt;em&gt;password&lt;/em&gt;: password of new user. If the password is omitted, the default \&quot;admin123\&quot; will be used  &lt;em&gt;first_name (require)&lt;/em&gt;: First name of new user  &lt;em&gt;last_name (require)&lt;/em&gt;: Last name of new user  &lt;em&gt;user_group_ids&lt;/em&gt;: List usergroup ids will be assigned for new user.  &lt;em&gt;send_activation_email&lt;/em&gt;: activation email will be ignored if this is set to &lt;strong&gt;false&lt;/strong&gt;. Default value is &lt;strong&gt;false&lt;/strong&gt;  &lt;em&gt;external_auth_config_id&lt;/em&gt;: auto assign this new user with External Authentication system by this providing config id here. If this value is provided, &lt;em&gt;\&quot;external_user_name\&quot;&lt;/em&gt; need to have value, or it will failed to create.  &lt;em&gt;external_user_name&lt;/em&gt;: external username that will be assigned to newly created qTest user   &lt;em&gt;include_default_groups&lt;/em&gt;:Include default groups or not. Default value is &lt;strong&gt;false&lt;/strong&gt; (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createUserCall(UserResource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v3/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createUserValidateBeforeCall(UserResource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new QtestApiException("Missing the required parameter 'body' when calling createUser(Async)");
        }
        

        com.squareup.okhttp.Call call = createUserCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Invites a User
     * To invite a user to your qTest Manager instance and activate the account. If the password is omitted, the default \&quot;&lt;em&gt;admin123&lt;/em&gt;\&quot; will be used  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     * @param body Invited user&#39;s information  &lt;em&gt;username (require)&lt;/em&gt;: email of new user  &lt;em&gt;email&lt;/em&gt;: recovery email of new user  &lt;em&gt;password&lt;/em&gt;: password of new user. If the password is omitted, the default \&quot;admin123\&quot; will be used  &lt;em&gt;first_name (require)&lt;/em&gt;: First name of new user  &lt;em&gt;last_name (require)&lt;/em&gt;: Last name of new user  &lt;em&gt;user_group_ids&lt;/em&gt;: List usergroup ids will be assigned for new user.  &lt;em&gt;send_activation_email&lt;/em&gt;: activation email will be ignored if this is set to &lt;strong&gt;false&lt;/strong&gt;. Default value is &lt;strong&gt;false&lt;/strong&gt;  &lt;em&gt;external_auth_config_id&lt;/em&gt;: auto assign this new user with External Authentication system by this providing config id here. If this value is provided, &lt;em&gt;\&quot;external_user_name\&quot;&lt;/em&gt; need to have value, or it will failed to create.  &lt;em&gt;external_user_name&lt;/em&gt;: external username that will be assigned to newly created qTest user   &lt;em&gt;include_default_groups&lt;/em&gt;:Include default groups or not. Default value is &lt;strong&gt;false&lt;/strong&gt; (required)
     * @return UserResource
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserResource createUser(UserResource body) throws QtestApiException {
        ApiResponse<UserResource> resp = createUserWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Invites a User
     * To invite a user to your qTest Manager instance and activate the account. If the password is omitted, the default \&quot;&lt;em&gt;admin123&lt;/em&gt;\&quot; will be used  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     * @param body Invited user&#39;s information  &lt;em&gt;username (require)&lt;/em&gt;: email of new user  &lt;em&gt;email&lt;/em&gt;: recovery email of new user  &lt;em&gt;password&lt;/em&gt;: password of new user. If the password is omitted, the default \&quot;admin123\&quot; will be used  &lt;em&gt;first_name (require)&lt;/em&gt;: First name of new user  &lt;em&gt;last_name (require)&lt;/em&gt;: Last name of new user  &lt;em&gt;user_group_ids&lt;/em&gt;: List usergroup ids will be assigned for new user.  &lt;em&gt;send_activation_email&lt;/em&gt;: activation email will be ignored if this is set to &lt;strong&gt;false&lt;/strong&gt;. Default value is &lt;strong&gt;false&lt;/strong&gt;  &lt;em&gt;external_auth_config_id&lt;/em&gt;: auto assign this new user with External Authentication system by this providing config id here. If this value is provided, &lt;em&gt;\&quot;external_user_name\&quot;&lt;/em&gt; need to have value, or it will failed to create.  &lt;em&gt;external_user_name&lt;/em&gt;: external username that will be assigned to newly created qTest user   &lt;em&gt;include_default_groups&lt;/em&gt;:Include default groups or not. Default value is &lt;strong&gt;false&lt;/strong&gt; (required)
     * @return ApiResponse&lt;UserResource&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserResource> createUserWithHttpInfo(UserResource body) throws QtestApiException {
        com.squareup.okhttp.Call call = createUserValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<UserResource>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Invites a User (asynchronously)
     * To invite a user to your qTest Manager instance and activate the account. If the password is omitted, the default \&quot;&lt;em&gt;admin123&lt;/em&gt;\&quot; will be used  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     * @param body Invited user&#39;s information  &lt;em&gt;username (require)&lt;/em&gt;: email of new user  &lt;em&gt;email&lt;/em&gt;: recovery email of new user  &lt;em&gt;password&lt;/em&gt;: password of new user. If the password is omitted, the default \&quot;admin123\&quot; will be used  &lt;em&gt;first_name (require)&lt;/em&gt;: First name of new user  &lt;em&gt;last_name (require)&lt;/em&gt;: Last name of new user  &lt;em&gt;user_group_ids&lt;/em&gt;: List usergroup ids will be assigned for new user.  &lt;em&gt;send_activation_email&lt;/em&gt;: activation email will be ignored if this is set to &lt;strong&gt;false&lt;/strong&gt;. Default value is &lt;strong&gt;false&lt;/strong&gt;  &lt;em&gt;external_auth_config_id&lt;/em&gt;: auto assign this new user with External Authentication system by this providing config id here. If this value is provided, &lt;em&gt;\&quot;external_user_name\&quot;&lt;/em&gt; need to have value, or it will failed to create.  &lt;em&gt;external_user_name&lt;/em&gt;: external username that will be assigned to newly created qTest user   &lt;em&gt;include_default_groups&lt;/em&gt;:Include default groups or not. Default value is &lt;strong&gt;false&lt;/strong&gt; (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createUserAsync(UserResource body, final ApiCallback<UserResource> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createUserValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserResource>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for findByUserNameOrEmail
     * @param username Login names (qTest login email, LDAP or SSO username) of users you want to query for. The API will return users which have been added to projects whose names contain the text specified in this parameter  &lt;strong&gt;IMPORTANT:&lt;/strong&gt; Login name is case sensitive (optional)
     * @param includeInactiveUsers &lt;em&gt;includeInactiveUsers&#x3D;false&lt;/em&gt; - default value. Inactive users are excluded from the response  &lt;em&gt;includeInactiveUsers&#x3D;true&lt;/em&gt; - inactive users are included in the response (optional)
     * @param pagination &lt;em&gt;pagination&#x3D;true&lt;/em&gt; - default value. The result is paginated  &lt;em&gt;pagination&#x3D;false&lt;/em&gt; - the result is not paginated (optional)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findByUserNameOrEmailCall(String username, Boolean includeInactiveUsers, Boolean pagination, Long page, Long pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/users/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (username != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("username", username));
        if (includeInactiveUsers != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("includeInactiveUsers", includeInactiveUsers));
        if (pagination != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("pagination", pagination));
        if (page != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findByUserNameOrEmailValidateBeforeCall(String username, Boolean includeInactiveUsers, Boolean pagination, Long page, Long pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        

        com.squareup.okhttp.Call call = findByUserNameOrEmailCall(username, includeInactiveUsers, pagination, page, pageSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Queries Users by Username
     * To query for users by their username  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 8.4.2+
     * @param username Login names (qTest login email, LDAP or SSO username) of users you want to query for. The API will return users which have been added to projects whose names contain the text specified in this parameter  &lt;strong&gt;IMPORTANT:&lt;/strong&gt; Login name is case sensitive (optional)
     * @param includeInactiveUsers &lt;em&gt;includeInactiveUsers&#x3D;false&lt;/em&gt; - default value. Inactive users are excluded from the response  &lt;em&gt;includeInactiveUsers&#x3D;true&lt;/em&gt; - inactive users are included in the response (optional)
     * @param pagination &lt;em&gt;pagination&#x3D;true&lt;/em&gt; - default value. The result is paginated  &lt;em&gt;pagination&#x3D;false&lt;/em&gt; - the result is not paginated (optional)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @return SearchUserResourceExtensionResponse
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SearchUserResourceExtensionResponse findByUserNameOrEmail(String username, Boolean includeInactiveUsers, Boolean pagination, Long page, Long pageSize) throws QtestApiException {
        ApiResponse<SearchUserResourceExtensionResponse> resp = findByUserNameOrEmailWithHttpInfo(username, includeInactiveUsers, pagination, page, pageSize);
        return resp.getData();
    }

    /**
     * Queries Users by Username
     * To query for users by their username  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 8.4.2+
     * @param username Login names (qTest login email, LDAP or SSO username) of users you want to query for. The API will return users which have been added to projects whose names contain the text specified in this parameter  &lt;strong&gt;IMPORTANT:&lt;/strong&gt; Login name is case sensitive (optional)
     * @param includeInactiveUsers &lt;em&gt;includeInactiveUsers&#x3D;false&lt;/em&gt; - default value. Inactive users are excluded from the response  &lt;em&gt;includeInactiveUsers&#x3D;true&lt;/em&gt; - inactive users are included in the response (optional)
     * @param pagination &lt;em&gt;pagination&#x3D;true&lt;/em&gt; - default value. The result is paginated  &lt;em&gt;pagination&#x3D;false&lt;/em&gt; - the result is not paginated (optional)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @return ApiResponse&lt;SearchUserResourceExtensionResponse&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SearchUserResourceExtensionResponse> findByUserNameOrEmailWithHttpInfo(String username, Boolean includeInactiveUsers, Boolean pagination, Long page, Long pageSize) throws QtestApiException {
        com.squareup.okhttp.Call call = findByUserNameOrEmailValidateBeforeCall(username, includeInactiveUsers, pagination, page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<SearchUserResourceExtensionResponse>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Queries Users by Username (asynchronously)
     * To query for users by their username  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 8.4.2+
     * @param username Login names (qTest login email, LDAP or SSO username) of users you want to query for. The API will return users which have been added to projects whose names contain the text specified in this parameter  &lt;strong&gt;IMPORTANT:&lt;/strong&gt; Login name is case sensitive (optional)
     * @param includeInactiveUsers &lt;em&gt;includeInactiveUsers&#x3D;false&lt;/em&gt; - default value. Inactive users are excluded from the response  &lt;em&gt;includeInactiveUsers&#x3D;true&lt;/em&gt; - inactive users are included in the response (optional)
     * @param pagination &lt;em&gt;pagination&#x3D;true&lt;/em&gt; - default value. The result is paginated  &lt;em&gt;pagination&#x3D;false&lt;/em&gt; - the result is not paginated (optional)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findByUserNameOrEmailAsync(String username, Boolean includeInactiveUsers, Boolean pagination, Long page, Long pageSize, final ApiCallback<SearchUserResourceExtensionResponse> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findByUserNameOrEmailValidateBeforeCall(username, includeInactiveUsers, pagination, page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SearchUserResourceExtensionResponse>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for findUsersByProjectsName
     * @param projectName Name of the project whose users you want to query for. The API will return users which have been added to projects whose names contain the text specified in this parameter  &lt;strong&gt;IMPORTANT:&lt;/strong&gt; Project name is case sensitive (optional)
     * @param inactive &lt;em&gt;inactive&#x3D;false&lt;/em&gt; - default value. Inactive users are excluded from the response  &lt;em&gt;inactive&#x3D;true&lt;/em&gt; - include inactive users (optional, default to true)
     * @param pagination &lt;em&gt;pagination&#x3D;true&lt;/em&gt; - default value. The result is paginated  &lt;em&gt;pagination&#x3D;false&lt;/em&gt; - the result is not paginated (optional, default to true)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findUsersByProjectsNameCall(String projectName, Boolean inactive, Boolean pagination, Long page, Long pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/search/user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (projectName != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("projectName", projectName));
        if (inactive != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("inactive", inactive));
        if (pagination != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("pagination", pagination));
        if (page != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findUsersByProjectsNameValidateBeforeCall(String projectName, Boolean inactive, Boolean pagination, Long page, Long pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        

        com.squareup.okhttp.Call call = findUsersByProjectsNameCall(projectName, inactive, pagination, page, pageSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Queries Users by Project Name
     * To query for users by names of their assigned projects  - Admin users with &lt;em&gt;Manage Client Users&lt;/em&gt; permission can query users in any projects  - For other users: the API only returns users within projects to which the requesting user is assigned
     * @param projectName Name of the project whose users you want to query for. The API will return users which have been added to projects whose names contain the text specified in this parameter  &lt;strong&gt;IMPORTANT:&lt;/strong&gt; Project name is case sensitive (optional)
     * @param inactive &lt;em&gt;inactive&#x3D;false&lt;/em&gt; - default value. Inactive users are excluded from the response  &lt;em&gt;inactive&#x3D;true&lt;/em&gt; - include inactive users (optional, default to true)
     * @param pagination &lt;em&gt;pagination&#x3D;true&lt;/em&gt; - default value. The result is paginated  &lt;em&gt;pagination&#x3D;false&lt;/em&gt; - the result is not paginated (optional, default to true)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @return SearchUserResponse
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SearchUserResponse findUsersByProjectsName(String projectName, Boolean inactive, Boolean pagination, Long page, Long pageSize) throws QtestApiException {
        ApiResponse<SearchUserResponse> resp = findUsersByProjectsNameWithHttpInfo(projectName, inactive, pagination, page, pageSize);
        return resp.getData();
    }

    /**
     * Queries Users by Project Name
     * To query for users by names of their assigned projects  - Admin users with &lt;em&gt;Manage Client Users&lt;/em&gt; permission can query users in any projects  - For other users: the API only returns users within projects to which the requesting user is assigned
     * @param projectName Name of the project whose users you want to query for. The API will return users which have been added to projects whose names contain the text specified in this parameter  &lt;strong&gt;IMPORTANT:&lt;/strong&gt; Project name is case sensitive (optional)
     * @param inactive &lt;em&gt;inactive&#x3D;false&lt;/em&gt; - default value. Inactive users are excluded from the response  &lt;em&gt;inactive&#x3D;true&lt;/em&gt; - include inactive users (optional, default to true)
     * @param pagination &lt;em&gt;pagination&#x3D;true&lt;/em&gt; - default value. The result is paginated  &lt;em&gt;pagination&#x3D;false&lt;/em&gt; - the result is not paginated (optional, default to true)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @return ApiResponse&lt;SearchUserResponse&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SearchUserResponse> findUsersByProjectsNameWithHttpInfo(String projectName, Boolean inactive, Boolean pagination, Long page, Long pageSize) throws QtestApiException {
        com.squareup.okhttp.Call call = findUsersByProjectsNameValidateBeforeCall(projectName, inactive, pagination, page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<SearchUserResponse>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Queries Users by Project Name (asynchronously)
     * To query for users by names of their assigned projects  - Admin users with &lt;em&gt;Manage Client Users&lt;/em&gt; permission can query users in any projects  - For other users: the API only returns users within projects to which the requesting user is assigned
     * @param projectName Name of the project whose users you want to query for. The API will return users which have been added to projects whose names contain the text specified in this parameter  &lt;strong&gt;IMPORTANT:&lt;/strong&gt; Project name is case sensitive (optional)
     * @param inactive &lt;em&gt;inactive&#x3D;false&lt;/em&gt; - default value. Inactive users are excluded from the response  &lt;em&gt;inactive&#x3D;true&lt;/em&gt; - include inactive users (optional, default to true)
     * @param pagination &lt;em&gt;pagination&#x3D;true&lt;/em&gt; - default value. The result is paginated  &lt;em&gt;pagination&#x3D;false&lt;/em&gt; - the result is not paginated (optional, default to true)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findUsersByProjectsNameAsync(String projectName, Boolean inactive, Boolean pagination, Long page, Long pageSize, final ApiCallback<SearchUserResponse> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findUsersByProjectsNameValidateBeforeCall(projectName, inactive, pagination, page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SearchUserResponse>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAvatar
     * @param userId ID of the user. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAvatarCall(Long userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/users/{userId}/avatar"
            .replaceAll("\\{" + "userId" + "\\}", qtestApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAvatarValidateBeforeCall(Long userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new QtestApiException("Missing the required parameter 'userId' when calling getAvatar(Async)");
        }
        

        com.squareup.okhttp.Call call = getAvatarCall(userId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets a User&#39;s Avatar
     * To retrieve a User&#39;s Avatar
     * @param userId ID of the user. (required)
     * @return OutputStream
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OutputStream getAvatar(Long userId) throws QtestApiException {
        ApiResponse<OutputStream> resp = getAvatarWithHttpInfo(userId);
        return resp.getData();
    }

    /**
     * Gets a User&#39;s Avatar
     * To retrieve a User&#39;s Avatar
     * @param userId ID of the user. (required)
     * @return ApiResponse&lt;OutputStream&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OutputStream> getAvatarWithHttpInfo(Long userId) throws QtestApiException {
        com.squareup.okhttp.Call call = getAvatarValidateBeforeCall(userId, null, null);
        Type localVarReturnType = new TypeToken<OutputStream>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a User&#39;s Avatar (asynchronously)
     * To retrieve a User&#39;s Avatar
     * @param userId ID of the user. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAvatarAsync(Long userId, final ApiCallback<OutputStream> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAvatarValidateBeforeCall(userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OutputStream>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUserById
     * @param userId ID of the user. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUserByIdCall(Long userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/users/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", qtestApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserByIdValidateBeforeCall(Long userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new QtestApiException("Missing the required parameter 'userId' when calling getUserById(Async)");
        }
        

        com.squareup.okhttp.Call call = getUserByIdCall(userId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets a User
     * To retrieve a User&#39;s information
     * @param userId ID of the user. (required)
     * @return UserResource
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserResource getUserById(Long userId) throws QtestApiException {
        ApiResponse<UserResource> resp = getUserByIdWithHttpInfo(userId);
        return resp.getData();
    }

    /**
     * Gets a User
     * To retrieve a User&#39;s information
     * @param userId ID of the user. (required)
     * @return ApiResponse&lt;UserResource&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserResource> getUserByIdWithHttpInfo(Long userId) throws QtestApiException {
        com.squareup.okhttp.Call call = getUserByIdValidateBeforeCall(userId, null, null);
        Type localVarReturnType = new TypeToken<UserResource>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a User (asynchronously)
     * To retrieve a User&#39;s information
     * @param userId ID of the user. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserByIdAsync(Long userId, final ApiCallback<UserResource> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserByIdValidateBeforeCall(userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserResource>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for reevaluateToken
     * @param includeInaccessibleApps  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call reevaluateTokenCall(Boolean includeInaccessibleApps, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/re-evaluation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (includeInaccessibleApps != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("includeInaccessibleApps", includeInaccessibleApps));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call reevaluateTokenValidateBeforeCall(Boolean includeInaccessibleApps, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        

        com.squareup.okhttp.Call call = reevaluateTokenCall(includeInaccessibleApps, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets current user&#39;s information
     * To retrieve your information such as username, email, first name, and last name
     * @param includeInaccessibleApps  (optional)
     * @return LoggedUser
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LoggedUser reevaluateToken(Boolean includeInaccessibleApps) throws QtestApiException {
        ApiResponse<LoggedUser> resp = reevaluateTokenWithHttpInfo(includeInaccessibleApps);
        return resp.getData();
    }

    /**
     * Gets current user&#39;s information
     * To retrieve your information such as username, email, first name, and last name
     * @param includeInaccessibleApps  (optional)
     * @return ApiResponse&lt;LoggedUser&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LoggedUser> reevaluateTokenWithHttpInfo(Boolean includeInaccessibleApps) throws QtestApiException {
        com.squareup.okhttp.Call call = reevaluateTokenValidateBeforeCall(includeInaccessibleApps, null, null);
        Type localVarReturnType = new TypeToken<LoggedUser>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets current user&#39;s information (asynchronously)
     * To retrieve your information such as username, email, first name, and last name
     * @param includeInaccessibleApps  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call reevaluateTokenAsync(Boolean includeInaccessibleApps, final ApiCallback<LoggedUser> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = reevaluateTokenValidateBeforeCall(includeInaccessibleApps, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LoggedUser>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeAssociationUsersAndProjects
     * @param body An array of pairs project_id and user_ids   &lt;em&gt;project_id:&lt;/em&gt; ID of the project  &lt;em&gt;user_ids: &lt;/em&gt; List of User IDs which are being removed from the project (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeAssociationUsersAndProjectsCall(List<ProjectWithUserIdsObject> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v3/users/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeAssociationUsersAndProjectsValidateBeforeCall(List<ProjectWithUserIdsObject> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new QtestApiException("Missing the required parameter 'body' when calling removeAssociationUsersAndProjects(Async)");
        }
        

        com.squareup.okhttp.Call call = removeAssociationUsersAndProjectsCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Remove association between users and projects
     * To remove association between users and projects
     * @param body An array of pairs project_id and user_ids   &lt;em&gt;project_id:&lt;/em&gt; ID of the project  &lt;em&gt;user_ids: &lt;/em&gt; List of User IDs which are being removed from the project (required)
     * @return Message
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Message removeAssociationUsersAndProjects(List<ProjectWithUserIdsObject> body) throws QtestApiException {
        ApiResponse<Message> resp = removeAssociationUsersAndProjectsWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Remove association between users and projects
     * To remove association between users and projects
     * @param body An array of pairs project_id and user_ids   &lt;em&gt;project_id:&lt;/em&gt; ID of the project  &lt;em&gt;user_ids: &lt;/em&gt; List of User IDs which are being removed from the project (required)
     * @return ApiResponse&lt;Message&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Message> removeAssociationUsersAndProjectsWithHttpInfo(List<ProjectWithUserIdsObject> body) throws QtestApiException {
        com.squareup.okhttp.Call call = removeAssociationUsersAndProjectsValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<Message>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Remove association between users and projects (asynchronously)
     * To remove association between users and projects
     * @param body An array of pairs project_id and user_ids   &lt;em&gt;project_id:&lt;/em&gt; ID of the project  &lt;em&gt;user_ids: &lt;/em&gt; List of User IDs which are being removed from the project (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeAssociationUsersAndProjectsAsync(List<ProjectWithUserIdsObject> body, final ApiCallback<Message> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeAssociationUsersAndProjectsValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Message>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateUser
     * @param userId ID of the user. (required)
     * @param body Update user&#39;s information  &lt;em&gt;email&lt;/em&gt;: New recovery email of user  &lt;em&gt;password&lt;/em&gt;: New password of user. Password have to map with password policy of current user&#39;s client  &lt;em&gt;first_name&lt;/em&gt;: New first name of user  &lt;em&gt;last_name&lt;/em&gt;: New last name of user  &lt;em&gt;user_group_ids&lt;/em&gt;: List usergroup ids will be assigned for user (old usergroup ids will be replaced).  &lt;em&gt;external_auth_config_id&lt;/em&gt;: New user&#39;s external authenticate id,it will auto assign this user with External Authentication system by this providing config id here. If this value is provided, &lt;em&gt;\&quot;external_user_name\&quot;&lt;/em&gt; need to have value, or it will failed to update. For internal authentication system input : &lt;strong&gt;-1&lt;/strong&gt;  &lt;em&gt;external_user_name&lt;/em&gt;: external username that will be assigned to user (if LDAP external is specified, \&quot;first_name\&quot; and \&quot;last_name\&quot; will be fetch from LDAP system).  &lt;em&gt;status&lt;/em&gt;: New status id of user. Status id must be &lt;strong&gt;1&lt;/strong&gt; for Active or &lt;strong&gt;3&lt;/strong&gt; for Inactive status. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateUserCall(Long userId, UserUpdateResource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v3/users/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", qtestApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateUserValidateBeforeCall(Long userId, UserUpdateResource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new QtestApiException("Missing the required parameter 'userId' when calling updateUser(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new QtestApiException("Missing the required parameter 'body' when calling updateUser(Async)");
        }
        

        com.squareup.okhttp.Call call = updateUserCall(userId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update user&#39;s information
     * To update information of a user, like : recovery email, password, status...
     * @param userId ID of the user. (required)
     * @param body Update user&#39;s information  &lt;em&gt;email&lt;/em&gt;: New recovery email of user  &lt;em&gt;password&lt;/em&gt;: New password of user. Password have to map with password policy of current user&#39;s client  &lt;em&gt;first_name&lt;/em&gt;: New first name of user  &lt;em&gt;last_name&lt;/em&gt;: New last name of user  &lt;em&gt;user_group_ids&lt;/em&gt;: List usergroup ids will be assigned for user (old usergroup ids will be replaced).  &lt;em&gt;external_auth_config_id&lt;/em&gt;: New user&#39;s external authenticate id,it will auto assign this user with External Authentication system by this providing config id here. If this value is provided, &lt;em&gt;\&quot;external_user_name\&quot;&lt;/em&gt; need to have value, or it will failed to update. For internal authentication system input : &lt;strong&gt;-1&lt;/strong&gt;  &lt;em&gt;external_user_name&lt;/em&gt;: external username that will be assigned to user (if LDAP external is specified, \&quot;first_name\&quot; and \&quot;last_name\&quot; will be fetch from LDAP system).  &lt;em&gt;status&lt;/em&gt;: New status id of user. Status id must be &lt;strong&gt;1&lt;/strong&gt; for Active or &lt;strong&gt;3&lt;/strong&gt; for Inactive status. (required)
     * @return UserResource
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserResource updateUser(Long userId, UserUpdateResource body) throws QtestApiException {
        ApiResponse<UserResource> resp = updateUserWithHttpInfo(userId, body);
        return resp.getData();
    }

    /**
     * Update user&#39;s information
     * To update information of a user, like : recovery email, password, status...
     * @param userId ID of the user. (required)
     * @param body Update user&#39;s information  &lt;em&gt;email&lt;/em&gt;: New recovery email of user  &lt;em&gt;password&lt;/em&gt;: New password of user. Password have to map with password policy of current user&#39;s client  &lt;em&gt;first_name&lt;/em&gt;: New first name of user  &lt;em&gt;last_name&lt;/em&gt;: New last name of user  &lt;em&gt;user_group_ids&lt;/em&gt;: List usergroup ids will be assigned for user (old usergroup ids will be replaced).  &lt;em&gt;external_auth_config_id&lt;/em&gt;: New user&#39;s external authenticate id,it will auto assign this user with External Authentication system by this providing config id here. If this value is provided, &lt;em&gt;\&quot;external_user_name\&quot;&lt;/em&gt; need to have value, or it will failed to update. For internal authentication system input : &lt;strong&gt;-1&lt;/strong&gt;  &lt;em&gt;external_user_name&lt;/em&gt;: external username that will be assigned to user (if LDAP external is specified, \&quot;first_name\&quot; and \&quot;last_name\&quot; will be fetch from LDAP system).  &lt;em&gt;status&lt;/em&gt;: New status id of user. Status id must be &lt;strong&gt;1&lt;/strong&gt; for Active or &lt;strong&gt;3&lt;/strong&gt; for Inactive status. (required)
     * @return ApiResponse&lt;UserResource&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserResource> updateUserWithHttpInfo(Long userId, UserUpdateResource body) throws QtestApiException {
        com.squareup.okhttp.Call call = updateUserValidateBeforeCall(userId, body, null, null);
        Type localVarReturnType = new TypeToken<UserResource>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Update user&#39;s information (asynchronously)
     * To update information of a user, like : recovery email, password, status...
     * @param userId ID of the user. (required)
     * @param body Update user&#39;s information  &lt;em&gt;email&lt;/em&gt;: New recovery email of user  &lt;em&gt;password&lt;/em&gt;: New password of user. Password have to map with password policy of current user&#39;s client  &lt;em&gt;first_name&lt;/em&gt;: New first name of user  &lt;em&gt;last_name&lt;/em&gt;: New last name of user  &lt;em&gt;user_group_ids&lt;/em&gt;: List usergroup ids will be assigned for user (old usergroup ids will be replaced).  &lt;em&gt;external_auth_config_id&lt;/em&gt;: New user&#39;s external authenticate id,it will auto assign this user with External Authentication system by this providing config id here. If this value is provided, &lt;em&gt;\&quot;external_user_name\&quot;&lt;/em&gt; need to have value, or it will failed to update. For internal authentication system input : &lt;strong&gt;-1&lt;/strong&gt;  &lt;em&gt;external_user_name&lt;/em&gt;: external username that will be assigned to user (if LDAP external is specified, \&quot;first_name\&quot; and \&quot;last_name\&quot; will be fetch from LDAP system).  &lt;em&gt;status&lt;/em&gt;: New status id of user. Status id must be &lt;strong&gt;1&lt;/strong&gt; for Active or &lt;strong&gt;3&lt;/strong&gt; for Inactive status. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateUserAsync(Long userId, UserUpdateResource body, final ApiCallback<UserResource> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateUserValidateBeforeCall(userId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserResource>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
