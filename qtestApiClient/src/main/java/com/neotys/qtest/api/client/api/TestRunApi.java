/*
 * qTest Manager API Version 8.6 - 10.2
 * qTest Manager API Version 8.6 - 10.2
 *
 * OpenAPI spec version: 8.6 - 10.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.neotys.qtest.api.client.api;

import com.neotys.qtest.api.client.*;
import com.neotys.qtest.api.client.model.PagedResourceCommentResource;
import com.neotys.qtest.api.client.model.StatusResource;
import com.neotys.qtest.api.client.model.TestRunWithCustomFieldResource;
import com.neotys.qtest.api.client.QtestApiClient;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.neotys.qtest.api.client.model.AutomationObjectTree;
import com.neotys.qtest.api.client.model.CommentResource;
import com.neotys.qtest.api.client.model.Message;
import com.neotys.qtest.api.client.model.QueueProcessingResponseTestRunDataVM;
import com.neotys.qtest.api.client.model.TestRunListResource;
import com.neotys.qtest.api.client.model.TestRunWithParameterCreateByDatasetResource;
import com.neotys.qtest.api.client.model.TestRunWithParameterCreateManualResource;
import com.neotys.qtest.api.client.model.TestRunWithParameterCreateRandomResource;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TestRunApi {
    private QtestApiClient qtestApiClient;

    public TestRunApi() {
        this(Configuration.getDefaultQtestApiClient());
    }

    public TestRunApi(QtestApiClient qtestApiClient) {
        this.qtestApiClient = qtestApiClient;
    }

    public QtestApiClient getQtestApiClient() {
        return qtestApiClient;
    }

    public void setQtestApiClient(QtestApiClient qtestApiClient) {
        this.qtestApiClient = qtestApiClient;
    }

    /**
     * Build call for addComment
     * @param projectId ID of the project (required)
     * @param idOrKey The PID or ID of the Test Run. (required)
     * @param body The Comment&#39;s content (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addCommentCall(Long projectId, String idOrKey, CommentResource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-runs/{idOrKey}/comments"
            .replaceAll("\\{" + "projectId" + "\\}", qtestApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "idOrKey" + "\\}", qtestApiClient.escapeString(idOrKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addCommentValidateBeforeCall(Long projectId, String idOrKey, CommentResource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new QtestApiException("Missing the required parameter 'projectId' when calling addComment(Async)");
        }
        
        // verify the required parameter 'idOrKey' is set
        if (idOrKey == null) {
            throw new QtestApiException("Missing the required parameter 'idOrKey' when calling addComment(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new QtestApiException("Missing the required parameter 'body' when calling addComment(Async)");
        }
        

        com.squareup.okhttp.Call call = addCommentCall(projectId, idOrKey, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Adds a Comment to a Test Run
     * To add a Comment to a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey The PID or ID of the Test Run. (required)
     * @param body The Comment&#39;s content (required)
     * @return CommentResource
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CommentResource addComment(Long projectId, String idOrKey, CommentResource body) throws QtestApiException {
        ApiResponse<CommentResource> resp = addCommentWithHttpInfo(projectId, idOrKey, body);
        return resp.getData();
    }

    /**
     * Adds a Comment to a Test Run
     * To add a Comment to a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey The PID or ID of the Test Run. (required)
     * @param body The Comment&#39;s content (required)
     * @return ApiResponse&lt;CommentResource&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CommentResource> addCommentWithHttpInfo(Long projectId, String idOrKey, CommentResource body) throws QtestApiException {
        com.squareup.okhttp.Call call = addCommentValidateBeforeCall(projectId, idOrKey, body, null, null);
        Type localVarReturnType = new TypeToken<CommentResource>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Adds a Comment to a Test Run (asynchronously)
     * To add a Comment to a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey The PID or ID of the Test Run. (required)
     * @param body The Comment&#39;s content (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addCommentAsync(Long projectId, String idOrKey, CommentResource body, final ApiCallback<CommentResource> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addCommentValidateBeforeCall(projectId, idOrKey, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CommentResource>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addTestRunWithParameters
     * @param projectId ID of the project (required)
     * @param body The Test Run&#39;s properties, its associated Test Case and list of Test runs   &lt;em&gt;name (optional):&lt;/em&gt; All test runs will be created with the same name if provided. If not provided, test run name &#x3D; test case name + [increased number, starting from 1]   &lt;em&gt;properties (optional):&lt;/em&gt; All test runs will be created with the same property list if provided. If not provided, default property values will be used.   &lt;strong&gt;test_case attributes:&lt;/strong&gt;  &lt;em&gt;id (required):&lt;/em&gt; id of testcase   &lt;em&gt;test_case_version_id (optional):&lt;/em&gt; Version ID of Testcase. If not specify, latest value will be used. For shared test case, only accept approved version   &lt;em&gt;test_runs (required):&lt;/em&gt; list of test runs will be created by this API. For each test run, it will have list of test steps (by providing test step id) and their parameter_values for each step.   &lt;strong&gt;You no need to specify &lt;em&gt;combined_type&lt;/em&gt; and &lt;em&gt;number_of_combinations&lt;/em&gt; in this api.&lt;strong&gt; (required)
     * @param parentId ID of the container  Input 0 (zero) to get Test Runs directly under root (optional)
     * @param parentType Type of the container. Valid values include &lt;em&gt;root&lt;/em&gt;, &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt;, and &lt;em&gt;test-suite&lt;/em&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addTestRunWithParametersCall(Long projectId, TestRunWithParameterCreateManualResource body, Long parentId, String parentType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-runs/assign-parameter-values/manually"
            .replaceAll("\\{" + "projectId" + "\\}", qtestApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (parentId != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("parentId", parentId));
        if (parentType != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("parentType", parentType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addTestRunWithParametersValidateBeforeCall(Long projectId, TestRunWithParameterCreateManualResource body, Long parentId, String parentType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new QtestApiException("Missing the required parameter 'projectId' when calling addTestRunWithParameters(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new QtestApiException("Missing the required parameter 'body' when calling addTestRunWithParameters(Async)");
        }
        

        com.squareup.okhttp.Call call = addTestRunWithParametersCall(projectId, body, parentId, parentType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create multiple Test Runs with Parameter values manual
     * To create multiple Test Runs with parameter values under root or a container (Release, Test Cycle or Test Suite). Maximum number of test runs can be created is 100.
     * @param projectId ID of the project (required)
     * @param body The Test Run&#39;s properties, its associated Test Case and list of Test runs   &lt;em&gt;name (optional):&lt;/em&gt; All test runs will be created with the same name if provided. If not provided, test run name &#x3D; test case name + [increased number, starting from 1]   &lt;em&gt;properties (optional):&lt;/em&gt; All test runs will be created with the same property list if provided. If not provided, default property values will be used.   &lt;strong&gt;test_case attributes:&lt;/strong&gt;  &lt;em&gt;id (required):&lt;/em&gt; id of testcase   &lt;em&gt;test_case_version_id (optional):&lt;/em&gt; Version ID of Testcase. If not specify, latest value will be used. For shared test case, only accept approved version   &lt;em&gt;test_runs (required):&lt;/em&gt; list of test runs will be created by this API. For each test run, it will have list of test steps (by providing test step id) and their parameter_values for each step.   &lt;strong&gt;You no need to specify &lt;em&gt;combined_type&lt;/em&gt; and &lt;em&gt;number_of_combinations&lt;/em&gt; in this api.&lt;strong&gt; (required)
     * @param parentId ID of the container  Input 0 (zero) to get Test Runs directly under root (optional)
     * @param parentType Type of the container. Valid values include &lt;em&gt;root&lt;/em&gt;, &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt;, and &lt;em&gt;test-suite&lt;/em&gt; (optional)
     * @return QueueProcessingResponseTestRunDataVM
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QueueProcessingResponseTestRunDataVM addTestRunWithParameters(Long projectId, TestRunWithParameterCreateManualResource body, Long parentId, String parentType) throws QtestApiException {
        ApiResponse<QueueProcessingResponseTestRunDataVM> resp = addTestRunWithParametersWithHttpInfo(projectId, body, parentId, parentType);
        return resp.getData();
    }

    /**
     * Create multiple Test Runs with Parameter values manual
     * To create multiple Test Runs with parameter values under root or a container (Release, Test Cycle or Test Suite). Maximum number of test runs can be created is 100.
     * @param projectId ID of the project (required)
     * @param body The Test Run&#39;s properties, its associated Test Case and list of Test runs   &lt;em&gt;name (optional):&lt;/em&gt; All test runs will be created with the same name if provided. If not provided, test run name &#x3D; test case name + [increased number, starting from 1]   &lt;em&gt;properties (optional):&lt;/em&gt; All test runs will be created with the same property list if provided. If not provided, default property values will be used.   &lt;strong&gt;test_case attributes:&lt;/strong&gt;  &lt;em&gt;id (required):&lt;/em&gt; id of testcase   &lt;em&gt;test_case_version_id (optional):&lt;/em&gt; Version ID of Testcase. If not specify, latest value will be used. For shared test case, only accept approved version   &lt;em&gt;test_runs (required):&lt;/em&gt; list of test runs will be created by this API. For each test run, it will have list of test steps (by providing test step id) and their parameter_values for each step.   &lt;strong&gt;You no need to specify &lt;em&gt;combined_type&lt;/em&gt; and &lt;em&gt;number_of_combinations&lt;/em&gt; in this api.&lt;strong&gt; (required)
     * @param parentId ID of the container  Input 0 (zero) to get Test Runs directly under root (optional)
     * @param parentType Type of the container. Valid values include &lt;em&gt;root&lt;/em&gt;, &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt;, and &lt;em&gt;test-suite&lt;/em&gt; (optional)
     * @return ApiResponse&lt;QueueProcessingResponseTestRunDataVM&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QueueProcessingResponseTestRunDataVM> addTestRunWithParametersWithHttpInfo(Long projectId, TestRunWithParameterCreateManualResource body, Long parentId, String parentType) throws QtestApiException {
        com.squareup.okhttp.Call call = addTestRunWithParametersValidateBeforeCall(projectId, body, parentId, parentType, null, null);
        Type localVarReturnType = new TypeToken<QueueProcessingResponseTestRunDataVM>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Create multiple Test Runs with Parameter values manual (asynchronously)
     * To create multiple Test Runs with parameter values under root or a container (Release, Test Cycle or Test Suite). Maximum number of test runs can be created is 100.
     * @param projectId ID of the project (required)
     * @param body The Test Run&#39;s properties, its associated Test Case and list of Test runs   &lt;em&gt;name (optional):&lt;/em&gt; All test runs will be created with the same name if provided. If not provided, test run name &#x3D; test case name + [increased number, starting from 1]   &lt;em&gt;properties (optional):&lt;/em&gt; All test runs will be created with the same property list if provided. If not provided, default property values will be used.   &lt;strong&gt;test_case attributes:&lt;/strong&gt;  &lt;em&gt;id (required):&lt;/em&gt; id of testcase   &lt;em&gt;test_case_version_id (optional):&lt;/em&gt; Version ID of Testcase. If not specify, latest value will be used. For shared test case, only accept approved version   &lt;em&gt;test_runs (required):&lt;/em&gt; list of test runs will be created by this API. For each test run, it will have list of test steps (by providing test step id) and their parameter_values for each step.   &lt;strong&gt;You no need to specify &lt;em&gt;combined_type&lt;/em&gt; and &lt;em&gt;number_of_combinations&lt;/em&gt; in this api.&lt;strong&gt; (required)
     * @param parentId ID of the container  Input 0 (zero) to get Test Runs directly under root (optional)
     * @param parentType Type of the container. Valid values include &lt;em&gt;root&lt;/em&gt;, &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt;, and &lt;em&gt;test-suite&lt;/em&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addTestRunWithParametersAsync(Long projectId, TestRunWithParameterCreateManualResource body, Long parentId, String parentType, final ApiCallback<QueueProcessingResponseTestRunDataVM> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addTestRunWithParametersValidateBeforeCall(projectId, body, parentId, parentType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QueueProcessingResponseTestRunDataVM>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addTestRunWithParametersDataset
     * @param projectId ID of the project (required)
     * @param body The Test Run&#39;s properties, its associated Test Case and specific data set   &lt;em&gt;name (optional):&lt;/em&gt; All test runs will be created with the same name if provided. If not provided, test run name &#x3D; test case name + [increased number, starting from 1]   &lt;em&gt;properties (optional):&lt;/em&gt; All test runs will be created with the same property list if provided. If not provided, default property values will be used.   &lt;strong&gt;test_case attributes:&lt;/strong&gt;  &lt;em&gt;id (required):&lt;/em&gt; id of testcase   &lt;em&gt;test_case_version_id (optional):&lt;/em&gt; Version ID of Testcase. If not specify, latest value will be used. For shared test case, only accept approved version   &lt;em&gt;dataset_id:&lt;/em&gt; Dataset id use for generate test runs. Dataset must be active and contains all parameters inside all test case steps. Dataset has at least 1 data row.   &lt;em&gt;from_row:&lt;/em&gt; Must be less or equal max rows in dataset.   &lt;em&gt;number_of_rows:&lt;/em&gt; number of test run can be create must be less or equal ((max rows - from_row) +1) and must be less than &lt;em&gt;100&lt;/em&gt;. (required)
     * @param parentId ID of the container  Input 0 (zero) to get Test Runs directly under root (optional)
     * @param parentType Type of the container. Valid values include &lt;em&gt;root&lt;/em&gt;, &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt;, and &lt;em&gt;test-suite&lt;/em&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addTestRunWithParametersDatasetCall(Long projectId, TestRunWithParameterCreateByDatasetResource body, Long parentId, String parentType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-runs/assign-parameter-values/dataset"
            .replaceAll("\\{" + "projectId" + "\\}", qtestApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (parentId != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("parentId", parentId));
        if (parentType != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("parentType", parentType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addTestRunWithParametersDatasetValidateBeforeCall(Long projectId, TestRunWithParameterCreateByDatasetResource body, Long parentId, String parentType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new QtestApiException("Missing the required parameter 'projectId' when calling addTestRunWithParametersDataset(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new QtestApiException("Missing the required parameter 'body' when calling addTestRunWithParametersDataset(Async)");
        }
        

        com.squareup.okhttp.Call call = addTestRunWithParametersDatasetCall(projectId, body, parentId, parentType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create multiple Test Runs with Parameter values from dataset.
     * To create multiple Test Runs with parameter values under root or a container (Release, Test Cycle or Test Suite). Number of test runs can be created depend on number_of_rows property and it should not more than 100.
     * @param projectId ID of the project (required)
     * @param body The Test Run&#39;s properties, its associated Test Case and specific data set   &lt;em&gt;name (optional):&lt;/em&gt; All test runs will be created with the same name if provided. If not provided, test run name &#x3D; test case name + [increased number, starting from 1]   &lt;em&gt;properties (optional):&lt;/em&gt; All test runs will be created with the same property list if provided. If not provided, default property values will be used.   &lt;strong&gt;test_case attributes:&lt;/strong&gt;  &lt;em&gt;id (required):&lt;/em&gt; id of testcase   &lt;em&gt;test_case_version_id (optional):&lt;/em&gt; Version ID of Testcase. If not specify, latest value will be used. For shared test case, only accept approved version   &lt;em&gt;dataset_id:&lt;/em&gt; Dataset id use for generate test runs. Dataset must be active and contains all parameters inside all test case steps. Dataset has at least 1 data row.   &lt;em&gt;from_row:&lt;/em&gt; Must be less or equal max rows in dataset.   &lt;em&gt;number_of_rows:&lt;/em&gt; number of test run can be create must be less or equal ((max rows - from_row) +1) and must be less than &lt;em&gt;100&lt;/em&gt;. (required)
     * @param parentId ID of the container  Input 0 (zero) to get Test Runs directly under root (optional)
     * @param parentType Type of the container. Valid values include &lt;em&gt;root&lt;/em&gt;, &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt;, and &lt;em&gt;test-suite&lt;/em&gt; (optional)
     * @return QueueProcessingResponseTestRunDataVM
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QueueProcessingResponseTestRunDataVM addTestRunWithParametersDataset(Long projectId, TestRunWithParameterCreateByDatasetResource body, Long parentId, String parentType) throws QtestApiException {
        ApiResponse<QueueProcessingResponseTestRunDataVM> resp = addTestRunWithParametersDatasetWithHttpInfo(projectId, body, parentId, parentType);
        return resp.getData();
    }

    /**
     * Create multiple Test Runs with Parameter values from dataset.
     * To create multiple Test Runs with parameter values under root or a container (Release, Test Cycle or Test Suite). Number of test runs can be created depend on number_of_rows property and it should not more than 100.
     * @param projectId ID of the project (required)
     * @param body The Test Run&#39;s properties, its associated Test Case and specific data set   &lt;em&gt;name (optional):&lt;/em&gt; All test runs will be created with the same name if provided. If not provided, test run name &#x3D; test case name + [increased number, starting from 1]   &lt;em&gt;properties (optional):&lt;/em&gt; All test runs will be created with the same property list if provided. If not provided, default property values will be used.   &lt;strong&gt;test_case attributes:&lt;/strong&gt;  &lt;em&gt;id (required):&lt;/em&gt; id of testcase   &lt;em&gt;test_case_version_id (optional):&lt;/em&gt; Version ID of Testcase. If not specify, latest value will be used. For shared test case, only accept approved version   &lt;em&gt;dataset_id:&lt;/em&gt; Dataset id use for generate test runs. Dataset must be active and contains all parameters inside all test case steps. Dataset has at least 1 data row.   &lt;em&gt;from_row:&lt;/em&gt; Must be less or equal max rows in dataset.   &lt;em&gt;number_of_rows:&lt;/em&gt; number of test run can be create must be less or equal ((max rows - from_row) +1) and must be less than &lt;em&gt;100&lt;/em&gt;. (required)
     * @param parentId ID of the container  Input 0 (zero) to get Test Runs directly under root (optional)
     * @param parentType Type of the container. Valid values include &lt;em&gt;root&lt;/em&gt;, &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt;, and &lt;em&gt;test-suite&lt;/em&gt; (optional)
     * @return ApiResponse&lt;QueueProcessingResponseTestRunDataVM&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QueueProcessingResponseTestRunDataVM> addTestRunWithParametersDatasetWithHttpInfo(Long projectId, TestRunWithParameterCreateByDatasetResource body, Long parentId, String parentType) throws QtestApiException {
        com.squareup.okhttp.Call call = addTestRunWithParametersDatasetValidateBeforeCall(projectId, body, parentId, parentType, null, null);
        Type localVarReturnType = new TypeToken<QueueProcessingResponseTestRunDataVM>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Create multiple Test Runs with Parameter values from dataset. (asynchronously)
     * To create multiple Test Runs with parameter values under root or a container (Release, Test Cycle or Test Suite). Number of test runs can be created depend on number_of_rows property and it should not more than 100.
     * @param projectId ID of the project (required)
     * @param body The Test Run&#39;s properties, its associated Test Case and specific data set   &lt;em&gt;name (optional):&lt;/em&gt; All test runs will be created with the same name if provided. If not provided, test run name &#x3D; test case name + [increased number, starting from 1]   &lt;em&gt;properties (optional):&lt;/em&gt; All test runs will be created with the same property list if provided. If not provided, default property values will be used.   &lt;strong&gt;test_case attributes:&lt;/strong&gt;  &lt;em&gt;id (required):&lt;/em&gt; id of testcase   &lt;em&gt;test_case_version_id (optional):&lt;/em&gt; Version ID of Testcase. If not specify, latest value will be used. For shared test case, only accept approved version   &lt;em&gt;dataset_id:&lt;/em&gt; Dataset id use for generate test runs. Dataset must be active and contains all parameters inside all test case steps. Dataset has at least 1 data row.   &lt;em&gt;from_row:&lt;/em&gt; Must be less or equal max rows in dataset.   &lt;em&gt;number_of_rows:&lt;/em&gt; number of test run can be create must be less or equal ((max rows - from_row) +1) and must be less than &lt;em&gt;100&lt;/em&gt;. (required)
     * @param parentId ID of the container  Input 0 (zero) to get Test Runs directly under root (optional)
     * @param parentType Type of the container. Valid values include &lt;em&gt;root&lt;/em&gt;, &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt;, and &lt;em&gt;test-suite&lt;/em&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addTestRunWithParametersDatasetAsync(Long projectId, TestRunWithParameterCreateByDatasetResource body, Long parentId, String parentType, final ApiCallback<QueueProcessingResponseTestRunDataVM> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addTestRunWithParametersDatasetValidateBeforeCall(projectId, body, parentId, parentType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QueueProcessingResponseTestRunDataVM>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addTestRunWithParametersRandomize
     * @param projectId ID of the project (required)
     * @param body The Test Run&#39;s properties, its associated Test Case and combine type, number of combination   &lt;em&gt;name (optional):&lt;/em&gt; All test runs will be created with the same name if provided. If not provided, test run name &#x3D; test case name + [increased number, starting from 1]   &lt;em&gt;properties (optional):&lt;/em&gt; All test runs will be created with the same property list if provided. If not provided, default property values will be used.   &lt;strong&gt;test_case attributes:&lt;/strong&gt;  &lt;em&gt;id (required):&lt;/em&gt; id of testcase   &lt;em&gt;test_case_version_id (optional):&lt;/em&gt; Version ID of Testcase. If not specify, latest value will be used. For shared test case, only accept approved version   &lt;em&gt;combined_type:&lt;/em&gt; combine type for generate test runs with random test run value. Values can specify for this property are: &lt;strong&gt;1&lt;/strong&gt; (for unique_value ) OR &lt;strong&gt;0&lt;/strong&gt; (for unique_data ).   &lt;em&gt;number_of_combinations:&lt;/em&gt; number of test run can be create must be less or equal max possible created combinations based on selected combination_type and must less than &lt;em&gt;100&lt;/em&gt;. (required)
     * @param parentId ID of the container  Input 0 (zero) to get Test Runs directly under root (optional)
     * @param parentType Type of the container. Valid values include &lt;em&gt;root&lt;/em&gt;, &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt;, and &lt;em&gt;test-suite&lt;/em&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addTestRunWithParametersRandomizeCall(Long projectId, TestRunWithParameterCreateRandomResource body, Long parentId, String parentType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-runs/assign-parameter-values/randomize"
            .replaceAll("\\{" + "projectId" + "\\}", qtestApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (parentId != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("parentId", parentId));
        if (parentType != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("parentType", parentType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addTestRunWithParametersRandomizeValidateBeforeCall(Long projectId, TestRunWithParameterCreateRandomResource body, Long parentId, String parentType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new QtestApiException("Missing the required parameter 'projectId' when calling addTestRunWithParametersRandomize(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new QtestApiException("Missing the required parameter 'body' when calling addTestRunWithParametersRandomize(Async)");
        }
        

        com.squareup.okhttp.Call call = addTestRunWithParametersRandomizeCall(projectId, body, parentId, parentType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create multiple Test Runs with Parameter values random from selection combine type.
     * To create multiple Test Runs with parameter values under root or a container (Release, Test Cycle or Test Suite). Maximum number of test runs can be created depend on combine type.
     * @param projectId ID of the project (required)
     * @param body The Test Run&#39;s properties, its associated Test Case and combine type, number of combination   &lt;em&gt;name (optional):&lt;/em&gt; All test runs will be created with the same name if provided. If not provided, test run name &#x3D; test case name + [increased number, starting from 1]   &lt;em&gt;properties (optional):&lt;/em&gt; All test runs will be created with the same property list if provided. If not provided, default property values will be used.   &lt;strong&gt;test_case attributes:&lt;/strong&gt;  &lt;em&gt;id (required):&lt;/em&gt; id of testcase   &lt;em&gt;test_case_version_id (optional):&lt;/em&gt; Version ID of Testcase. If not specify, latest value will be used. For shared test case, only accept approved version   &lt;em&gt;combined_type:&lt;/em&gt; combine type for generate test runs with random test run value. Values can specify for this property are: &lt;strong&gt;1&lt;/strong&gt; (for unique_value ) OR &lt;strong&gt;0&lt;/strong&gt; (for unique_data ).   &lt;em&gt;number_of_combinations:&lt;/em&gt; number of test run can be create must be less or equal max possible created combinations based on selected combination_type and must less than &lt;em&gt;100&lt;/em&gt;. (required)
     * @param parentId ID of the container  Input 0 (zero) to get Test Runs directly under root (optional)
     * @param parentType Type of the container. Valid values include &lt;em&gt;root&lt;/em&gt;, &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt;, and &lt;em&gt;test-suite&lt;/em&gt; (optional)
     * @return QueueProcessingResponseTestRunDataVM
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QueueProcessingResponseTestRunDataVM addTestRunWithParametersRandomize(Long projectId, TestRunWithParameterCreateRandomResource body, Long parentId, String parentType) throws QtestApiException {
        ApiResponse<QueueProcessingResponseTestRunDataVM> resp = addTestRunWithParametersRandomizeWithHttpInfo(projectId, body, parentId, parentType);
        return resp.getData();
    }

    /**
     * Create multiple Test Runs with Parameter values random from selection combine type.
     * To create multiple Test Runs with parameter values under root or a container (Release, Test Cycle or Test Suite). Maximum number of test runs can be created depend on combine type.
     * @param projectId ID of the project (required)
     * @param body The Test Run&#39;s properties, its associated Test Case and combine type, number of combination   &lt;em&gt;name (optional):&lt;/em&gt; All test runs will be created with the same name if provided. If not provided, test run name &#x3D; test case name + [increased number, starting from 1]   &lt;em&gt;properties (optional):&lt;/em&gt; All test runs will be created with the same property list if provided. If not provided, default property values will be used.   &lt;strong&gt;test_case attributes:&lt;/strong&gt;  &lt;em&gt;id (required):&lt;/em&gt; id of testcase   &lt;em&gt;test_case_version_id (optional):&lt;/em&gt; Version ID of Testcase. If not specify, latest value will be used. For shared test case, only accept approved version   &lt;em&gt;combined_type:&lt;/em&gt; combine type for generate test runs with random test run value. Values can specify for this property are: &lt;strong&gt;1&lt;/strong&gt; (for unique_value ) OR &lt;strong&gt;0&lt;/strong&gt; (for unique_data ).   &lt;em&gt;number_of_combinations:&lt;/em&gt; number of test run can be create must be less or equal max possible created combinations based on selected combination_type and must less than &lt;em&gt;100&lt;/em&gt;. (required)
     * @param parentId ID of the container  Input 0 (zero) to get Test Runs directly under root (optional)
     * @param parentType Type of the container. Valid values include &lt;em&gt;root&lt;/em&gt;, &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt;, and &lt;em&gt;test-suite&lt;/em&gt; (optional)
     * @return ApiResponse&lt;QueueProcessingResponseTestRunDataVM&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QueueProcessingResponseTestRunDataVM> addTestRunWithParametersRandomizeWithHttpInfo(Long projectId, TestRunWithParameterCreateRandomResource body, Long parentId, String parentType) throws QtestApiException {
        com.squareup.okhttp.Call call = addTestRunWithParametersRandomizeValidateBeforeCall(projectId, body, parentId, parentType, null, null);
        Type localVarReturnType = new TypeToken<QueueProcessingResponseTestRunDataVM>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Create multiple Test Runs with Parameter values random from selection combine type. (asynchronously)
     * To create multiple Test Runs with parameter values under root or a container (Release, Test Cycle or Test Suite). Maximum number of test runs can be created depend on combine type.
     * @param projectId ID of the project (required)
     * @param body The Test Run&#39;s properties, its associated Test Case and combine type, number of combination   &lt;em&gt;name (optional):&lt;/em&gt; All test runs will be created with the same name if provided. If not provided, test run name &#x3D; test case name + [increased number, starting from 1]   &lt;em&gt;properties (optional):&lt;/em&gt; All test runs will be created with the same property list if provided. If not provided, default property values will be used.   &lt;strong&gt;test_case attributes:&lt;/strong&gt;  &lt;em&gt;id (required):&lt;/em&gt; id of testcase   &lt;em&gt;test_case_version_id (optional):&lt;/em&gt; Version ID of Testcase. If not specify, latest value will be used. For shared test case, only accept approved version   &lt;em&gt;combined_type:&lt;/em&gt; combine type for generate test runs with random test run value. Values can specify for this property are: &lt;strong&gt;1&lt;/strong&gt; (for unique_value ) OR &lt;strong&gt;0&lt;/strong&gt; (for unique_data ).   &lt;em&gt;number_of_combinations:&lt;/em&gt; number of test run can be create must be less or equal max possible created combinations based on selected combination_type and must less than &lt;em&gt;100&lt;/em&gt;. (required)
     * @param parentId ID of the container  Input 0 (zero) to get Test Runs directly under root (optional)
     * @param parentType Type of the container. Valid values include &lt;em&gt;root&lt;/em&gt;, &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt;, and &lt;em&gt;test-suite&lt;/em&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addTestRunWithParametersRandomizeAsync(Long projectId, TestRunWithParameterCreateRandomResource body, Long parentId, String parentType, final ApiCallback<QueueProcessingResponseTestRunDataVM> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addTestRunWithParametersRandomizeValidateBeforeCall(projectId, body, parentId, parentType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QueueProcessingResponseTestRunDataVM>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for create
     * @param projectId ID of the project (required)
     * @param body The Test Run&#39;s properties and its associated Test Case (required)
     * @param parentId ID of the container  Input 0 (zero) to get Test Runs directly under root (optional)
     * @param parentType Type of the container. Valid values include &lt;em&gt;root&lt;/em&gt;, &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt;, and &lt;em&gt;test-suite&lt;/em&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createCall(Long projectId, TestRunWithCustomFieldResource body, Long parentId, String parentType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-runs"
            .replaceAll("\\{" + "projectId" + "\\}", qtestApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (parentId != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("parentId", parentId));
        if (parentType != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("parentType", parentType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createValidateBeforeCall(Long projectId, TestRunWithCustomFieldResource body, Long parentId, String parentType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new QtestApiException("Missing the required parameter 'projectId' when calling create(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new QtestApiException("Missing the required parameter 'body' when calling create(Async)");
        }
        

        com.squareup.okhttp.Call call = createCall(projectId, body, parentId, parentType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates a Test Run
     * To create a Test Run under root or a container (Release, Test Cycle or Test Suite)  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+You can optionally specify a parent in the request parameter to create its test runs.  The associated Test Case is specified in the request body
     * @param projectId ID of the project (required)
     * @param body The Test Run&#39;s properties and its associated Test Case (required)
     * @param parentId ID of the container  Input 0 (zero) to get Test Runs directly under root (optional)
     * @param parentType Type of the container. Valid values include &lt;em&gt;root&lt;/em&gt;, &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt;, and &lt;em&gt;test-suite&lt;/em&gt; (optional)
     * @return TestRunWithCustomFieldResource
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TestRunWithCustomFieldResource create(Long projectId, TestRunWithCustomFieldResource body, Long parentId, String parentType) throws QtestApiException {
        ApiResponse<TestRunWithCustomFieldResource> resp = createWithHttpInfo(projectId, body, parentId, parentType);
        return resp.getData();
    }

    /**
     * Creates a Test Run
     * To create a Test Run under root or a container (Release, Test Cycle or Test Suite)  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+You can optionally specify a parent in the request parameter to create its test runs.  The associated Test Case is specified in the request body
     * @param projectId ID of the project (required)
     * @param body The Test Run&#39;s properties and its associated Test Case (required)
     * @param parentId ID of the container  Input 0 (zero) to get Test Runs directly under root (optional)
     * @param parentType Type of the container. Valid values include &lt;em&gt;root&lt;/em&gt;, &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt;, and &lt;em&gt;test-suite&lt;/em&gt; (optional)
     * @return ApiResponse&lt;TestRunWithCustomFieldResource&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TestRunWithCustomFieldResource> createWithHttpInfo(Long projectId, TestRunWithCustomFieldResource body, Long parentId, String parentType) throws QtestApiException {
        com.squareup.okhttp.Call call = createValidateBeforeCall(projectId, body, parentId, parentType, null, null);
        Type localVarReturnType = new TypeToken<TestRunWithCustomFieldResource>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a Test Run (asynchronously)
     * To create a Test Run under root or a container (Release, Test Cycle or Test Suite)  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+You can optionally specify a parent in the request parameter to create its test runs.  The associated Test Case is specified in the request body
     * @param projectId ID of the project (required)
     * @param body The Test Run&#39;s properties and its associated Test Case (required)
     * @param parentId ID of the container  Input 0 (zero) to get Test Runs directly under root (optional)
     * @param parentType Type of the container. Valid values include &lt;em&gt;root&lt;/em&gt;, &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt;, and &lt;em&gt;test-suite&lt;/em&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAsync(Long projectId, TestRunWithCustomFieldResource body, Long parentId, String parentType, final ApiCallback<TestRunWithCustomFieldResource> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createValidateBeforeCall(projectId, body, parentId, parentType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TestRunWithCustomFieldResource>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for delete
     * @param projectId ID of the project (required)
     * @param testRunId ID of the Test Run (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCall(Long projectId, Long testRunId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-runs/{testRunId}"
            .replaceAll("\\{" + "projectId" + "\\}", qtestApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "testRunId" + "\\}", qtestApiClient.escapeString(testRunId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteValidateBeforeCall(Long projectId, Long testRunId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new QtestApiException("Missing the required parameter 'projectId' when calling delete(Async)");
        }
        
        // verify the required parameter 'testRunId' is set
        if (testRunId == null) {
            throw new QtestApiException("Missing the required parameter 'testRunId' when calling delete(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteCall(projectId, testRunId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deletes a Test Run
     * To delete a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param testRunId ID of the Test Run (required)
     * @return Message
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Message delete(Long projectId, Long testRunId) throws QtestApiException {
        ApiResponse<Message> resp = deleteWithHttpInfo(projectId, testRunId);
        return resp.getData();
    }

    /**
     * Deletes a Test Run
     * To delete a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param testRunId ID of the Test Run (required)
     * @return ApiResponse&lt;Message&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Message> deleteWithHttpInfo(Long projectId, Long testRunId) throws QtestApiException {
        com.squareup.okhttp.Call call = deleteValidateBeforeCall(projectId, testRunId, null, null);
        Type localVarReturnType = new TypeToken<Message>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes a Test Run (asynchronously)
     * To delete a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param testRunId ID of the Test Run (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAsync(Long projectId, Long testRunId, final ApiCallback<Message> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteValidateBeforeCall(projectId, testRunId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Message>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteComment
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Test Run. (required)
     * @param commentId ID of the comment which you want to delete. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCommentCall(Long projectId, String idOrKey, Long commentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-runs/{idOrKey}/comments/{commentId}"
            .replaceAll("\\{" + "projectId" + "\\}", qtestApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "idOrKey" + "\\}", qtestApiClient.escapeString(idOrKey.toString()))
            .replaceAll("\\{" + "commentId" + "\\}", qtestApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCommentValidateBeforeCall(Long projectId, String idOrKey, Long commentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new QtestApiException("Missing the required parameter 'projectId' when calling deleteComment(Async)");
        }
        
        // verify the required parameter 'idOrKey' is set
        if (idOrKey == null) {
            throw new QtestApiException("Missing the required parameter 'idOrKey' when calling deleteComment(Async)");
        }
        
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new QtestApiException("Missing the required parameter 'commentId' when calling deleteComment(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteCommentCall(projectId, idOrKey, commentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deletes a Comment of a Test Run
     * To delete a Comment of a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Test Run. (required)
     * @param commentId ID of the comment which you want to delete. (required)
     * @return Object
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object deleteComment(Long projectId, String idOrKey, Long commentId) throws QtestApiException {
        ApiResponse<Object> resp = deleteCommentWithHttpInfo(projectId, idOrKey, commentId);
        return resp.getData();
    }

    /**
     * Deletes a Comment of a Test Run
     * To delete a Comment of a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Test Run. (required)
     * @param commentId ID of the comment which you want to delete. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> deleteCommentWithHttpInfo(Long projectId, String idOrKey, Long commentId) throws QtestApiException {
        com.squareup.okhttp.Call call = deleteCommentValidateBeforeCall(projectId, idOrKey, commentId, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Deletes a Comment of a Test Run (asynchronously)
     * To delete a Comment of a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Test Run. (required)
     * @param commentId ID of the comment which you want to delete. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteCommentAsync(Long projectId, String idOrKey, Long commentId, final ApiCallback<Object> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCommentValidateBeforeCall(projectId, idOrKey, commentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for get
     * @param projectId ID of the project (required)
     * @param testRunId ID of the Test Run. (required)
     * @param expand Valid values include:   i)&lt;em&gt;testcase&lt;/em&gt; - to expand the associated Test Case in the response;   ii) &lt;em&gt;testcase.teststep&lt;/em&gt; - to expand the associated Test Case and its Test Steps in the response (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCall(Long projectId, Long testRunId, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-runs/{testRunId}"
            .replaceAll("\\{" + "projectId" + "\\}", qtestApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "testRunId" + "\\}", qtestApiClient.escapeString(testRunId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getValidateBeforeCall(Long projectId, Long testRunId, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new QtestApiException("Missing the required parameter 'projectId' when calling get(Async)");
        }
        
        // verify the required parameter 'testRunId' is set
        if (testRunId == null) {
            throw new QtestApiException("Missing the required parameter 'testRunId' when calling get(Async)");
        }
        

        com.squareup.okhttp.Call call = getCall(projectId, testRunId, expand, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets a Test Run
     * To retrieve a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     * @param projectId ID of the project (required)
     * @param testRunId ID of the Test Run. (required)
     * @param expand Valid values include:   i)&lt;em&gt;testcase&lt;/em&gt; - to expand the associated Test Case in the response;   ii) &lt;em&gt;testcase.teststep&lt;/em&gt; - to expand the associated Test Case and its Test Steps in the response (optional)
     * @return TestRunWithCustomFieldResource
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TestRunWithCustomFieldResource get(Long projectId, Long testRunId, String expand) throws QtestApiException {
        ApiResponse<TestRunWithCustomFieldResource> resp = getWithHttpInfo(projectId, testRunId, expand);
        return resp.getData();
    }

    /**
     * Gets a Test Run
     * To retrieve a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     * @param projectId ID of the project (required)
     * @param testRunId ID of the Test Run. (required)
     * @param expand Valid values include:   i)&lt;em&gt;testcase&lt;/em&gt; - to expand the associated Test Case in the response;   ii) &lt;em&gt;testcase.teststep&lt;/em&gt; - to expand the associated Test Case and its Test Steps in the response (optional)
     * @return ApiResponse&lt;TestRunWithCustomFieldResource&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TestRunWithCustomFieldResource> getWithHttpInfo(Long projectId, Long testRunId, String expand) throws QtestApiException {
        com.squareup.okhttp.Call call = getValidateBeforeCall(projectId, testRunId, expand, null, null);
        Type localVarReturnType = new TypeToken<TestRunWithCustomFieldResource>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a Test Run (asynchronously)
     * To retrieve a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 4+
     * @param projectId ID of the project (required)
     * @param testRunId ID of the Test Run. (required)
     * @param expand Valid values include:   i)&lt;em&gt;testcase&lt;/em&gt; - to expand the associated Test Case in the response;   ii) &lt;em&gt;testcase.teststep&lt;/em&gt; - to expand the associated Test Case and its Test Steps in the response (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAsync(Long projectId, Long testRunId, String expand, final ApiCallback<TestRunWithCustomFieldResource> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getValidateBeforeCall(projectId, testRunId, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TestRunWithCustomFieldResource>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getComment
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Test Run. (required)
     * @param commentId ID of the Comment (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCommentCall(Long projectId, String idOrKey, Long commentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-runs/{idOrKey}/comments/{commentId}"
            .replaceAll("\\{" + "projectId" + "\\}", qtestApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "idOrKey" + "\\}", qtestApiClient.escapeString(idOrKey.toString()))
            .replaceAll("\\{" + "commentId" + "\\}", qtestApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCommentValidateBeforeCall(Long projectId, String idOrKey, Long commentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new QtestApiException("Missing the required parameter 'projectId' when calling getComment(Async)");
        }
        
        // verify the required parameter 'idOrKey' is set
        if (idOrKey == null) {
            throw new QtestApiException("Missing the required parameter 'idOrKey' when calling getComment(Async)");
        }
        
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new QtestApiException("Missing the required parameter 'commentId' when calling getComment(Async)");
        }
        

        com.squareup.okhttp.Call call = getCommentCall(projectId, idOrKey, commentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets a Comment from a Test Run
     * To retrieve a specific Comment from a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Test Run. (required)
     * @param commentId ID of the Comment (required)
     * @return CommentResource
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CommentResource getComment(Long projectId, String idOrKey, Long commentId) throws QtestApiException {
        ApiResponse<CommentResource> resp = getCommentWithHttpInfo(projectId, idOrKey, commentId);
        return resp.getData();
    }

    /**
     * Gets a Comment from a Test Run
     * To retrieve a specific Comment from a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Test Run. (required)
     * @param commentId ID of the Comment (required)
     * @return ApiResponse&lt;CommentResource&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CommentResource> getCommentWithHttpInfo(Long projectId, String idOrKey, Long commentId) throws QtestApiException {
        com.squareup.okhttp.Call call = getCommentValidateBeforeCall(projectId, idOrKey, commentId, null, null);
        Type localVarReturnType = new TypeToken<CommentResource>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a Comment from a Test Run (asynchronously)
     * To retrieve a specific Comment from a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Test Run. (required)
     * @param commentId ID of the Comment (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCommentAsync(Long projectId, String idOrKey, Long commentId, final ApiCallback<CommentResource> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCommentValidateBeforeCall(projectId, idOrKey, commentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CommentResource>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getComments
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Test Run (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCommentsCall(Long projectId, String idOrKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-runs/{idOrKey}/comments"
            .replaceAll("\\{" + "projectId" + "\\}", qtestApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "idOrKey" + "\\}", qtestApiClient.escapeString(idOrKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCommentsValidateBeforeCall(Long projectId, String idOrKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new QtestApiException("Missing the required parameter 'projectId' when calling getComments(Async)");
        }
        
        // verify the required parameter 'idOrKey' is set
        if (idOrKey == null) {
            throw new QtestApiException("Missing the required parameter 'idOrKey' when calling getComments(Async)");
        }
        

        com.squareup.okhttp.Call call = getCommentsCall(projectId, idOrKey, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets all Comments of a Test Run
     * To retrieve all Comments of a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Test Run (required)
     * @return PagedResourceCommentResource
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PagedResourceCommentResource getComments(Long projectId, String idOrKey) throws QtestApiException {
        ApiResponse<PagedResourceCommentResource> resp = getCommentsWithHttpInfo(projectId, idOrKey);
        return resp.getData();
    }

    /**
     * Gets all Comments of a Test Run
     * To retrieve all Comments of a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Test Run (required)
     * @return ApiResponse&lt;PagedResourceCommentResource&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PagedResourceCommentResource> getCommentsWithHttpInfo(Long projectId, String idOrKey) throws QtestApiException {
        com.squareup.okhttp.Call call = getCommentsValidateBeforeCall(projectId, idOrKey, null, null);
        Type localVarReturnType = new TypeToken<PagedResourceCommentResource>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets all Comments of a Test Run (asynchronously)
     * To retrieve all Comments of a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Test Run (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCommentsAsync(Long projectId, String idOrKey, final ApiCallback<PagedResourceCommentResource> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCommentsValidateBeforeCall(projectId, idOrKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PagedResourceCommentResource>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOf
     * @param projectId ID of the project (required)
     * @param parentId ID of the container (Release, Test Cycle or Test Suite)  Input 0 (zero) to retrieve Test Runs directly under root (optional)
     * @param parentType Type of the container. Valid values include &lt;em&gt;root&lt;/em&gt;, &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt; and &lt;em&gt;test-suite&lt;/em&gt; (optional)
     * @param expand Specify &lt;em&gt;expand&#x3D;descendants&lt;/em&gt; to include all Test Runs which are directly or indirectly under the container (optional)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOfCall(Long projectId, Long parentId, String parentType, String expand, Long page, Long pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-runs"
            .replaceAll("\\{" + "projectId" + "\\}", qtestApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (parentId != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("parentId", parentId));
        if (parentType != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("parentType", parentType));
        if (expand != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("expand", expand));
        if (page != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOfValidateBeforeCall(Long projectId, Long parentId, String parentType, String expand, Long page, Long pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new QtestApiException("Missing the required parameter 'projectId' when calling getOf(Async)");
        }
        

        com.squareup.okhttp.Call call = getOfCall(projectId, parentId, parentType, expand, page, pageSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets multiple Test Runs
     * To retrieve all Test Runs under root or under a container (Release, Test Cycle or Test Suite)  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param parentId ID of the container (Release, Test Cycle or Test Suite)  Input 0 (zero) to retrieve Test Runs directly under root (optional)
     * @param parentType Type of the container. Valid values include &lt;em&gt;root&lt;/em&gt;, &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt; and &lt;em&gt;test-suite&lt;/em&gt; (optional)
     * @param expand Specify &lt;em&gt;expand&#x3D;descendants&lt;/em&gt; to include all Test Runs which are directly or indirectly under the container (optional)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @return TestRunListResource
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TestRunListResource getOf(Long projectId, Long parentId, String parentType, String expand, Long page, Long pageSize) throws QtestApiException {
        ApiResponse<TestRunListResource> resp = getOfWithHttpInfo(projectId, parentId, parentType, expand, page, pageSize);
        return resp.getData();
    }

    /**
     * Gets multiple Test Runs
     * To retrieve all Test Runs under root or under a container (Release, Test Cycle or Test Suite)  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param parentId ID of the container (Release, Test Cycle or Test Suite)  Input 0 (zero) to retrieve Test Runs directly under root (optional)
     * @param parentType Type of the container. Valid values include &lt;em&gt;root&lt;/em&gt;, &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt; and &lt;em&gt;test-suite&lt;/em&gt; (optional)
     * @param expand Specify &lt;em&gt;expand&#x3D;descendants&lt;/em&gt; to include all Test Runs which are directly or indirectly under the container (optional)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @return ApiResponse&lt;TestRunListResource&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TestRunListResource> getOfWithHttpInfo(Long projectId, Long parentId, String parentType, String expand, Long page, Long pageSize) throws QtestApiException {
        com.squareup.okhttp.Call call = getOfValidateBeforeCall(projectId, parentId, parentType, expand, page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<TestRunListResource>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets multiple Test Runs (asynchronously)
     * To retrieve all Test Runs under root or under a container (Release, Test Cycle or Test Suite)  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param parentId ID of the container (Release, Test Cycle or Test Suite)  Input 0 (zero) to retrieve Test Runs directly under root (optional)
     * @param parentType Type of the container. Valid values include &lt;em&gt;root&lt;/em&gt;, &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt; and &lt;em&gt;test-suite&lt;/em&gt; (optional)
     * @param expand Specify &lt;em&gt;expand&#x3D;descendants&lt;/em&gt; to include all Test Runs which are directly or indirectly under the container (optional)
     * @param page By default the first page is returned but you can specify any page number to retrieve objects (optional, default to 1)
     * @param pageSize The result is paginated. By the default, the number of objects in each page is 100 if this is omitted. You can specify your custom number (up to 999) in this parameter (optional, default to 100)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOfAsync(Long projectId, Long parentId, String parentType, String expand, Long page, Long pageSize, final ApiCallback<TestRunListResource> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOfValidateBeforeCall(projectId, parentId, parentType, expand, page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TestRunListResource>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStatusValuable
     * @param projectId ID of the project (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStatusValuableCall(Long projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-runs/execution-statuses"
            .replaceAll("\\{" + "projectId" + "\\}", qtestApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStatusValuableValidateBeforeCall(Long projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new QtestApiException("Missing the required parameter 'projectId' when calling getStatusValuable(Async)");
        }
        

        com.squareup.okhttp.Call call = getStatusValuableCall(projectId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets Test Run statuses
     * Gets Test Run statuses
     * @param projectId ID of the project (required)
     * @return List&lt;StatusResource&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<StatusResource> getStatusValuable(Long projectId) throws QtestApiException {
        ApiResponse<List<StatusResource>> resp = getStatusValuableWithHttpInfo(projectId);
        return resp.getData();
    }

    /**
     * Gets Test Run statuses
     * Gets Test Run statuses
     * @param projectId ID of the project (required)
     * @return ApiResponse&lt;List&lt;StatusResource&gt;&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<StatusResource>> getStatusValuableWithHttpInfo(Long projectId) throws QtestApiException {
        com.squareup.okhttp.Call call = getStatusValuableValidateBeforeCall(projectId, null, null);
        Type localVarReturnType = new TypeToken<List<StatusResource>>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets Test Run statuses (asynchronously)
     * Gets Test Run statuses
     * @param projectId ID of the project (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStatusValuableAsync(Long projectId, final ApiCallback<List<StatusResource>> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStatusValuableValidateBeforeCall(projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<StatusResource>>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSubhierachy
     * @param projectId ID of the project (required)
     * @param parentType parentType (optional)
     * @param parentId parentId (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSubhierachyCall(Long projectId, String parentType, Long parentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-runs/subhierarchy"
            .replaceAll("\\{" + "projectId" + "\\}", qtestApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (parentType != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("parentType", parentType));
        if (parentId != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("parentId", parentId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSubhierachyValidateBeforeCall(Long projectId, String parentType, Long parentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new QtestApiException("Missing the required parameter 'projectId' when calling getSubhierachy(Async)");
        }
        

        com.squareup.okhttp.Call call = getSubhierachyCall(projectId, parentType, parentId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets a Sub Hierarchy
     * To retrieve a Sub Hierarchy of a container (root, release, test-cycle)   &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.3.4+
     * @param projectId ID of the project (required)
     * @param parentType parentType (optional)
     * @param parentId parentId (optional)
     * @return AutomationObjectTree
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AutomationObjectTree getSubhierachy(Long projectId, String parentType, Long parentId) throws QtestApiException {
        ApiResponse<AutomationObjectTree> resp = getSubhierachyWithHttpInfo(projectId, parentType, parentId);
        return resp.getData();
    }

    /**
     * Gets a Sub Hierarchy
     * To retrieve a Sub Hierarchy of a container (root, release, test-cycle)   &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.3.4+
     * @param projectId ID of the project (required)
     * @param parentType parentType (optional)
     * @param parentId parentId (optional)
     * @return ApiResponse&lt;AutomationObjectTree&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AutomationObjectTree> getSubhierachyWithHttpInfo(Long projectId, String parentType, Long parentId) throws QtestApiException {
        com.squareup.okhttp.Call call = getSubhierachyValidateBeforeCall(projectId, parentType, parentId, null, null);
        Type localVarReturnType = new TypeToken<AutomationObjectTree>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a Sub Hierarchy (asynchronously)
     * To retrieve a Sub Hierarchy of a container (root, release, test-cycle)   &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 9.3.4+
     * @param projectId ID of the project (required)
     * @param parentType parentType (optional)
     * @param parentId parentId (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSubhierachyAsync(Long projectId, String parentType, Long parentId, final ApiCallback<AutomationObjectTree> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSubhierachyValidateBeforeCall(projectId, parentType, parentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AutomationObjectTree>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for update
     * @param projectId ID of the project (required)
     * @param testRunId ID of the Test Run. (required)
     * @param body The Test Run&#39;s updated properties (required)
     * @param parentId ID of the container (Release, Test Cycle or Test Suite)  Input 0 (zero) to move the test run to under root  &lt;strong&gt;Important:&lt;/strong&gt; If you use the request parameters, the request body will be ignored. That means the test run is being moved but it will not be updated with the properties specify in the request body (optional)
     * @param parentType Type of the container. Valid values include &lt;em&gt;root&lt;/em&gt;, &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt; and &lt;em&gt;test-suite&lt;/em&gt; (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCall(Long projectId, Long testRunId, TestRunWithCustomFieldResource body, Long parentId, String parentType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-runs/{testRunId}"
            .replaceAll("\\{" + "projectId" + "\\}", qtestApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "testRunId" + "\\}", qtestApiClient.escapeString(testRunId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (parentId != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("parentId", parentId));
        if (parentType != null)
        localVarQueryParams.addAll(qtestApiClient.parameterToPair("parentType", parentType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateValidateBeforeCall(Long projectId, Long testRunId, TestRunWithCustomFieldResource body, Long parentId, String parentType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new QtestApiException("Missing the required parameter 'projectId' when calling update(Async)");
        }
        
        // verify the required parameter 'testRunId' is set
        if (testRunId == null) {
            throw new QtestApiException("Missing the required parameter 'testRunId' when calling update(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new QtestApiException("Missing the required parameter 'body' when calling update(Async)");
        }
        

        com.squareup.okhttp.Call call = updateCall(projectId, testRunId, body, parentId, parentType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates a Test Run
     * To update a Test Run or move it to another container  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param testRunId ID of the Test Run. (required)
     * @param body The Test Run&#39;s updated properties (required)
     * @param parentId ID of the container (Release, Test Cycle or Test Suite)  Input 0 (zero) to move the test run to under root  &lt;strong&gt;Important:&lt;/strong&gt; If you use the request parameters, the request body will be ignored. That means the test run is being moved but it will not be updated with the properties specify in the request body (optional)
     * @param parentType Type of the container. Valid values include &lt;em&gt;root&lt;/em&gt;, &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt; and &lt;em&gt;test-suite&lt;/em&gt; (optional)
     * @return TestRunWithCustomFieldResource
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TestRunWithCustomFieldResource update(Long projectId, Long testRunId, TestRunWithCustomFieldResource body, Long parentId, String parentType) throws QtestApiException {
        ApiResponse<TestRunWithCustomFieldResource> resp = updateWithHttpInfo(projectId, testRunId, body, parentId, parentType);
        return resp.getData();
    }

    /**
     * Updates a Test Run
     * To update a Test Run or move it to another container  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param testRunId ID of the Test Run. (required)
     * @param body The Test Run&#39;s updated properties (required)
     * @param parentId ID of the container (Release, Test Cycle or Test Suite)  Input 0 (zero) to move the test run to under root  &lt;strong&gt;Important:&lt;/strong&gt; If you use the request parameters, the request body will be ignored. That means the test run is being moved but it will not be updated with the properties specify in the request body (optional)
     * @param parentType Type of the container. Valid values include &lt;em&gt;root&lt;/em&gt;, &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt; and &lt;em&gt;test-suite&lt;/em&gt; (optional)
     * @return ApiResponse&lt;TestRunWithCustomFieldResource&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TestRunWithCustomFieldResource> updateWithHttpInfo(Long projectId, Long testRunId, TestRunWithCustomFieldResource body, Long parentId, String parentType) throws QtestApiException {
        com.squareup.okhttp.Call call = updateValidateBeforeCall(projectId, testRunId, body, parentId, parentType, null, null);
        Type localVarReturnType = new TypeToken<TestRunWithCustomFieldResource>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a Test Run (asynchronously)
     * To update a Test Run or move it to another container  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 6+
     * @param projectId ID of the project (required)
     * @param testRunId ID of the Test Run. (required)
     * @param body The Test Run&#39;s updated properties (required)
     * @param parentId ID of the container (Release, Test Cycle or Test Suite)  Input 0 (zero) to move the test run to under root  &lt;strong&gt;Important:&lt;/strong&gt; If you use the request parameters, the request body will be ignored. That means the test run is being moved but it will not be updated with the properties specify in the request body (optional)
     * @param parentType Type of the container. Valid values include &lt;em&gt;root&lt;/em&gt;, &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;test-cycle&lt;/em&gt; and &lt;em&gt;test-suite&lt;/em&gt; (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAsync(Long projectId, Long testRunId, TestRunWithCustomFieldResource body, Long parentId, String parentType, final ApiCallback<TestRunWithCustomFieldResource> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateValidateBeforeCall(projectId, testRunId, body, parentId, parentType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TestRunWithCustomFieldResource>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateComment
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Test Run (required)
     * @param commentId ID of the comment which you want to update. (required)
     * @param body The Comment&#39;s updated content (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws QtestApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCommentCall(Long projectId, String idOrKey, Long commentId, CommentResource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v3/projects/{projectId}/test-runs/{idOrKey}/comments/{commentId}"
            .replaceAll("\\{" + "projectId" + "\\}", qtestApiClient.escapeString(projectId.toString()))
            .replaceAll("\\{" + "idOrKey" + "\\}", qtestApiClient.escapeString(idOrKey.toString()))
            .replaceAll("\\{" + "commentId" + "\\}", qtestApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = qtestApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = qtestApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            qtestApiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return qtestApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCommentValidateBeforeCall(Long projectId, String idOrKey, Long commentId, CommentResource body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws QtestApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new QtestApiException("Missing the required parameter 'projectId' when calling updateComment(Async)");
        }
        
        // verify the required parameter 'idOrKey' is set
        if (idOrKey == null) {
            throw new QtestApiException("Missing the required parameter 'idOrKey' when calling updateComment(Async)");
        }
        
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new QtestApiException("Missing the required parameter 'commentId' when calling updateComment(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new QtestApiException("Missing the required parameter 'body' when calling updateComment(Async)");
        }
        

        com.squareup.okhttp.Call call = updateCommentCall(projectId, idOrKey, commentId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates a Comment of a Test Run
     * To update a Comment of a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Test Run (required)
     * @param commentId ID of the comment which you want to update. (required)
     * @param body The Comment&#39;s updated content (required)
     * @return CommentResource
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CommentResource updateComment(Long projectId, String idOrKey, Long commentId, CommentResource body) throws QtestApiException {
        ApiResponse<CommentResource> resp = updateCommentWithHttpInfo(projectId, idOrKey, commentId, body);
        return resp.getData();
    }

    /**
     * Updates a Comment of a Test Run
     * To update a Comment of a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Test Run (required)
     * @param commentId ID of the comment which you want to update. (required)
     * @param body The Comment&#39;s updated content (required)
     * @return ApiResponse&lt;CommentResource&gt;
     * @throws QtestApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CommentResource> updateCommentWithHttpInfo(Long projectId, String idOrKey, Long commentId, CommentResource body) throws QtestApiException {
        com.squareup.okhttp.Call call = updateCommentValidateBeforeCall(projectId, idOrKey, commentId, body, null, null);
        Type localVarReturnType = new TypeToken<CommentResource>(){}.getType();
        return qtestApiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a Comment of a Test Run (asynchronously)
     * To update a Comment of a Test Run  &lt;strong&gt;qTest Manager version:&lt;/strong&gt; 7.5+
     * @param projectId ID of the project (required)
     * @param idOrKey PID or ID of the Test Run (required)
     * @param commentId ID of the comment which you want to update. (required)
     * @param body The Comment&#39;s updated content (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws QtestApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCommentAsync(Long projectId, String idOrKey, Long commentId, CommentResource body, final ApiCallback<CommentResource> callback) throws QtestApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCommentValidateBeforeCall(projectId, idOrKey, commentId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CommentResource>(){}.getType();
        qtestApiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
